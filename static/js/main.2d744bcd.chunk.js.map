{"version":3,"sources":["firebase.js","Components/NavBar/NavBar.js","Components/Home.js","Components/Hooks/useInterval.js","Data_Models/Candidate.js","Components/ElectionPage/Race/ProgressBar.js","Components/ElectionPage/Race/CandidatePosition.js","Components/ElectionPage/Race/CandidateList.js","Data_Models/Util.js","Components/ElectionPage/Settings/EditCandidate.js","Components/ElectionPage/Settings/EditParty.js","Components/ElectionPage/Settings/EditRace.js","Components/ElectionPage/Settings/Settings.js","Components/Hooks/useWindowSize.js","Components/ElectionPage/CustomFirstPie.js","Components/ElectionPage/Charts/ChartComponents/FirstChoicePie.js","Data_Models/Round.js","Data_Models/Race.js","Components/ElectionPage/Charts/ChartComponents/ElectedCandidatesPie.js","Components/ElectionPage/Charts/ChartComponents/CandidatesRankedPie.js","Components/ElectionPage/Charts/ChartComponents/CandidatesRanked.js","Components/ElectionPage/Charts/ChartComponents/PartyPercentage.js","Components/ElectionPage/Charts/ChartComponents/EventualWinner.js","Components/ElectionPage/Charts/ChartComponents/VoteOverTime.js","Components/ElectionPage/Charts/ChartComponents/VoteOverTimeBump.js","Components/ElectionPage/Charts/ChartComponents/RoundCandidateBump.js","Components/ElectionPage/Charts/ChartPage.js","Data_Models/Voter.js","Data_Models/Ballot.js","Data_Models/Party.js","Components/ElectionPage/Models/ModelComponents/Sankey.js","Components/ElectionPage/Models/ModelComponents/HeatMap.js","Components/ElectionPage/Models/ModelComponents/ElectionBar.js","Components/ElectionPage/Models/ModelComponents/Chord.js","Components/ElectionPage/Models/ModelComponents/ForceGraph.js","Components/ElectionPage/Models/ModelPage.js","Components/ElectionPage/ElectionPage.js","Components/FourZeroFour.js","Components/AddToDatabase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NavBar","props","useState","activeKey","setActiveKey","handleSelect","eventKey","Number","isInteger","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","onClick","Toggle","aria-controls","Collapse","id","Nav","className","onSelect","Link","Home","CreateSelectButton","election_title","filename","years","yearButtons","map","item","index","Button","key","year","console","log","OnClick","ButtonGroup","vertical","size","style","padding","disabled","asuc","asucsb","asucd","asucsc","asucla","display","alignItems","justifyContent","flexWrap","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Candidate","candidate_id","candidate_name","candidate_party","candidate_color","this","CandidateState","ProgressBar","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","color","fontWeight","Math","floor","CandidatePosition","get_status_color","status","position","isNaN","seats","candidate","party_color","party_name","score","margin","quota","min","CandidateList","candidate_list","candidates","sort","x","y","scope","find_race_by_name","races","name","i","length","race_name","find_race_by_id","race_id","String","find_candidate_by_id","find_party_by_name","parties","party","shadeColor","percent","R","parseInt","substring","G","B","toString","EditCandidate","candidateName","setCandidateName","undefined","setParty","setColor","active","setActive","displayColorPicker","setDisplayColorPicker","handleClose","setShow","saveChanges","saveCandidateChanges","show","party_options","value","Modal","aria-labelledby","centered","onHide","Header","closeButton","Title","Form","onKeyPress","e","which","preventDefault","Row","Col","Label","Control","type","onChange","event","target","as","background","boxShadow","cursor","zIndex","top","right","bottom","left","onChangeComplete","hex","Footer","EditParty","partyName","setPartyName","savePartyChanges","party_id","EditRace","raceName","setRaceName","setQuota","race","ElectionSettings","showCandidate","setShowCandidate","showRace","setShowRace","showParty","setShowParty","setCandidate","candidateBoxes","inactive_candidates","paddingLeft","paddingRight","showForCandidate","partyBoxes","showForParty","raceBox","Group","flexDirection","running","reset_race","useWindowSize","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","GroupSettings","groupNumber","number","title","random","CustomGraph","totalAmount","data","innerRadius","padAngle","cornerRadius","colors","bar","groups","group","borderColor","from","modifiers","enableRadialLabels","sliceLabel","round","slicesLabelsSkipAngle","slicesLabelsTextColor","legends","text","fontSize","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemTextColor","itemDirection","itemOpacity","symbolSize","symbolShape","CustomFirstPie","setTitle","selectedCandidates","setSelectedCandidates","editTitle","setEditTitle","imageRef","React","createRef","setGroups","activeGroupNumber","setActiveGroupNumber","push","group_buttons","indexOf","candidate_options","scores","first_scores","groupScore","md","concat","ref","exportComponentAsPNG","Body","Array","selectedOptions","option","multiple","copy","splice","FirstChoicePie","get_ranked_choices","ranked_choices","ballots","choices","pixelRatio","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","animate","motionStiffness","motionDamping","Round","round_number","add_ballot","ballot","state","RoundState","COMPLETE","Error","ballot_id","find_next_active_candidate","candidate_ballots","candidate_scores","active_candidates","includes","add_candidate","elected_candidates","start_inactive_candidates","start_active_candidates","eliminated_candidates","set_elected_candidate","filter","ballotsToTransfer","set_eliminate_candidate","candidate_ballot","candidate_score","complete","isCandidateElected","candidate_real_scores","RUNNING","exhausted","rankings","Race","dropped_candidates","dropped","RaceState","ADDING","current_candidate","excused","inactive_ballots","rounds","transfer_voters","ballots_to_apply","candidate_ballot_rankings","planned_inactive_candidates","planned_active_candidates","elected","transferring","transfered","excuse_candidate","unexcuse_candidate","num_candidates","quota_algorithm","QuotaTypes","DROOP","HagenbachBischoff","HARE","currentScores","candidateTable","start_tabulation","TABULATING","run_race_step","elect_candidate","currentRound","Object","keys","surplus","transfer_value","transfer_candidate","shift","first_round_score","activeCandidates","roundElected","maxElected","roundTransfer","reverse","complete_round","previousRound","add_round","begin_race","PartyPercentage","entries","constructor","maxChoices","num_ranked","max","scheme","CandidatesRanked","data_to_add","indexBy","innerPadding","minValue","maxValue","groupMode","layout","colorBy","borderWidth","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","isInteractive","maxchoices","datapoints","xScale","yScale","stacked","orient","enablePoints","enableArea","areaOpacity","useMesh","get_first_elected","VoteOverTime","choices_over_time","score_chart","xFormat","yFormat","tickValues","lineWidth","VoteOverTimeBump","indexOfMax","arr","maxIndex","increment","candidate_positions","datapoint","getCandidateByName","activeLineWidth","inactiveLineWidth","inactiveOpacity","pointSize","activePointSize","inactivePointSize","format","RoundCandidateBump","pointColor","theme","pointBorderWidth","activePointBorderWidth","pointBorderColor","ChartPage","chartStyle","alignSelf","ElectedCandidatesPie","CandidatesRankedPie","EventualWinner","Voter","voter_id","participating_races","participating_in_race","get_ballot_for_race","Ballot","Party","isValidColor","s","Option","Sankey","active_candidate","prev_round","nodes","links","link","source","transfer_candidates_ballot","next_candidate","transfer_candidate_id","GenerateData","align","nodeTooltip","node","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","enableLinkGradient","enableLabels","label","labelPosition","labelOrientation","labelPadding","HeatMap","get_ballots_for_candidate_at_position","showPercent","xChoice","setXChoice","yChoice","setYChoice","heatData","other_candidate","sum","xButtons","Dropdown","Item","yButtons","DropdownButton","tooltipFormat","forceSquare","cellOpacity","cellBorderColor","defs","rotation","spacing","fill","hoverTarget","cellHoverOthersOpacity","ElectionBar","get_round_data","round_data","get_candidate_position","candidate_table","get_candidate_by_position","final_candidate_score","setRound","data_active_candidates","round_active_candidates","chart_data","transferred","font","step","changeEvent","max_score","get_max_score","Chord","chordData","matrix","valueFormat","innerRadiusRatio","innerRadiusOffset","arcOpacity","arcBorderWidth","arcBorderColor","ribbonOpacity","ribbonBorderWidth","ribbonBorderColor","labelOffset","labelRotation","arcHoverOpacity","arcHoverOthersOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","effects","on","ForceGraph","find_node_by_id","get_final_active_round","useMemo","neighbors","last_round","source_name","target_name","forEach","a","b","Generate_Data","Set","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","updateHighlight","paintRing","useCallback","ctx","beginPath","arc","PI","fillStyle","getColor","getNodeLabel","getValue","isVisible","linkSize","has","fgRef","is2D","graphData","autoPauseRedraw","nodeRelSize","nodeVal","nodeLabel","nodeColor","nodeVisibility","linkWidth","linkLabel","linkAutoColorBy","linkCurvature","nodeCanvasObjectMode","nodeCanvasObject","onNodeHover","clear","add","neighbor","onLinkHover","ModelPage","model","minHeight","ElectionPage","election_configuration","setElectionConfiguration","candidate_data","setCandidateData","party_data","setPartyData","ballot_data","setBallotData","candidates_dropped","setCandidatesDropped","isLoading","setIsLoading","partiesLoaded","setPartiesLoaded","racesLoaded","setRacesLoaded","candidatesLoaded","setCandidatesLoaded","votersLoaded","setVotersLoaded","setParties","setRaces","voters","setVoters","activeRace","setActiveRace","speed","setSpeed","refresh","setRefresh","isRunning","setIsRunning","page","setPage","setModel","parties_data","electionId","match","params","yearId","databaseString","database","once","snapshot","exists","child","val","loadData","partiesToAdd","uuid","loadParties","racesToAdd","race_position","race_max_winners","loadRaces","newParties","candidate_colors","loadCandidates","voter","candidateOrder","loadVoters","pageButtonStyle","pageButtons","raceTitle","dropdownItems","modelButtons","find_party_by_id","new_races","candidate_races","find_races_by_candidate_id","race_to_change","FourZeroFour","Component","AddToDatabase","reader","FileReader","onload","JSON","parse","result","files","readAsText","electionName","setElectionName","setYear","onSubmit","checkStrings","str","alert","set","placeholder","justifyItems","File","accept","NavBarWithRouter","withRouter","App","basename","exact","path","to","component","render","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d744bcd.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyCFNJfMcHbdoAKVVF88d-9POsUgk-C7NKk\",\n    authDomain: \"stvote-b967b.firebaseapp.com\",\n    databaseURL: \"https://stvote-b967b.firebaseio.com\",\n    projectId: \"stvote-b967b\",\n    storageBucket: \"stvote-b967b.appspot.com\",\n    messagingSenderId: \"487837721842\",\n    appId: \"1:487837721842:web:95c0dc83a5eeb46b995c6b\"\n}\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { useState } from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction NavBar(props) {\n\n    const [activeKey, setActiveKey] = useState(1);\n\n    const handleSelect = (eventKey) => {\n        if (Number.isInteger(eventKey))\n            setActiveKey(eventKey);\n        else\n            setActiveKey(0);\n    };\n\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/stvote/home\" onClick={handleSelect}>STVote</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav activeKey={activeKey} className=\"mr-auto\" onSelect={handleSelect}>\n                    <Nav.Link eventKey={1} href=\"/stvote/home\">Home</Nav.Link>\n                    <Nav.Link eventKey={1} href=\"/stvote/election\">Election</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\n\nfunction Home(props) {\n    const OnClick = (election_title, year) => {\n\n        console.log(\"Clicked\", election_title, year);\n    }\n    const CreateSelectButton = (election_title, filename, years) => {\n        let yearButtons = years.map((item, index) => (\n            <Button key={index} href={\"/stvote/election/\" + filename + \"/\" + item} onClick={() => OnClick(election_title, item)}>{item}</Button>\n        ));\n\n        return (\n            <ButtonGroup vertical size=\"lg\" style={{ padding: '2%' }}>\n                <Button variant=\"dark\" disabled={true}>{election_title}</Button>\n                {yearButtons}\n            </ButtonGroup>\n        );\n    }\n\n    let asuc = CreateSelectButton('ASUC Berkeley', \"uc_berkeley\", [2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsb = CreateSelectButton('ASUC Santa Barbara', \"uc_santa_barbara\", [2016, 2017, 2018, 2019, 2020]);\n    let asucd = CreateSelectButton('AS UC Davis', \"uc_davis\", [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsc = CreateSelectButton('AS UC Santa Cruz', \"uc_berkeley\", [2018, 2019, 2020]);\n    let asucla = CreateSelectButton('AS UC Los Angeles', \"uc_berkeley\", [2018, 2019, 2020]);\n\n    return (\n        <div className=\"text-center\">\n            <h1> STVote Elections </h1>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly', flexWrap: 'wrap' }}>\n                {asuc}\n                {asucsb}\n                {asucd}\n                {asucsc}\n                {asucla}\n            </div>\n        </div >\n    );\n}\n\nexport default Home;\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","\nexport class Candidate {\n    constructor(candidate_id, candidate_name, candidate_party, candidate_color = \"#FFFFFF\") {\n        this.candidate_id = candidate_id;\n        this.candidate_name = candidate_name;\n        this.candidate_party = candidate_party;\n        this.candidate_color = candidate_color;\n    }\n\n\n}\n\nexport const CandidateState = {\n    ELECTED: \"ELECTED\",\n    RUNNING: \"RUNNING\",\n    TRANSFERRING: \"TRANSFERRING\",\n    TRANSFERED: \"TRANSFERED\",\n    EXCUSED: \"EXCUSED\",\n};","import React from 'react';\n\nconst ProgressBar = (props) => {\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        height: '48px',\n        width: '100%',\n        backgroundColor: \"#fffbf5\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: bgcolor,\n        borderRadius: 'inherit',\n        textAlign: 'right'\n    }\n\n    const labelStyles = {\n        padding: 5,\n        color: 'black',\n        fontWeight: 'bold'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span style={labelStyles}>{`${Math.floor(completed)}%`}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;","import React from 'react';\nimport { CandidateState } from '../../../Data_Models/Candidate';\nimport ProgressBar from './ProgressBar';\nimport '../ElectionPage.css'\n\nfunction CandidatePosition(props) {\n    const get_status_color = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"#01A039\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"#0095E0\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"#E07A00\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"#FF0000\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"#D5D5D5\";\n        return \"#FFFFFF\"\n    }\n\n    const get_status_text = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"ELECTED\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"RUNNING\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"TRANSFERRING\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"TRANSFERED\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"EXCUSED\";\n        return \"\"\n    }\n\n    const get_position = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position))\n            return props.position + 1;\n        return 0;\n    }\n\n    const get_position_color = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position)) {\n            if (props.position < props.seats) {\n                if (props.status === CandidateState.ELECTED)\n                    return \"#01A039\";\n                return \"#C5FFC5\"\n            } else if (props.status === CandidateState.RUNNING)\n                return \"#FAB8B8\";\n            else if (props.status === CandidateState.EXCUSED)\n                return \"#D5D5D5\";\n            else\n                return \"#FF0000\";\n        }\n        return \"#FFFFFF\";\n    }\n\n    const get_percentage = () => {\n        if (props.quota === 0)\n            return 0;\n        return Math.min(100, (props.score / props.quota) * 100);\n    }\n\n    return (\n        <tr>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: get_position_color() }}> {get_position()} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: \"#FFFFFF\" }}> {props.candidate.candidate_name} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: props.candidate.candidate_party.party_color }}> {props.candidate.candidate_party.party_name} </td >\n            <td className=\"basic-row\" width=\"150\" style={{ backgroundColor: get_status_color() }}> {get_status_text()} </td >\n            <td className=\"basic-row\" width=\"100\" style={{ backgroundColor: get_status_color() }}> {Math.floor(props.score)} </td >\n            <td style={{ padding: \"0 0 0 0\", margin: \"0 0 0 0\" }}>\n                <div style={{ display: 'inline-block', width: '100%', height: '100%' }}>\n                    <ProgressBar bgcolor={get_status_color()} completed={get_percentage()} />\n                </div>\n            </td >\n        </tr >\n    );\n}\n\nexport default CandidatePosition;\n","import React from 'react';\nimport CandidatePosition from './CandidatePosition';\nimport '../ElectionPage.css'\n\nfunction CandidateList(props) {\n\n    let sortedCandidates = props.candidates().sort((x, y) => {\n        if (x.position > y.position) {\n            return 1;\n        } else if (y.position > x.position) {\n            return -1;\n        }\n        return 0;\n    });\n\n    let candidate_list = sortedCandidates.map((item, index) => (\n        <CandidatePosition key={index} candidate={item.candidate} status={item.status}\n            score={item.score} position={item.position} quota={item.quota} seats={props.seats} />\n    ));\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-bordered\" >\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >#</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Name</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Party</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\">Status</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" > Score</th >\n                        <th className=\"title-row\" scope=\"col\">Quota Percentage</th>\n                    </tr >\n                </thead >\n                <tbody>\n                    {candidate_list}\n                </tbody>\n            </table >\n        </div >\n    );\n}\n\nexport default CandidateList;\n","/*\n    Input: List of Races, A Race Name to find\n    Output: A Race, based upon the Race Name (first occurance)\n*/\nexport const find_race_by_name = (races, name) => {\n    for (let i = 0; i < races.length; i++) {\n        if (races[i].race_name === name)\n            return races[i];\n    }\n    return null;\n};\n\n/*\n    Input: List of Races, A Race ID to find\n    Output: A Race, based upon the Race Id (first occurance)\n*/\nexport const find_race_by_id = (races, race_id) => {\n    for (let i = 0; i < races.length; i++) {\n        if (String(races[i].race_id) === race_id)\n            return races[i];\n    }\n    return null;\n};\n\n/*\n    Input: List of Candidates, A candidate ID to find\n    Output: A Candidate, based upon the candidate_id (first occurance)\n*/\nexport const find_candidate_by_id = (candidates, candidate_id) => {\n    for (const candidate of candidates)\n        if (String(candidate.candidate_id) === candidate_id)\n            return candidate;\n    return null;\n};\n\n/*\n    Input: List of Candidates, A candidate Name to find\n    Output: A Candidate, based upon the candidate name (first occurance)\n*/\nexport const find_candidate_by_name = (candidates, candidate_name) => {\n    for (let i = 0; i < candidates.length; i++)\n        if (String(candidates[i].candidate_name) === candidate_name)\n            return candidates[i];\n    return null;\n};\n\n/*\n    Input: List of Parties, A party name to find\n    Output: A party, based upon the party name (first occurance)\n*/\nexport const find_party_by_name = (parties, party_name) => {\n    for (const party of parties)\n        if (String(party.party_name) === party_name)\n            return party;\n    return null\n};\n\n/*\n    Input: List of Parties, A party name to find\n    Output: A party, based upon the party name (first occurance)\n*/\nexport const find_party_by_id = (parties, party_id) => {\n    for (const party of parties)\n        if (String(party.party_id) === party_id)\n            return party;\n    return null\n};\n\n/*\n    Input: List of Races, Find Races that include candidate name\n    Output: List of Races that include the candidate name\n*/\nexport const find_races_by_candidate_name = (races, candidate_name) => {\n    let candidate_races = []\n    for (const race of races) {\n        let candidate = find_candidate_by_name(race.candidates, candidate_name)\n        if (candidate != null) {\n            candidate_races.push(race);\n        }\n    }\n    return candidate_races;\n};\n\n/*\n    Input: List of Races, Find Races that include candidate name\n    Output: List of Races that include the candidate name\n*/\nexport const find_races_by_candidate_id = (races, candidate_id) => {\n    let candidate_races = []\n    for (const race of races) {\n        let candidate = find_candidate_by_id(race.candidates, candidate_id)\n        if (candidate != null) {\n            candidate_races.push(race);\n        }\n    }\n    return candidate_races;\n};\n\n/*\n    Input: Color, Percent of that Color\n    Output: Returns a color shade\n*/\nexport const shadeColor = (color, percent) => {\n\n    var R = parseInt(color.substring(1, 3), 16);\n    var G = parseInt(color.substring(3, 5), 16);\n    var B = parseInt(color.substring(5, 7), 16);\n\n    R = parseInt(R * (100 + percent) / 100);\n    G = parseInt(G * (100 + percent) / 100);\n    B = parseInt(B * (100 + percent) / 100);\n\n    R = (R < 255) ? R : 255;\n    G = (G < 255) ? G : 255;\n    B = (B < 255) ? B : 255;\n\n    var RR = ((R.toString(16).length === 1) ? \"0\" + R.toString(16) : R.toString(16));\n    var GG = ((G.toString(16).length === 1) ? \"0\" + G.toString(16) : G.toString(16));\n    var BB = ((B.toString(16).length === 1) ? \"0\" + B.toString(16) : B.toString(16));\n\n    return \"#\" + RR + GG + BB;\n}","import React, { useEffect, useState } from 'react';\n\nimport { SketchPicker } from 'react-color';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\n\nimport { find_party_by_name } from '../../../Data_Models/Util'\n\nfunction EditCandidate(props) {\n    const [candidateName, setCandidateName] = useState(\"Name\");\n    const [party, setParty] = useState(undefined);\n    const [color, setColor] = useState(\"#fff\");\n    const [active, setActive] = useState(true);\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    useEffect(() => {\n        if (props.candidate !== undefined) {\n            setParty(props.candidate.candidate_party)\n            setCandidateName(props.candidate.candidate_name)\n            setColor(props.candidate.candidate_color)\n        }\n    }, [props.candidate]);\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleEditChange = (event) => {\n        setCandidateName(event.target.value)\n    }\n\n    const changeParty = (event) => {\n        setParty(find_party_by_name(props.parties, event.target.value))\n    }\n\n    const changeActive = (event) => (setActive(event.target.value))\n\n    const handleClose = () => props.setShow(false);\n\n    const saveChanges = () => {\n        props.saveCandidateChanges(props.candidate.candidate_id, candidateName, party, color, active)\n        handleClose()\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault()\n            saveChanges()\n        }\n    }\n\n    if (props.show === false || props.candidate === undefined || party === undefined)\n        return <div />\n\n    let party_options = props.parties.map((item, index) => {\n        return <option key={index} value={item.party_name}>{item.party_name}</option>\n    });\n\n    return (\n        <Modal size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{\"Editing: \" + candidateName}</Modal.Title>\n            </Modal.Header>\n            <Form onKeyPress={onKeyPress}>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Name</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control style={{\n                            width: '32vw'\n                        }}\n                            type=\"text\"\n                            value={candidateName}\n                            onChange={handleEditChange} />\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Party</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control as=\"select\" value={party.party_name}\n                            onChange={changeParty}>\n                            {party_options}\n                        </Form.Control>\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Color</Form.Label>\n                    </Col>\n                    <Col>\n                        <div style={{\n                            padding: '1vw',\n                            background: '#fff',\n                            borderRadius: '5px',\n                            boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                            display: 'inline-block',\n                            cursor: 'pointer',\n                        }}\n                            onClick={handleColorPickerClicked}>\n                            <div style={{\n                                width: '30vw',\n                                height: '2vw',\n                                borderRadius: '2px',\n                                backgroundColor: color,\n                            }} />\n                        </div>\n\n                        {displayColorPicker ? <div style={{\n                            position: 'absolute',\n                            zIndex: '2',\n                        }}>\n                            <div style={{\n                                position: 'fixed',\n                                top: '0px',\n                                right: '0px',\n                                bottom: '0px',\n                                left: '0px',\n                            }} onClick={handleColorPickerClosed} />\n\n                            <SketchPicker color={color} onChangeComplete={changeColor} />\n                        </div> : null}\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Active</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control as=\"select\" value={active} onChange={changeActive}>\n                            <option value={true}>Yes</option>\n                            <option value={false}>No</option>\n                        </Form.Control>\n                    </Col>\n                </Row>\n            </Form>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={saveChanges}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditCandidate;","import React, { useEffect, useState } from 'react';\n\nimport { SketchPicker } from 'react-color';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\n\n\nfunction EditParty(props) {\n    const [partyName, setPartyName] = useState(\"Name\");\n    const [color, setColor] = useState(\"#fff\");\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    useEffect(() => {\n        if (props.party !== undefined) {\n            setPartyName(props.party.party_name)\n            setColor(props.party.party_color)\n        }\n    }, [props.party]);\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleEditChange = (event) => {\n        setPartyName(event.target.value)\n    }\n\n\n    const handleClose = () => props.setShow(false);\n\n    const saveChanges = () => {\n        props.savePartyChanges(props.party.party_id, partyName, color)\n        handleClose()\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault()\n            saveChanges()\n        }\n    }\n\n    if (props.show === false || props.party === undefined)\n        return <div />\n\n    return (\n        <Modal size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{\"Editing: \" + partyName}</Modal.Title>\n            </Modal.Header>\n            <Form onKeyPress={onKeyPress}>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Name</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control style={{\n                            width: '32vw'\n                        }}\n                            type=\"text\"\n                            value={partyName}\n                            onChange={handleEditChange} />\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Color</Form.Label>\n                    </Col>\n                    <Col>\n                        <div style={{\n                            padding: '1vw',\n                            background: '#fff',\n                            borderRadius: '5px',\n                            boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                            display: 'inline-block',\n                            cursor: 'pointer',\n                        }}\n                            onClick={handleColorPickerClicked}>\n                            <div style={{\n                                width: '30vw',\n                                height: '2vw',\n                                borderRadius: '2px',\n                                backgroundColor: color,\n                            }} />\n                        </div>\n\n                        {displayColorPicker ? <div style={{\n                            position: 'absolute',\n                            zIndex: '2',\n                        }}>\n                            <div style={{\n                                position: 'fixed',\n                                top: '0px',\n                                right: '0px',\n                                bottom: '0px',\n                                left: '0px',\n                            }} onClick={handleColorPickerClosed} />\n\n                            <SketchPicker color={color} onChangeComplete={changeColor} />\n                        </div> : null}\n                    </Col>\n                </Row>\n            </Form>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={saveChanges}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditParty;","import React, { useEffect, useState } from 'react';\n\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\n\n\nfunction EditRace(props) {\n    const [raceName, setRaceName] = useState(\"Name\");\n    const [quota, setQuota] = useState(\"Droop\");\n\n    useEffect(() => {\n        if (props.race !== undefined) {\n            setRaceName(props.race.race_name)\n\n        }\n    }, [props.race]);\n\n    const handleEditChange = (event) => {\n        setRaceName(event.target.value)\n    }\n\n    const changeQuota = (event) => (setQuota(event.target.value))\n\n\n    const handleClose = () => props.setShow(false);\n\n    const saveChanges = () => {\n        handleClose()\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault()\n            saveChanges()\n        }\n    }\n\n    if (props.show === false || props.race === undefined)\n        return <div />\n\n    return (\n        <Modal size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{\"Editing: \" + raceName}</Modal.Title>\n            </Modal.Header>\n            <Form onKeyPress={onKeyPress}>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Name</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control style={{\n                            width: '32vw'\n                        }}\n                            type=\"text\"\n                            value={raceName}\n                            onChange={handleEditChange} />\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Quota</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control as=\"select\" value={quota} onChange={changeQuota}>\n                            <option value={\"Droop\"}>Droop</option>\n                            <option value={\"Hare\"}>Hare</option>\n                            <option value={\"Hagenbach-Bischoff\"}>Hagenbach-Bischoff</option>\n                        </Form.Control>\n                    </Col>\n                </Row>\n            </Form>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={saveChanges}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditRace;","import React, { useState } from 'react';\n\nimport { Button, Form, Col, Row, ButtonGroup } from 'react-bootstrap';\nimport EditCandidate from './EditCandidate';\nimport EditParty from './EditParty';\nimport EditRace from './EditRace';\n\nfunction ElectionSettings(props) {\n    const resetRace = () => {\n        props.running()\n        props.race.reset_race()\n    }\n\n    const [showCandidate, setShowCandidate] = useState(false);\n    const [showRace, setShowRace] = useState(false);\n    const [showParty, setShowParty] = useState(false);\n    const [party, setParty] = useState(undefined);\n    const [candidate, setCandidate] = useState(undefined);\n\n    let candidates = [...props.race.candidates, ...props.race.inactive_candidates]\n\n    let showForCandidate = (candidate) => {\n        setCandidate(candidate)\n        setShowCandidate(true);\n    }\n\n    let showForParty = (party) => {\n        setParty(party)\n        setShowParty(true);\n    }\n\n    let showForRace = () => {\n        setShowRace(true);\n    }\n\n    let candidateBoxes = candidates.map((candidate, index) => {\n        return (\n            <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n                <Button disabled>{candidate.candidate_name}</Button>\n                <Button onClick={() => (showForCandidate(candidate))}> Edit </Button>\n            </ButtonGroup>\n        )\n    })\n\n    let partyBoxes = props.parties.map((party, index) => {\n        return (\n            <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n                <Button disabled>{party.party_name}</Button>\n                <Button onClick={() => (showForParty(party))}> Edit </Button>\n            </ButtonGroup>\n        )\n    })\n\n    let raceBox =\n        <ButtonGroup style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n            <Button disabled>{props.race.race_name}</Button>\n            <Button onClick={() => (showForRace())}> Edit </Button>\n        </ButtonGroup>\n\n    return (\n        <div>\n            <Form>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Label>Race</Form.Label>\n                        </Col>\n                        <Col style={{\n                            display: 'flex',\n                            flexDirection: \"row\",\n                            flexWrap: 'wrap',\n                            justifyContent: \"flex-start\",\n                            alignItems: \"flex-start\"\n                        }}>\n                            {raceBox}\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Label>Parties</Form.Label>\n                        </Col>\n                        <Col style={{\n                            display: 'flex',\n                            flexDirection: \"row\",\n                            flexWrap: 'wrap',\n                            justifyContent: \"flex-start\",\n                            alignItems: \"flex-start\"\n                        }}>\n                            {partyBoxes}\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Label>Candidates</Form.Label>\n                        </Col>\n                        <Col style={{\n                            display: 'flex',\n                            flexDirection: \"row\",\n                            flexWrap: 'wrap',\n                            justifyContent: \"flex-start\",\n                            alignItems: \"flex-start\"\n                        }}>\n                            {candidateBoxes}\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Button variant=\"primary\" style={{ margin: \"5%\" }}>\n                                Reset to Default\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Button onClick={resetRace} variant=\"primary\" style={{ margin: \"5%\" }}>\n                                {'Reset Race'}\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Button variant=\"primary\" style={{ margin: \"5%\" }}>\n                                Save Changes\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form.Group>\n            </Form>\n\n            <EditRace race={props.race} show={showRace} setShow={setShowRace} />\n\n            <EditParty party={party} show={showParty} savePartyChanges={props.savePartyChanges} setShow={setShowParty} />\n\n            <EditCandidate candidate={candidate} saveCandidateChanges={props.saveCandidateChanges} parties={props.parties} show={showCandidate} setShow={setShowCandidate} />\n        </div>\n    )\n}\n\nexport default ElectionSettings;","import { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}\n\nexport default useWindowSize;","import React, { useEffect, useState } from 'react';\n\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { SketchPicker } from 'react-color';\nimport { exportComponentAsPNG } from 'react-component-export-image';\n\nimport { Form, Row, Col, ButtonGroup, Button, Modal } from 'react-bootstrap';\nimport { find_candidate_by_id } from '../../Data_Models/Util';\nimport useWindowSize from '../Hooks/useWindowSize';\n\nclass GroupSettings {\n    constructor(groupNumber) {\n        this.number = groupNumber\n        this.title = \"Group \" + groupNumber\n        this.candidates = []\n        this.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    }\n}\n\nfunction CustomGraph(props) {\n    const getPercentage = bar => {\n        return Math.round((bar.value / props.totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = (bar) => {\n        for (const group of props.groups) {\n            if (group.title === bar.id) {\n                return group.color\n            }\n        }\n        return \"#fff\"\n    }\n\n    if (props.totalAmount === 0)\n        return <div />\n\n    return (\n        <ResponsivePieCanvas\n            data={props.data}\n            margin={{ top: 40, right: 100, bottom: 40, left: 80 }}\n            innerRadius={0}\n            padAngle={0.7}\n            cornerRadius={3}\n            colors={getColor}\n            borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n            enableRadialLabels={false}\n            sliceLabel={getPercentage}\n            slicesLabelsSkipAngle={20}\n            slicesLabelsTextColor=\"#000000\"\n            legends={[\n                {\n                    text: {\n                        fontSize: 20,\n                        fontWeight: 900,\n                        color: \"#000000\"\n                    },\n                    anchor: 'top-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 0,\n                    translateY: 0,\n                    itemsSpacing: 10,\n                    itemWidth: 60,\n                    itemHeight: 14,\n                    itemTextColor: '#999',\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 1,\n                    symbolSize: 20,\n                    symbolShape: 'square'\n                }\n            ]}\n        />\n    );\n}\n\nfunction CustomFirstPie(props) {\n    const size = useWindowSize();\n    const [color, setColor] = useState(\"#fff\");\n    const [title, setTitle] = useState(\"Title\")\n    const [selectedCandidates, setSelectedCandidates] = useState([])\n    const [editTitle, setEditTitle] = useState(\"Title\")\n    const [show, setShow] = useState(false);\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    const imageRef = React.createRef();\n    const [groups, setGroups] = useState([]);\n    const [activeGroupNumber, setActiveGroupNumber] = useState(-1)\n\n    useEffect(() => {\n        if (groups.length === 0 || activeGroupNumber === -1)\n            return\n        setTitle(groups[activeGroupNumber].title)\n        setEditTitle(groups[activeGroupNumber].title)\n        setColor(groups[activeGroupNumber].color)\n        let candidates = []\n        for (const candidate of groups[activeGroupNumber].candidates) {\n            candidates.push(candidate.candidate_id)\n        }\n        setSelectedCandidates(candidates)\n    }, [activeGroupNumber, groups])\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n\n    const handleClose = (saveChanges) => {\n        setShow(false);\n        if (saveChanges) {\n            if (groups.length === 0)\n                return\n            groups[activeGroupNumber].title = editTitle;\n            groups[activeGroupNumber].color = color;\n            let candidates = []\n            for (const candidate of selectedCandidates) {\n                candidates.push(find_candidate_by_id(props.race.candidates, candidate))\n            }\n            groups[activeGroupNumber].candidates = candidates\n        }\n    }\n\n    const handleShow = (groupNumber) => {\n        setActiveGroupNumber(groupNumber)\n        setShow(true);\n    }\n\n    const handleEditChange = (event) => {\n        setEditTitle(event.target.value)\n    }\n\n    const handleDelete = () => {\n        const index = groups.indexOf(groups[activeGroupNumber])\n        if (index > -1) {\n            let copy = [].concat(groups);\n            copy.splice(index, 1)\n            setGroups(copy)\n        }\n        setShow(false)\n        setActiveGroupNumber(-1)\n    }\n\n    const handleSelectedChange = (event) => {\n        setSelectedCandidates(Array.from(event.target.selectedOptions, option => option.value))\n    }\n\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n\n    const handleExportClicked = () => {\n        if (totalAmount > 0)\n            exportComponentAsPNG(imageRef)\n    }\n\n    const candidates = props.race.candidates\n\n    const addGroup = () => {\n        setGroups(groups.concat(new GroupSettings(groups.length)))\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault();\n            handleClose(true)\n        }\n    }\n\n    let group_buttons = groups.map((item, index) => (\n        <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n            <Button disabled>{item.title}</Button>\n            <Button onClick={() => (handleShow(groups.indexOf(item)))}> Edit </Button>\n        </ButtonGroup>\n    ));\n\n    let candidate_options = candidates.map((item, index) => {\n        if (groups.length === 0 || activeGroupNumber === -1)\n            return <div key={index} />\n        return <option key={index} value={item.candidate_id}>{item.candidate_name} </option>\n    });\n\n    let data = []\n\n    let totalAmount = 0;\n    const scores = props.race.first_scores[props.race.first_scores.length - 1]\n\n    for (const group of groups) {\n        let groupScore = 0;\n        for (const candidate of group.candidates) {\n            if (scores !== undefined)\n                groupScore += scores[candidate.candidate_id]\n        }\n        if (groupScore > 0) {\n            data.push({\n                \"id\": group.title,\n                \"label\": group.title,\n                \"value\": groupScore,\n                \"color\": group.color,\n            });\n\n            totalAmount += groupScore;\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <Row>\n                <Col md=\"3\">\n                    <Button style={{}} onClick={addGroup}>Add Group</Button>\n                </Col>\n                <Col style={{ flexDirection: \"row\" }}>\n                    {group_buttons}\n                </Col>\n            </Row>\n            <Row style={{ width: size.width, height: \"50vw\" }}>\n                <div style={{ width: size.width, height: \"50vw\" }} ref={imageRef}>\n                    <CustomGraph style={{ margin: '5%' }} totalAmount={totalAmount} data={data} groups={groups} />\n                </div>\n            </Row>\n            <Row style={{ display: \"flex\", justifyContent: \"flex-end\", alignItems: \"flex-end\" }}>\n                <Button style={{ margin: \"1%\" }} onClick={handleExportClicked}>\n                    Export As PNG\n                </Button>\n            </Row>\n\n            <Modal size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Editing {title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onKeyPress={onKeyPress}>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Group Name</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control style={{\n                                    width: '32vw'\n                                }}\n                                    type=\"text\"\n                                    value={editTitle}\n                                    onChange={handleEditChange} />\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Candidates</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control as=\"select\" value={selectedCandidates}\n                                    onChange={handleSelectedChange} style={{\n                                        width: '32vw'\n                                    }} multiple>\n                                    {candidate_options}\n                                </Form.Control>\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Group Color</Form.Label>\n                            </Col>\n                            <Col>\n                                <div style={{\n                                    padding: '1vw',\n                                    background: '#fff',\n                                    borderRadius: '5px',\n                                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                                    display: 'inline-block',\n                                    cursor: 'pointer',\n                                }}\n                                    onClick={handleColorPickerClicked}>\n                                    <div style={{\n                                        width: '30vw',\n                                        height: '2vw',\n                                        borderRadius: '2px',\n                                        backgroundColor: color,\n                                    }} />\n                                </div>\n                                {displayColorPicker ? <div style={{\n                                    position: 'absolute',\n                                    zIndex: '2',\n                                }}>\n                                    <div style={{\n                                        position: 'fixed',\n                                        top: '0px',\n                                        right: '0px',\n                                        bottom: '0px',\n                                        left: '0px',\n                                    }} onClick={handleColorPickerClosed} />\n                                    <SketchPicker color={color} onChangeComplete={changeColor} />\n                                </div> : null}\n                            </Col>\n                        </Row>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" style={{}} onClick={handleDelete}>\n                        Delete\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => handleClose(false)}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => handleClose(true)}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div >\n    );\n}\n\nexport default CustomFirstPie;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nimport { find_party_by_name } from '../../../../Data_Models/Util';\n\nfunction FirstChoicePie(props) {\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const ballot of race.ballots) {\n            if (ballot.candidates[0].candidate_party.party_name === party.party_name)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(props.parties, item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(props.parties, bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <h1> First Vote Pie by Party </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default FirstChoicePie;\n","import { CandidateState } from \"./Candidate\";\n\nexport class Round {\n    constructor(round_number, quota) {\n        this.round_number = round_number;\n        this.quota = quota;\n        this.state = RoundState.RUNNING;\n\n        this.candidates = []\n\n        this.elected_candidates = []\n        this.active_candidates = []\n        this.start_inactive_candidates = []\n        this.start_active_candidates = []\n        this.eliminated_candidates = []\n\n        this.ballots = { exhausted: 0 }\n        this.ballotsToTransfer = {}\n        this.candidate_ballots = { exhausted: [] }\n        this.candidate_real_scores = {}\n        this.candidate_scores = { exhausted: 0 }\n        this.rankings = {};\n    }\n\n    add_ballot = (ballot, value) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        if (this.ballots[ballot.ballot_id] !== undefined)\n            throw new Error(\"Already added Ballot\");\n\n        let candidate = this.find_next_active_candidate(ballot.candidates);\n        if (candidate !== \"exhausted\") {\n            this.candidate_ballots[candidate.candidate_id].push(ballot);\n            this.candidate_scores[candidate.candidate_id] += value;\n        } else {\n            this.candidate_ballots[candidate].push(ballot);\n            this.candidate_scores[candidate] += value;\n        }\n        this.ballots[ballot.ballot_id] = value;\n    }\n\n    find_next_active_candidate = (candidates) => {\n        for (const candidate of candidates)\n            if (this.active_candidates.includes(candidate))\n                return candidate\n        return \"exhausted\";\n    }\n\n    add_candidate = (candidate, state) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        this.candidates.push(candidate);\n        if (state === CandidateState.ELECTED) {\n            this.elected_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        } else if (state === CandidateState.RUNNING) {\n            this.active_candidates.push(candidate);\n            this.start_active_candidates.push(candidate);\n        } else {\n            this.eliminated_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        }\n\n        this.candidate_ballots[candidate.candidate_id] = [];\n        this.candidate_scores[candidate.candidate_id] = 0;\n    }\n\n    set_elected_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.elected_candidates.push(candidate);\n    }\n\n    set_eliminate_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.eliminated_candidates.push(candidate);\n    }\n\n    candidate_ballot = (candidate) => {\n        if (candidate === null)\n            candidate = \"exhausted\";\n        else if (candidate.candidate_id !== undefined)\n            candidate = candidate.candidate_id;\n\n        let ballots = [];\n        for (const ballot of this.candidate_ballots[candidate]) {\n            ballots.push([ballot, this.ballots[ballot.ballot_id]]);\n        }\n        return ballots;\n    }\n\n    candidate_score = (candidate) => {\n        if (candidate.candidate_id !== undefined)\n            return this.candidate_scores[candidate.candidate_id];\n        return this.candidate_scores[candidate];\n    }\n\n    complete = () => {\n        const isCandidateElected = (candidate_id) => {\n            for (const candidate in this.elected_candidates) {\n                if (candidate_id === this.elected_candidates[candidate].candidate_id) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this.candidate_real_scores = { ...this.candidate_scores }\n        for (const candidate_id in this.candidate_real_scores) {\n            if (this.candidate_real_scores[candidate_id] === 0 && isCandidateElected(candidate_id)) {\n                this.candidate_real_scores[candidate_id] = this.quota;\n            }\n        }\n\n        this.state = RoundState.COMPLETE;\n    }\n}\n\nexport const RoundState = {\n    RUNNING: \"RUNNING\",\n    COMPLETE: \"COMPLETE\"\n};","\nimport { Round, RoundState } from './Round';\nimport { CandidateState } from './Candidate';\n\nexport class Race {\n\n    constructor(race_id, race_name, seats, dropped_candidates = []) {\n        this.race_id = race_id\n        this.race_name = race_name\n        this.seats = Number(seats)\n        this.quota_algorithm = QuotaTypes.DROOP\n\n        this.rounds = [];\n\n        this.state = RaceState.ADDING;\n\n        // Candidates\n        this.candidates = []\n        this.inactive_candidates = dropped_candidates;\n\n        this.ballots = []\n        this.inactive_ballots = []\n\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        this.first_scores = []\n\n        // Planning Candidates\n        this.planned_inactive_candidates = []\n        this.planned_active_candidates = []\n\n        // Set Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n    }\n\n    add_candidate = (candidate, dropped = false) => {\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Candidates While Running\");\n\n        for (const current_candidate of this.inactive_candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n\n\n        if (dropped) {\n            this.inactive_candidates.push(candidate)\n            this.excused[candidate.candidate_id] = [0]\n            return\n        }\n\n        for (const current_candidate of this.candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n    }\n\n    add_ballot = (ballot) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Ballots While Running\");\n\n        if (find_next_active_candidate(ballot.candidates) === null) {\n            this.inactive_ballots.push(ballot)\n            return;\n        }\n        for (let i = 0; i < this.ballots.length; i++)\n            if (this.ballots[i].ballot_id === ballot.ballot_id)\n                return;\n        this.ballots.push(ballot);\n    }\n\n    reset_race = () => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state === RaceState.ADDING)\n            return;\n\n        this.state = RaceState.ADDING;\n        this.rounds = []\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        // Set Candidates Correctely\n        for (const candidate of this.planned_inactive_candidates) {\n            this.inactive_candidates.push(candidate)\n            this.candidates = this.candidates.filter((value) => {\n                return value !== candidate\n            });\n        }\n\n        for (const candidate of this.planned_active_candidates) {\n            this.candidates.push(candidate)\n            this.inactive_candidates = this.inactive_candidates.filter((value) => {\n                return value !== candidate\n            });\n        }\n\n        // Reset Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n        this.first_scores = []\n\n        // Set Candidate States according to candidates\n        for (const candidate of this.candidates) {\n            this.running[candidate.candidate_id] = [0, this.running.length];\n        }\n\n        for (const candidate of this.inactive_candidates) {\n            this.excused[candidate.candidate_id] = [0]\n        }\n\n        // Lastly, Reset the Ballots\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n\n        for (const ballot of this.inactive_ballots) {\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n        console.log(\"Race Reset: \", this.race_name)\n\n    }\n\n    excuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n\n        // Check if Excused Already Excused\n        for (const current_candidate of this.inactive_candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        if (this.state !== RaceState.ADDING) {\n            this.planned_inactive_candidates.push(candidate)\n            return;\n        }\n\n        delete this.elected[candidate.candidate_id];\n        delete this.running[candidate.candidate_id];\n        delete this.transferring[candidate.candidate_id];\n        delete this.transfered[candidate.candidate_id];\n\n        this.candidates = this.candidates.filter((value) => {\n            return value !== candidate\n        });\n\n\n        this.inactive_candidates.push(candidate)\n        this.excused[candidate.candidate_id] = [0]\n\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n    }\n\n    unexcuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n\n        // Check if Already Not Excused\n        for (const current_candidate of this.candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        if (this.state !== RaceState.ADDING) {\n\n            // Check if excused in planned inactive\n            for (const current_candidate of this.planned_inactive_candidates) {\n                if (current_candidate.candidate_id === candidate.candidate_id) {\n                    this.inactive_candidates = this.inactive_candidates.filter((value) => {\n                        return value !== candidate\n                    });\n                    return;\n                }\n            }\n\n            this.planned_active_candidates.push(candidate)\n            return;\n        }\n\n        delete this.excused[candidate.candidate_id];\n        this.inactive_candidates = this.inactive_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n\n        for (const ballot of this.inactive_ballots)\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n    }\n\n    num_candidates = () => {\n        return this.candidates.length;\n    }\n\n    quota = () => {\n        if (this.state === RaceState.ADDING)\n            throw new Error(\"Can't Get Quota While Adding Ballots\");\n        if (this.quota_algorithm === QuotaTypes.DROOP)\n            return Math.floor(this.ballots.length / (this.seats + 1)) + 1;\n        else if (this.quota_algorithm === QuotaTypes.HagenbachBischoff)\n            return this.ballots.length / (this.seats + 1);\n        else if (this.quota_algorithm === QuotaTypes.HARE)\n            return this.ballots.length / this.seats;\n    }\n\n    currentScores = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let scores = [];\n        for (const candidate in this.elected) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.elected[candidate][0],\n            });\n        }\n        for (const candidate in this.running) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.running[candidate][0],\n            });\n        }\n        for (const candidate in this.transferring) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transferring[candidate][0],\n            });\n        }\n        for (const candidate in this.transfered) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transfered[candidate][0],\n            });\n        }\n        for (const candidate in this.inactive_candidates) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: 0,\n            });\n        }\n        return scores;\n    }\n\n    candidateTable = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let quota = 0;\n        if (this.state !== RaceState.ADDING)\n            quota = this.quota();\n\n        let candidateTable = []\n        // Candidate, Status, Position, Score\n\n        for (const candidate in this.elected) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.ELECTED,\n                position: this.elected[candidate][1],\n                score: this.elected[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.running) {\n            if (this.state === RaceState.ADDING) {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: candidateTable.length,\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            } else {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: this.running[candidate][1],\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            }\n        }\n        for (const candidate in this.transferring) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERRING,\n                position: this.transferring[candidate][1],\n                score: this.transferring[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.transfered) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERED,\n                position: this.transfered[candidate][1],\n                score: this.transfered[candidate][0],\n                quota: quota,\n            });\n        }\n\n        for (const candidate in this.excused) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.EXCUSED,\n                position: this.candidates.length,\n                score: 0,\n                quota: quota,\n            });\n        }\n        return candidateTable;\n    }\n\n    start_tabulation = () => {\n        if (this.state === RaceState.ADDING)\n            this.state = RaceState.TABULATING;\n    }\n\n    run_race_step = () => {\n        const begin_race = () => {\n            console.log(\"Beginning Race for\", this.race_name);\n            console.log(\"Total Voters is: \" + this.ballots.length + \" , for \" + this.seats + \" seats.\")\n            console.log(\"Quota is\", this.quota())\n            if (this.ballots.length === 0) {\n                this.state = RaceState.COMPLETE;\n                console.log(\"No Ballots Cast in Race\");\n            }\n            else {\n                let round = new Round(0, this.quota());\n\n                for (let i = 0; i < this.candidates.length; i++) {\n                    round.add_candidate(this.candidates[i], CandidateState.RUNNING);\n                }\n\n\n                for (let i = 0; i < this.ballots.length; i++) {\n                    this.ballots_to_apply.push([this.ballots[i], 1]);\n                }\n                this.rounds.push(round);\n            }\n        }\n\n        const add_round = () => {\n            const find_candidate_by_id = (id) => {\n                for (const candidate of this.candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                for (const candidate of this.inactive_candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                return null;\n            }\n            console.log(\"Starting Round\", this.rounds.length);\n            let round = new Round(this.rounds.length, this.quota());\n            let previousRound = this.rounds[this.rounds.length - 1];\n\n            for (const candidate in this.elected) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.ELECTED);\n            }\n            for (const candidate in this.running) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.RUNNING);\n                for (const ballot of previousRound.candidate_ballot(candidate)) {\n                    round.add_ballot(ballot[0], ballot[1]);\n                }\n            }\n            for (const candidate in this.transferring) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERRING);\n            }\n            for (const candidate in this.transfered) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERED);\n            }\n            for (const candidate in this.excused) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.EXCUSED);\n            }\n\n            for (const ballot of previousRound.candidate_ballot(null)) {\n                round.add_ballot(ballot[0], ballot[1]);\n            }\n\n            this.rounds.push(round);\n        }\n\n        const elect_candidate = (candidate, score, currentRound) => {\n            console.log(\"Electing Candidate: \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_elected_candidate(candidate);\n\n            this.elected[candidate.candidate_id] = [score, Object.keys(this.elected).length];\n            delete this.running[candidate.candidate_id];\n\n            const surplus = score - this.quota();\n\n            let transfer_value = 1;\n            if (surplus > 0) {\n                transfer_value = surplus / score;\n            }\n\n            for (const ballot of currentRound.candidate_ballot(candidate)) {\n                this.ballots_to_apply.push([ballot[0], ballot[1] * transfer_value]);\n            }\n        }\n\n        const transfer_candidate = (candidate, score, currentRound) => {\n            console.log(\"Transferring Candidate \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_eliminate_candidate(candidate);\n\n            this.transferring[candidate.candidate_id] = [score, Object.keys(this.elected).length + Object.keys(this.running).length - 1];\n            delete this.running[candidate.candidate_id];\n\n            for (const ballot of currentRound.candidate_ballot(candidate))\n                this.ballots_to_apply.push(ballot)\n        }\n\n        const complete_round = (currentRound) => {\n            console.log(\"Completed Round\", currentRound.round_number);\n            currentRound.complete();\n\n            if (currentRound.active_candidates.length === 0) {\n                console.log(\"Race Complete\");\n                for (const candidate in this.transferring) {\n                    this.transfered[candidate] = this.transferring[candidate];\n                    delete this.transferring[candidate]\n                }\n                console.log(this.rounds);\n                this.state = RaceState.COMPLETE;\n            }\n        }\n\n        if (this.state === RaceState.COMPLETE)\n            return;\n        this.state = RaceState.TABULATING;\n\n        if (this.rounds.length === 0) {\n            begin_race();\n            return;\n        }\n\n        let currentRound = this.rounds[this.rounds.length - 1];\n        if (currentRound.state === RoundState.COMPLETE) {\n            add_round();\n            return;\n        }\n\n        if (this.ballots_to_apply.length > 0) {\n            let ballot = this.ballots_to_apply.shift();\n            currentRound.add_ballot(ballot[0], ballot[1]);\n\n            if (this.rounds.length === 1) {\n                const find_next_active_candidate = (candidates) => {\n                    for (const candidate of candidates)\n                        if (this.candidates.includes(candidate))\n                            return candidate\n                    return null;\n                }\n\n                for (let i = 0; i < ballot[0].candidates.length; i++) {\n                    const candidate = ballot[0].candidates[i];\n                    if (this.candidate_ballot_rankings[candidate] === undefined)\n                        this.candidate_ballot_rankings[candidate] = [];\n                    while (this.candidate_ballot_rankings[candidate].length < i + 1)\n                        this.candidate_ballot_rankings[candidate].push(0);\n                    this.candidate_ballot_rankings[candidate][i] += 1\n                }\n\n                let first_round_score = {};\n                if (this.first_scores.length !== 0) {\n                    first_round_score = { ...this.first_scores[this.first_scores.length - 1] };\n                }\n                let candidate = find_next_active_candidate(ballot[0].candidates)\n                if (candidate !== null) {\n                    if (candidate.candidate_id in first_round_score)\n                        first_round_score[candidate.candidate_id] += 1;\n                    else\n                        first_round_score[candidate.candidate_id] = 1;\n                    this.first_scores.push(first_round_score);\n                }\n            }\n\n            let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n                if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                    return -1;\n                } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                    return 1;\n                }\n                return 0;\n            });\n\n            for (let i = 0; i < activeCandidates.length; i++) {\n                this.running[activeCandidates[i].candidate_id] = [currentRound.candidate_score(activeCandidates[i]), Object.keys(this.elected).length + i];\n            }\n\n            return;\n        }\n\n        for (const candidate in this.transferring) {\n            this.transfered[candidate] = this.transferring[candidate];\n            delete this.transferring[candidate]\n        }\n\n        let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n            if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                return -1;\n            } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let roundElected = [];\n        let maxElected = this.seats - Object.keys(this.elected).length;\n\n        if (activeCandidates.length <= maxElected) {\n            for (const candidate of activeCandidates) {\n                if (currentRound.elected_candidates) {\n                    roundElected.push(candidate);\n                }\n            }\n        } else {\n            for (const candidate of activeCandidates) {\n                if (currentRound.candidate_score(candidate) >= this.quota()) {\n                    roundElected.push(candidate);\n                }\n            }\n        }\n\n        for (const candidate of roundElected) {\n            elect_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n        }\n\n        let roundTransfer = [];\n        if (Object.keys(this.elected).length === this.seats) {\n            for (const candidate of activeCandidates.reverse()) {\n                roundTransfer.push(candidate);\n            }\n        } else if (roundElected.length === 0) {\n            roundTransfer.push(activeCandidates[activeCandidates.length - 1]);\n        }\n\n        for (const candidate of roundTransfer) {\n            if (!currentRound.elected_candidates.includes(candidate)) {\n                transfer_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n            }\n        }\n\n        complete_round(currentRound);\n    }\n};\n\nexport const QuotaTypes = {\n    DROOP: \"DROOP\",\n    HARE: \"HARE\",\n    HagenbachBischoff: \"Hagenbach-Bischoff\"\n}\n\nexport const RaceState = {\n    ADDING: \"ADDING\",\n    TABULATING: \"TABULATING\",\n    COMPLETE: \"COMPLETE\"\n};","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { RaceState } from '../../../../Data_Models/Race';\n\nfunction PartyPercentage(props) {\n    const find_candidate_by_id = (race, id) => {\n        for (const candidate of race.candidates)\n            if (candidate.candidate_id === id)\n                return candidate;\n        return null;\n    }\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const candidate in race.elected) {\n            if (find_candidate_by_id(race, candidate).candidate_party === party)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    // Wait until a candidate is actually elected to display\n    if (Object.entries(props.race.elected).length === 0 && props.race.elected.constructor === Object)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidates Elected By Party </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n\n    const get_ranked_choices = (race) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item]\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n\n\n    return (\n        <div style={props.style}>\n            <h1> Number of Candidates Ranked </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar'\n\nfunction CandidatesRanked(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            if (ballot.candidates[0].candidate_party.party_name !== party.party_name)\n                continue;\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = {};\n    let keys = []\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n        keys.push(party.party_name);\n    }\n\n    let data = [];\n\n    for (let i = 1; i < maxChoices + 1; i++) {\n        let data_to_add = { index: i };\n        for (const item in choices) {\n            if (i in choices[item]) {\n                data_to_add[item] = choices[item][i];\n                data_to_add[item + \"Color\"] = choices[item][i];\n            }\n        }\n        data.push(data_to_add);\n    }\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <h1> Number of Candidates Ranked </h1>\n            <ResponsiveBarCanvas\n                data={data}\n                keys={keys}\n                indexBy=\"index\"\n                margin={{ top: 40, right: 40, bottom: 40, left: 60 }}\n                pixelRatio={2}\n                padding={0.05}\n                innerPadding={0}\n                minValue=\"auto\"\n                maxValue=\"auto\"\n                groupMode=\"stacked\"\n                layout=\"vertical\"\n                reverse={false}\n                colors={getColor}\n                colorBy=\"id\"\n                borderWidth={0}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '# of Candidates Ranked',\n                    legendPosition: 'middle',\n                    legendOffset: 30\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '# of Voters',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                enableGridX={false}\n                enableGridY={true}\n                enableLabel={false}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                isInteractive={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\nimport { RaceState } from '../../../../Data_Models/Race';\n\n\nfunction PartyPercentage(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            for (let i = 0; i < ballot.candidates.length; i++) {\n                maxchoices = Math.max(i, maxchoices);\n                if (ballot.candidates[i].candidate_party.party_name === party.party_name)\n                    if (i in ranked_choices)\n                        ranked_choices[i] += 1;\n                    else\n                        ranked_choices[i] = 1;\n            }\n        }\n        return ranked_choices;\n    }\n    let maxchoices = 0;\n    let choices = {};\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    for (const item in choices) {\n        let datapoints = [];\n        for (let i = 1; i < maxchoices + 1; i++) {\n            if (i in choices[item])\n                datapoints.push({ x: i, y: choices[item][i - 1] })\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { RaceState } from '../../../../Data_Models/Race';\n\nfunction CandidatesRanked(props) {\n\n    const get_first_elected = (ballot, elected) => {\n        for (let i = 0; i < ballot.candidates.length; i++) {\n            for (const candidate in elected) {\n                if (candidate === ballot.candidates[i].candidate_id) {\n                    return i + 1\n                }\n            }\n        }\n        return \"Exhausted\"\n    }\n\n    const get_ranked_choices = (race) => {\n        let ranked_choices = {};\n        for (const ballot of race.ballots) {\n            maxChoices = Math.max(ballot.candidates.length, maxChoices);\n        }\n\n        for (let i = 1; i < maxChoices + 1; i++) {\n            ranked_choices[i] = 0\n        }\n        ranked_choices[\"Exhausted\"] = 0\n\n        for (const ballot of race.ballots) {\n            ranked_choices[get_first_elected(ballot, race.elected)] += 1;\n        }\n\n        return ranked_choices\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        if (choices[item] > 0) {\n            data.push({\n                \"id\": item,\n                \"label\": item,\n                \"value\": choices[item]\n            });\n            totalAmount += choices[item];\n        }\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    if (Object.entries(props.race.elected).length === 0 && props.race.elected.constructor === Object)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Voter Satisfaction </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLineCanvas } from '@nivo/line'\nimport { RaceState } from '../../../../Data_Models/Race';\n\nfunction VoteOverTime(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const find_candidate_by_id = (candidate_id) => {\n        for (let i = 0; i < props.race.candidates.length; i++)\n            if (String(props.race.candidates[i].candidate_id) === candidate_id)\n                return props.race.candidates[i];\n        return null;\n    };\n\n    let choices_over_time = {};\n    for (const party of props.parties) {\n        choices_over_time[party.party_name] = [];\n    }\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 100);\n\n    for (let i = 0; i < props.race.first_scores.length; i += 1) {\n        const score_chart = props.race.first_scores[i];\n\n        let choices = {}\n        for (const party of props.parties) {\n            choices[party.party_name] = 0;\n        }\n\n        for (const candidate_id in score_chart) {\n            const candidate = find_candidate_by_id(candidate_id);\n            choices[candidate.candidate_party.party_name] += score_chart[candidate_id];\n        }\n\n        for (const party of props.parties) {\n            choices_over_time[party.party_name] = [...choices_over_time[party.party_name], choices[party.party_name]];\n        }\n    }\n\n    let data = [];\n    for (const item in choices_over_time) {\n        let datapoints = [];\n        for (let i = 0; i < choices_over_time[item].length; i++) {\n            if (choices_over_time[item][i] !== 0) {\n                datapoints.push({ x: (i * 1), y: ((choices_over_time[item][i]) / ((i + 1) * 1) * 100) })\n            }\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Party Vote Over Time </h1>\n            <ResponsiveLineCanvas\n                data={data}\n                margin={{ top: 50, right: 160, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear' }}\n                xFormat={',.2r'}\n                yScale={{ type: 'linear', stacked: false, min: 0, max: 100 }}\n                yFormat={',.2r'}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    tickValues: 5,\n                    legend: 'Votes',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Percentage',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                enableGridX={false}\n                colors={getColor}\n                lineWidth={1}\n                enablePoints={false}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTime;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\nimport { RaceState } from '../../../../Data_Models/Race';\n\n\nfunction VoteOverTimeBump(props) {\n    const indexOfMax = (arr) => {\n        if (arr.length === 0) {\n            return -1;\n        }\n        var max = arr[0];\n        var maxIndex = 0;\n        for (var i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                maxIndex = i;\n                max = arr[i];\n            }\n        }\n\n        return maxIndex;\n    }\n\n\n    let choices_over_time = [];\n\n    if (props.race.first_scores.length <= 1)\n        return (<div></div>);\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 50);\n\n    for (let i = 0; i < props.race.first_scores.length; i += increment) {\n        const score_chart = props.race.first_scores[i]\n\n        let candidate_positions = {};\n        let candidates = []\n        let scores = []\n        for (const candidate of props.race.candidates) {\n            candidates.push(candidate);\n            if (candidate.candidate_id in score_chart)\n                scores.push(score_chart[candidate.candidate_id]);\n            else\n                scores.push(0);\n        }\n\n        let position = 1;\n        while (scores.length > 0) {\n            let i = indexOfMax(scores);\n            scores.splice(i, 1);\n            candidate_positions[candidates[i].candidate_id] = position;\n            candidates.splice(i, 1);\n            position++;\n        }\n        choices_over_time.push(candidate_positions);\n    }\n\n\n    let data = [];\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (let i = 0; i < choices_over_time.length; i++) {\n            datapoint.push({ x: (i + 1) * increment, y: choices_over_time[i][candidate.candidate_id] });\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n    const getCandidateByName = (name) => {\n        for (const candidate of props.race.candidates) {\n            if (candidate.candidate_name === name)\n                return candidate;\n        }\n        return null;\n    }\n\n    const getColor = (bar) => {\n        return getCandidateByName(bar.id).candidate_color\n    }\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidate Rank Over Time </h1>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={getColor}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 90,\n                    tickValues: 5,\n                    format: \".2s\",\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTimeBump;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\nimport { RaceState } from '../../../../Data_Models/Race';\n\n\nfunction RoundCandidateBump(props) {\n\n    if (props.race.rounds.length <= 1)\n        return (<div></div>);\n\n    let data = []\n\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (const round of props.race.rounds) {\n            if (round.elected_candidates.includes(candidate)) {\n                datapoint.push({ x: round.round_number + 1, y: props.race.elected[candidate.candidate_id][1] + 1 });\n            } else if (round.eliminated_candidates.includes(candidate)) {\n                if (candidate.candidate_id in props.race.transferring)\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transferring[candidate.candidate_id][1] + 1 });\n                else\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transfered[candidate.candidate_id][1] + 1 });\n            } else {\n                let active_candidates = round.active_candidates.sort((x, y) => {\n                    if (round.candidate_score(x) > round.candidate_score(y)) {\n                        return -1;\n                    } else if (round.candidate_score(y) > round.candidate_score(x)) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                datapoint.push({ x: round.round_number + 1, y: active_candidates.indexOf(candidate) + round.elected_candidates.length + 1 });\n            }\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n    const getCandidateByName = (name) => {\n        for (const candidate of props.race.candidates) {\n            if (candidate.candidate_name === name)\n                return candidate;\n        }\n        return null;\n    }\n\n    const getColor = (bar) => {\n        return getCandidateByName(bar.id).candidate_color\n    }\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidate Rank By Round </h1>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={getColor}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                pointColor={{ theme: 'background' }}\n                pointBorderWidth={3}\n                activePointBorderWidth={3}\n                pointBorderColor={{ from: 'serie.color' }}\n                axisTop={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: -36\n                }}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default RoundCandidateBump;\n","import React from 'react';\n\nimport FirstChoicePie from './ChartComponents/FirstChoicePie';\nimport ElectedCandidatesPie from './ChartComponents/ElectedCandidatesPie';\nimport CandidatesRankedPie from './ChartComponents/CandidatesRankedPie';\nimport CandidatesRanked from './ChartComponents/CandidatesRanked';\nimport PartyPercentage from './ChartComponents/PartyPercentage';\nimport EventualWinner from './ChartComponents/EventualWinner';\nimport VoteOverTime from './ChartComponents/VoteOverTime';\nimport VoteOverTimeBump from './ChartComponents/VoteOverTimeBump';\nimport RoundCandidateBump from './ChartComponents/RoundCandidateBump';\n\n\nfunction ChartPage(props) {\n    let chartStyle = {\n        alignSelf: 'center', width: '50%', height: '30vw', margin: '0 0% 5% 0'\n    }\n\n    return (\n        <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap', width: '100%' }}>\n            <FirstChoicePie race={props.race} parties={props.parties} style={chartStyle} />\n            <ElectedCandidatesPie race={props.race} parties={props.parties} style={chartStyle} />\n            <CandidatesRanked race={props.race} parties={props.parties} style={chartStyle} />\n            <CandidatesRankedPie race={props.race} parties={props.parties} style={chartStyle} />\n            <PartyPercentage race={props.race} parties={props.parties} style={chartStyle} />\n            <VoteOverTime race={props.race} parties={props.parties} style={chartStyle} />\n            <VoteOverTimeBump race={props.race} parties={props.parties} style={chartStyle} />\n            <EventualWinner race={props.race} parties={props.parties} style={chartStyle} />\n            <RoundCandidateBump race={props.race} parties={props.parties} style={chartStyle} />\n        </div >\n    );\n}\n\nexport default ChartPage","\nexport class Voter {\n    constructor(voter_id) {\n        this.voter_id = voter_id;\n\n        // Format\n        // {id: Ballot}\n        this.races = {};\n    }\n\n    participating_races = () => {\n        return Object.keys(this.races);\n    }\n\n    participating_in_race = (race_id) => {\n        return race_id in this.races;\n    }\n\n    get_ballot_for_race = (race_id) => {\n        if (race_id in this.races) {\n            if (this.races[race_id].length === 1)\n                return this.races[race_id][0]\n            return this.races[race_id];\n        }\n        return null;\n    }\n\n    add_ballot = (race_id, ballot) => {\n        if (ballot.candidates.length > 0) {\n            if (race_id in this.races) {\n                this.races[race_id] = [...this.races[race_id], ballot]\n            } else {\n                this.races[race_id] = [ballot];\n            }\n        }\n    }\n}","\nexport class Ballot {\n    constructor(ballot_id, candidates) {\n        this.ballot_id = ballot_id;\n        this.candidates = candidates;\n    }\n}","\nexport class Party {\n    constructor(party_id, party_name, party_color) {\n        this.party_id = party_id;\n        this.party_name = party_name;\n\n        if (!this.isValidColor(party_color)) {\n            party_color = \"#\" + party_color\n            if (!this.isValidColor(party_color)) {\n                console.log(\"Error Color Isn't Valid\", party_color)\n                party_color = \"#FFFFFF\"\n            }\n        }\n        this.party_color = party_color;\n    }\n\n    isValidColor = (color) => {\n        var s = new Option().style;\n        s.color = color;\n        return s.color !== '';\n    }\n}","import React from 'react';\n\nimport { ResponsiveSankey } from '@nivo/sankey'\n\nfunction Sankey(props) {\n\n    const GenerateData = (race) => {\n        const find_candidate_by_id = (candidate_id) => {\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n            return null;\n        };\n\n        const find_next_active_candidate = (candidates, active_candidates) => {\n            for (const candidate in candidates) {\n                for (const active_candidate in active_candidates) {\n                    if (candidates[candidate].candidate_id === active_candidates[active_candidate].candidate_id) {\n                        return candidates[candidate];\n                    }\n                }\n            }\n            return \"exhausted\";\n        }\n\n        const prev_round = (round) => {\n            return race.rounds[round.round_number - 1];\n        }\n\n        let data = { nodes: [{ id: \"Total Votes\", name: \"Total Votes\", color: \"#000000\" }, { id: \"Elected\", name: \"Elected\", color: \"#01A039\" }, { id: \"Exhausted\", name: \"Exhausted\", color: \"#FF0000\" }], links: [] }\n        for (const round_number in race.rounds) {\n            const round = race.rounds[round_number];\n            for (const candidate of round.start_active_candidates) {\n                data[\"nodes\"].push({ id: candidate.candidate_name + \" \" + round_number, name: candidate.candidate_name, color: candidate.candidate_party.party_color });\n            }\n            if (round.round_number === 0) {\n                // First Round so Count Vote Totals\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: \"Total Votes\", target: candidate.candidate_name + \" \" + round.round_number, value: round.candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n            } else {\n                // First add links from prior rounds\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: candidate.candidate_name + \" \" + round.round_number, value: prev_round(round).candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    // Check if elected this round and add link if elected\n\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n\n                // Then add links from eliminated or elected candidates\n                for (const candidate_id in prev_round(round).ballotsToTransfer) {\n                    const candidate = find_candidate_by_id(candidate_id);\n\n                    // Find candidates that it will transfer to\n                    let transfer_candidates_ballot = {};\n\n                    let candidate_ballots = prev_round(round).ballotsToTransfer[candidate_id];\n                    for (const ballot in candidate_ballots) {\n                        const next_candidate = find_next_active_candidate(candidate_ballots[ballot].candidates, round.start_active_candidates);\n                        if (next_candidate !== \"exhausted\") {\n                            if (next_candidate.candidate_id in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate.candidate_id].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate.candidate_id] = [candidate_ballots[ballot]];\n                        } else {\n                            if (next_candidate in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate] = [candidate_ballots[ballot]];\n                        }\n                    }\n\n\n                    for (const transfer_candidate_id in transfer_candidates_ballot) {\n                        if (transfer_candidate_id !== \"exhausted\") {\n                            const transfer_candidate = find_candidate_by_id(transfer_candidate_id);\n\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: transfer_candidate.candidate_name + \" \" + round.round_number, value: value };\n                            data['links'].push(link);\n                        }\n                        else {\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: \"Exhausted\", value: value };\n                            data['links'].push(link);\n                        }\n                    }\n                }\n            }\n            if (round.round_number === race.rounds.length - 1) {\n                for (const candidate of round.start_active_candidates) {\n                    if (round.elected_candidates.includes(candidate)) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                    else {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Exhausted\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                }\n            }\n        }\n        return data;\n    }\n\n    if (props.race.rounds.length === 0)\n        return (<h1>Loading</h1>)\n\n\n    const data = GenerateData(props.race);\n\n    const getColor = (bar) => {\n        return bar.color\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsiveSankey\n                data={data}\n                margin={{ top: 100, right: 40, bottom: 100, left: 40 }}\n                layout=\"vertical\"\n                align=\"justify\"\n                sort=\"ascending\"\n                colors={getColor}\n                nodeTooltip={node => <span> {node.name}: {Math.round(node.value)}</span>}\n                nodeOpacity={1}\n                nodeThickness={10}\n                nodeInnerPadding={3}\n                nodeSpacing={10}\n                nodeBorderWidth={0}\n                nodeBorderColor={{ from: 'color', modifiers: [['darker', 0.8]] }}\n                linkOpacity={0.4}\n                linkHoverOpacity={0.8}\n                linkHoverOthersOpacity={0.1}\n                enableLinkGradient={true}\n                enableLabels={true}\n                label={node => `${node.name}`}\n                labelPosition=\"outside\"\n                labelOrientation=\"vertical\"\n                labelPadding={16}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default Sankey;","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveHeatMapCanvas } from '@nivo/heatmap'\n\nfunction HeatMap(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [showPercent, setShowPercent] = useState(true);\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let heatData = { candidate: candidate.candidate_name };\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            if (!showPercent)\n                heatData[other_candidate.candidate_name] = sum;\n            else\n                heatData[other_candidate.candidate_name] = Math.round((sum / ballots.length) * 100);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(heatData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveHeatMapCanvas\n                    data={data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    tooltipFormat={\".0%\"}\n                    margin={{ top: 100, right: 60, bottom: 60, left: 60 }}\n                    forceSquare={true}\n                    axisTop={{ orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -90, legend: '', legendOffset: 36 }}\n                    axisRight={null}\n                    axisBottom={null}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    cellOpacity={1}\n                    cellBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.8]] }}\n                    defs={[\n                        {\n                            id: 'lines',\n                            type: 'patternLines',\n                            background: 'inherit',\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            rotation: -45,\n                            lineWidth: 4,\n                            spacing: 7\n                        }\n                    ]}\n                    fill={[{ id: 'lines' }]}\n                    animate={true}\n                    motionStiffness={80}\n                    motionDamping={9}\n                    hoverTarget=\"cell\"\n                    cellHoverOthersOpacity={0.25}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default HeatMap;\n","import React, { useState } from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar';\n\nimport { RaceState } from '../../../../Data_Models/Race';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n\nfunction ElectionBar(props) {\n    const get_round_data = (round, active_candidates) => {\n        let round_data = {};\n        for (let i = 0; i < active_candidates.length; i++) {\n            round_data[active_candidates[i].candidate_id] = { position: i, score: round.candidate_score(active_candidates[i]) }\n        }\n        return round_data;\n    }\n\n    const get_candidate_position = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.position;\n            }\n        }\n        return 0;\n    }\n\n    const get_max_score = () => {\n        let max_score = quota;\n        for (const candidate_table of candidateTable) {\n            max_score = Math.max(candidate_table.score, max_score);\n        }\n        return max_score\n    }\n\n    const get_candidate_by_position = (position) => {\n        for (const candidate of props.race.candidates) {\n            if (get_candidate_position(candidate) === position) {\n                return candidate;\n            }\n        }\n        return 0;\n    }\n\n    const final_candidate_score = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.score;\n            }\n        }\n        return 0;\n    }\n\n    const [round, setRound] = useState(1);\n    const candidateTable = props.race.candidateTable();\n\n    if (props.race.rounds === 0 || props.race.state === RaceState.ADDING)\n        return <h1> Loading... </h1>\n\n    let quota = props.race.quota();\n\n    let data_active_candidates = [];\n    // Get Candidates to Display\n    let round_active_candidates = props.race.rounds[round - 1].active_candidates;\n    for (let i = 0; i < round; i++) {\n        data_active_candidates.push(get_round_data(props.race.rounds[i],\n            round_active_candidates));\n    }\n\n    let keys = [\"elected\", \"transferred\"]\n    let chart_data = [];\n\n    for (let i = 0; i < props.race.rounds[round - 1].candidates.length; i++) {\n        const candidate = get_candidate_by_position(i);\n        if (round_active_candidates.includes(candidate)) {\n            let data = { candidate: candidate.candidate_name };\n            for (let i = 0; i < round; i++) {\n                let score = data_active_candidates[i][candidate.candidate_id].score;\n                if (i !== 0) {\n                    score -= data_active_candidates[i - 1][candidate.candidate_id].score;\n                }\n                data[\"Round \" + (i + 1)] = score;\n                if (!keys.includes(\"Round \" + (i + 1))) {\n                    keys.push(\"Round \" + (i + 1));\n                }\n            }\n            chart_data.push(data);\n        } else if (props.race.rounds[round - 1].elected_candidates.includes(candidate)) {\n            chart_data.push({ candidate: candidate.candidate_name, elected: props.race.rounds[round - 1].candidate_real_scores[candidate.candidate_id] });\n        } else {\n            chart_data.push({ candidate: candidate.candidate_name, transferred: final_candidate_score(candidate) });\n        }\n    }\n    return (\n        <div style={{ width: '100%', height: '50vw' }}>\n            <div style={{ width: '80%' }}>\n                <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'black', textAlign: 'center', padding: '5% 0 0 0' }}>\n                    Round\n                </label>\n                <div style={{ margin: '0% 5% 0% 5%' }}>\n                    <RangeSlider\n                        min={1}\n                        max={props.race.rounds.length}\n                        step={1}\n                        value={round}\n                        variant=\"secondary\"\n                        onChange={changeEvent => setRound(changeEvent.target.value)}\n                    />\n                </div>\n            </div>\n            <div style={{ width: '100%', height: '50vw' }}>\n                <ResponsiveBarCanvas\n                    data={chart_data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    margin={{ top: 40, right: 40, bottom: 200, left: 60 }}\n                    maxValue={get_max_score()}\n                    pixelRatio={2}\n                    padding={0.05}\n                    innerPadding={0}\n                    groupMode=\"stacked\"\n                    layout=\"vertical\"\n                    reverse={false}\n                    colors={{ scheme: 'nivo' }}\n                    colorBy=\"id\"\n                    borderWidth={0}\n                    borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    axisBottom={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: -60,\n                    }}\n                    axisLeft={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Score',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    enableGridX={false}\n                    enableGridY={true}\n                    enableLabel={false}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    isInteractive={true}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ElectionBar;\n","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveChordCanvas } from '@nivo/chord'\n\nfunction Chord(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let chordData = [];\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            chordData.push(sum);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(chordData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <div>\n                <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                    {yButtons}\n                </DropdownButton>\n\n                <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                    {xButtons}\n                </DropdownButton>\n            </div>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveChordCanvas\n                    matrix={data}\n                    keys={keys}\n                    margin={{ top: 60, right: 200, bottom: 60, left: 60 }}\n                    valueFormat=\".2f\"\n                    pixelRatio={2}\n                    padAngle={0.006}\n                    innerRadiusRatio={0.86}\n                    innerRadiusOffset={0}\n                    arcOpacity={1}\n                    arcBorderWidth={1}\n                    arcBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    ribbonOpacity={0.5}\n                    ribbonBorderWidth={0}\n                    ribbonBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    enableLabel={true}\n                    label=\"id\"\n                    labelOffset={9}\n                    labelRotation={-90}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                    colors={{ scheme: 'category10' }}\n                    isInteractive={true}\n                    arcHoverOpacity={1}\n                    arcHoverOthersOpacity={0.4}\n                    ribbonHoverOpacity={0.75}\n                    ribbonHoverOthersOpacity={0.15}\n                    legends={[\n                        {\n                            anchor: 'right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 120,\n                            translateY: 0,\n                            itemWidth: 80,\n                            itemHeight: 11,\n                            itemsSpacing: 0,\n                            itemTextColor: '#999',\n                            itemDirection: 'left-to-right',\n                            symbolSize: 12,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemTextColor: '#000'\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chord;\n","import React from \"react\";\nimport { useRef, useMemo, useState, useCallback } from \"react\";\n\nimport { ForceGraph2D, ForceGraph3D } from \"react-force-graph\";\nimport { find_candidate_by_id } from \"../../../../Data_Models/Util\";\n\nfunction ForceGraph(props) {\n\tconst find_next_active_candidate = (candidates, active_candidates) => {\n\t\tfor (const candidate in candidates) {\n\t\t\tfor (const active_candidate in active_candidates) {\n\t\t\t\tif (\n\t\t\t\t\tcandidates[candidate].candidate_id ===\n\t\t\t\t\tactive_candidates[active_candidate].candidate_id\n\t\t\t\t) {\n\t\t\t\t\treturn candidates[candidate];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn \"exhausted\";\n\t};\n\n\tconst find_node_by_id = (nodes, id) => {\n\t\tfor (const node of nodes) {\n\t\t\tif (String(node.id) === String(id)) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tconst get_final_active_round = (candidate, race) => {\n\t\tlet round_number = race.rounds.length - 1;\n\t\twhile (\n\t\t\tround_number > 0 &&\n\t\t\t!race.rounds[round_number].start_active_candidates.includes(\n\t\t\t\tcandidate\n\t\t\t)\n\t\t) {\n\t\t\tround_number--;\n\t\t}\n\t\treturn round_number;\n\t};\n\n\tconst Generate_Data = (race) => {\n\t\tif (race.rounds.length === 0) return;\n\t\tlet data = {\n\t\t\tnodes: [],\n\t\t\tlinks: [],\n\t\t};\n\n\t\tif (props.exhausted) {\n\t\t\tdata.nodes.push({\n\t\t\t\tid: \"exhausted\",\n\t\t\t\tname: \"exhausted\",\n\t\t\t\tvalue: race.rounds[race.rounds.length - 1].candidate_scores[\n\t\t\t\t\t\"exhausted\"\n\t\t\t\t],\n\t\t\t\tneighbors: [],\n\t\t\t\tcolor: \"#FF0000\",\n\t\t\t});\n\t\t}\n\n\t\tfor (const candidate of race.candidates) {\n\t\t\tconst last_round = get_final_active_round(candidate, race);\n\n\t\t\t// Last Round so only generate nodes\n\t\t\tif (last_round === race.rounds.length - 1) {\n\t\t\t\tdata.nodes.push({\n\t\t\t\t\tid: candidate.candidate_id,\n\t\t\t\t\tname: candidate.candidate_name,\n\t\t\t\t\tvalue: race.rounds[last_round].candidate_scores[\n\t\t\t\t\t\tcandidate.candidate_id\n\t\t\t\t\t],\n\t\t\t\t\tneighbors: [],\n\t\t\t\t\tcolor: candidate.candidate_party.party_color,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generate Nodes\n\t\t\t\tif (\n\t\t\t\t\trace.rounds[last_round].elected_candidates.includes(\n\t\t\t\t\t\tcandidate\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tdata.nodes.push({\n\t\t\t\t\t\tid: candidate.candidate_id,\n\t\t\t\t\t\tname: candidate.candidate_name,\n\t\t\t\t\t\tvalue: race.quota(),\n\t\t\t\t\t\tneighbors: [],\n\t\t\t\t\t\tcolor: candidate.candidate_party.party_color,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdata.nodes.push({\n\t\t\t\t\t\tid: candidate.candidate_id,\n\t\t\t\t\t\tname: candidate.candidate_name,\n\t\t\t\t\t\tvalue: race.rounds[last_round].candidate_scores[\n\t\t\t\t\t\t\tcandidate.candidate_id\n\t\t\t\t\t\t],\n\t\t\t\t\t\tneighbors: [],\n\t\t\t\t\t\tcolor: candidate.candidate_party.party_color,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Generate Links\n\n\t\t\t\t// Find candidates that it will transfer to\n\t\t\t\tlet transfer_candidates_ballot = {};\n\n\t\t\t\tlet candidate_ballots =\n\t\t\t\t\trace.rounds[last_round].ballotsToTransfer[\n\t\t\t\t\t\tcandidate.candidate_id\n\t\t\t\t\t];\n\t\t\t\tfor (const ballot in candidate_ballots) {\n\t\t\t\t\tconst next_candidate = find_next_active_candidate(\n\t\t\t\t\t\tcandidate_ballots[ballot].candidates,\n\t\t\t\t\t\trace.rounds[last_round + 1].start_active_candidates\n\t\t\t\t\t);\n\t\t\t\t\tif (next_candidate !== \"exhausted\") {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnext_candidate.candidate_id in\n\t\t\t\t\t\t\ttransfer_candidates_ballot\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\ttransfer_candidates_ballot[\n\t\t\t\t\t\t\t\tnext_candidate.candidate_id\n\t\t\t\t\t\t\t].push(candidate_ballots[ballot]);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttransfer_candidates_ballot[\n\t\t\t\t\t\t\t\tnext_candidate.candidate_id\n\t\t\t\t\t\t\t] = [candidate_ballots[ballot]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (next_candidate in transfer_candidates_ballot)\n\t\t\t\t\t\t\ttransfer_candidates_ballot[next_candidate].push(\n\t\t\t\t\t\t\t\tcandidate_ballots[ballot]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttransfer_candidates_ballot[next_candidate] = [\n\t\t\t\t\t\t\t\tcandidate_ballots[ballot],\n\t\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const transfer_candidate_id in transfer_candidates_ballot) {\n\t\t\t\t\tif (transfer_candidate_id !== \"exhausted\") {\n\t\t\t\t\t\tconst transfer_candidate = find_candidate_by_id(\n\t\t\t\t\t\t\trace.candidates,\n\t\t\t\t\t\t\ttransfer_candidate_id\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet value = 0;\n\t\t\t\t\t\tfor (const ballot in transfer_candidates_ballot[\n\t\t\t\t\t\t\ttransfer_candidate_id\n\t\t\t\t\t\t]) {\n\t\t\t\t\t\t\tvalue +=\n\t\t\t\t\t\t\t\trace.rounds[last_round].ballots[\n\t\t\t\t\t\t\t\t\ttransfer_candidates_ballot[\n\t\t\t\t\t\t\t\t\t\ttransfer_candidate_id\n\t\t\t\t\t\t\t\t\t][ballot].ballot_id\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata.links.push({\n\t\t\t\t\t\t\tsource: candidate.candidate_id,\n\t\t\t\t\t\t\tsource_name: candidate.candidate_name,\n\t\t\t\t\t\t\ttarget: transfer_candidate.candidate_id,\n\t\t\t\t\t\t\ttarget_name: transfer_candidate.candidate_name,\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (props.exhausted) {\n\t\t\t\t\t\tlet value = 0;\n\t\t\t\t\t\tfor (const ballot in transfer_candidates_ballot[\n\t\t\t\t\t\t\ttransfer_candidate_id\n\t\t\t\t\t\t]) {\n\t\t\t\t\t\t\tvalue +=\n\t\t\t\t\t\t\t\trace.rounds[last_round].ballots[\n\t\t\t\t\t\t\t\t\ttransfer_candidates_ballot[\n\t\t\t\t\t\t\t\t\t\ttransfer_candidate_id\n\t\t\t\t\t\t\t\t\t][ballot].ballot_id\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata.links.push({\n\t\t\t\t\t\t\tsource: candidate.candidate_id,\n\t\t\t\t\t\t\tsource_name: candidate.candidate_name,\n\t\t\t\t\t\t\ttarget: \"exhausted\",\n\t\t\t\t\t\t\ttarget_name: \"Exhausted\",\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (data.links.length > 0) {\n\t\t\tdata.links.forEach((link) => {\n\t\t\t\tconst a = find_node_by_id(data.nodes, link.source);\n\t\t\t\tconst b = find_node_by_id(data.nodes, link.target);\n\n\t\t\t\t!a.neighbors && (a.neighbors = []);\n\t\t\t\t!b.neighbors && (b.neighbors = []);\n\t\t\t\ta.neighbors.push(b);\n\t\t\t\tb.neighbors.push(a);\n\n\t\t\t\t!a.links && (a.links = []);\n\t\t\t\t!b.links && (b.links = []);\n\t\t\t\ta.links.push(link);\n\t\t\t\tb.links.push(link);\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tconst data = useMemo(() => Generate_Data(props.race), [props.race]);\n\n\tconst [highlightNodes, setHighlightNodes] = useState(new Set());\n\tconst [highlightLinks, setHighlightLinks] = useState(new Set());\n\n\tconst updateHighlight = () => {\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\t};\n\n\tconst handleNodeHover = (node) => {\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\t\tif (node) {\n\t\t\thighlightNodes.add(node);\n\t\t\tnode.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\n\t\t\tif (node.links)\n\t\t\t\tnode.links.forEach((link) => highlightLinks.add(link));\n\t\t}\n\n\t\tupdateHighlight();\n\t};\n\n\tconst handleLinkHover = (link) => {\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\n\t\tif (link) {\n\t\t\thighlightLinks.add(link);\n\t\t\thighlightNodes.add(link.source);\n\t\t\thighlightNodes.add(link.target);\n\t\t}\n\n\t\tupdateHighlight();\n\t};\n\n\tconst paintRing = useCallback((node, ctx) => {\n\t\t// add ring just for highlighted nodes\n\t\tctx.beginPath();\n\t\tctx.arc(node.x, node.y, 1, 0, 2 * Math.PI, false);\n\t\tctx.fillStyle = node === \"red\";\n\t\tctx.fill();\n\t}, []);\n\n\tconst getColor = (node) => node.color;\n\tconst getNodeLabel = (node) => node.name + \": \" + Math.round(node.value);\n\tconst getLinkLabel = (link) =>\n\t\tlink.source_name +\n\t\t\" to \" +\n\t\tlink.target_name +\n\t\t\": \" +\n\t\tMath.round(link.value);\n\tconst getValue = (node) => node.value;\n\tconst getLinkValue = (link) => link.value;\n\tconst isVisible = (node) => {\n\t\treturn node.value !== 0;\n\t};\n\n\tconst linkSize = (link) => {\n\t\tif (highlightLinks.has(link)) {\n\t\t\treturn link.value * 0.2;\n\t\t} else {\n\t\t\treturn link.value * 0.1;\n\t\t}\n\t};\n\n\tconst fgRef = useRef();\n\n\tif (props.is2D) {\n\t\treturn (\n\t\t\t<ForceGraph2D\n\t\t\t\tref={fgRef}\n\t\t\t\tgraphData={data}\n\t\t\t\tautoPauseRedraw={false}\n\t\t\t\tnodeRelSize={0.25}\n\t\t\t\tnodeVal={getValue}\n\t\t\t\tnodeLabel={getNodeLabel}\n\t\t\t\tnodeColor={getColor}\n\t\t\t\tnodeVisibility={isVisible}\n\t\t\t\tlinkWidth={linkSize}\n\t\t\t\tlinkLabel={getLinkLabel}\n\t\t\t\tlinkAutoColorBy={getLinkValue}\n\t\t\t\tlinkCurvature={0.25}\n\t\t\t\tnodeCanvasObjectMode={(node) =>\n\t\t\t\t\thighlightNodes.has(node) ? \"before\" : undefined\n\t\t\t\t}\n\t\t\t\tnodeCanvasObject={paintRing}\n\t\t\t\tonNodeHover={handleNodeHover}\n\t\t\t\tonLinkHover={handleLinkHover}\n\t\t\t/>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<ForceGraph3D\n\t\t\t\tref={fgRef}\n\t\t\t\tgraphData={data}\n\t\t\t\tautoPauseRedraw={false}\n\t\t\t\tnodeRelSize={1}\n\t\t\t\tnodeVal={getValue}\n\t\t\t\tnodeLabel={getNodeLabel}\n\t\t\t\tnodeColor={getColor}\n\t\t\t\tnodeVisibility={isVisible}\n\t\t\t\tlinkWidth={linkSize}\n\t\t\t\tlinkAutoColorBy={linkSize}\n\t\t\t\tlinkCurvature={0.25}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default ForceGraph;\n","import React from \"react\";\n\nimport { useState } from \"react\";\n\nimport NivoSankey from \"./ModelComponents/Sankey\";\nimport HeatMap from \"./ModelComponents/HeatMap\";\nimport ElectionBar from \"./ModelComponents/ElectionBar\";\nimport Chord from \"./ModelComponents/Chord\";\nimport Force from \"./ModelComponents/ForceGraph\";\n\nfunction ModelPage(props) {\n\tconst [exhausted, setExhausted] = useState(false);\n\tconst [is2D, set2D] = useState(true);\n\n\tif (props.model === 0) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ElectionBar\n\t\t\t\t\trace={props.race}\n\t\t\t\t\tstyle={{ alignSelf: \"center\", width: \"40vw\" }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t} else if (props.model === 1) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t\tminHeight: \"100%\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<HeatMap race={props.race} />\n\t\t\t\t<Chord race={props.race} />\n\t\t\t</div>\n\t\t);\n\t} else if (props.model === 2) {\n\t\tconsole.log(\"Sankey\");\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: \"grey\",\n\t\t\t\t\theight: \"60vw\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<NivoSankey\n\t\t\t\t\trace={props.race}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: \"90%\",\n\t\t\t\t\t\theight: \"60vw\",\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t} else if (props.model === 3) {\n\t\tconsole.log(\"Force Graph\");\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"60vw\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Force race={props.race} exhausted={exhausted} is2D={is2D} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ModelPage;\n","import React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase\";\nimport uuid from \"react-uuid\";\n\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport { Dropdown } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\nimport RangeSlider from \"react-bootstrap-range-slider\";\n\nimport useInterval from \"../Hooks/useInterval\";\nimport CandidateList from \"./Race/CandidateList\";\n\nimport ElectionSettings from \"./Settings/Settings\";\n\nimport CustomFirstPie from \"./CustomFirstPie\";\n\nimport ChartPage from \"./Charts/ChartPage\";\nimport useWindowSize from \"../Hooks/useWindowSize\";\n\nimport { Race, RaceState } from \"../../Data_Models/Race\";\nimport { Voter } from \"../../Data_Models/Voter\";\nimport { Ballot } from \"../../Data_Models/Ballot\";\nimport { Party } from \"../../Data_Models/Party\";\nimport { Candidate } from \"../../Data_Models/Candidate\";\nimport {\n\tfind_race_by_name,\n\tfind_race_by_id,\n\tfind_party_by_name,\n\tfind_candidate_by_id,\n\tfind_races_by_candidate_id,\n\tfind_party_by_id,\n\tshadeColor,\n} from \"../../Data_Models/Util\";\n\nimport \"./ElectionPage.css\";\nimport { RoundState } from \"../../Data_Models/Round\";\n\nimport ModelPage from \"./Models/ModelPage\";\n\nfunction ElectionPage(props) {\n\tconst loadParties = (party_data) => {\n\t\tlet partiesToAdd = [];\n\t\tfor (const party of party_data.parties) {\n\t\t\tfor (let i = 0; i < partiesToAdd.length; i++)\n\t\t\t\tif (partiesToAdd.party_name === party.party_name) continue;\n\t\t\tpartiesToAdd.push(\n\t\t\t\tnew Party(uuid(), party.party_name, party.party_color)\n\t\t\t);\n\t\t}\n\t\treturn partiesToAdd;\n\t};\n\n\tconst loadRaces = (election_configuration) => {\n\t\tlet racesToAdd = [];\n\t\tfor (const race of election_configuration.races) {\n\t\t\tfor (let i = 0; i < racesToAdd.length; i++)\n\t\t\t\tif (racesToAdd.race_id === race.race_id) continue;\n\n\t\t\tracesToAdd.push(\n\t\t\t\tnew Race(\n\t\t\t\t\trace.race_id,\n\t\t\t\t\trace.race_position,\n\t\t\t\t\trace.race_max_winners\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\treturn racesToAdd;\n\t};\n\n\tconst loadCandidates = (candidate_data) => {\n\t\tlet newParties = [];\n\t\tfor (let key in candidate_data) {\n\t\t\tconst race = find_race_by_name(races, key);\n\t\t\tlet candidate_colors = {};\n\t\t\tif (race === null) continue;\n\t\t\tfor (const candidate of candidate_data[key]) {\n\t\t\t\tlet party = find_party_by_name(parties, candidate.party);\n\t\t\t\tif (party === null) {\n\t\t\t\t\tparty = find_party_by_name(newParties, candidate.party);\n\t\t\t\t}\n\t\t\t\tif (party === null) {\n\t\t\t\t\tparty = new Party(uuid(), candidate.party, \"FFFFFF\");\n\t\t\t\t\tconsole.log(\"Adding Party: \", party.party_name);\n\t\t\t\t\tnewParties.push(party);\n\t\t\t\t}\n\t\t\t\tlet color = shadeColor(\n\t\t\t\t\tparty.party_color,\n\t\t\t\t\tMath.floor(Math.random() * 100) - 50\n\t\t\t\t);\n\n\t\t\t\tif (party.party_name in candidate_colors) {\n\t\t\t\t\twhile (candidate_colors[party.party_name].includes(color))\n\t\t\t\t\t\tcolor = shadeColor(\n\t\t\t\t\t\t\tparty.party_color,\n\t\t\t\t\t\t\tMath.floor(Math.random() * 100) - 50\n\t\t\t\t\t\t);\n\t\t\t\t\tcandidate_colors[party.party_name].push(color);\n\t\t\t\t} else candidate_colors[party.party_name] = [color];\n\t\t\t\trace.add_candidate(\n\t\t\t\t\tnew Candidate(\n\t\t\t\t\t\tcandidate.number,\n\t\t\t\t\t\tcandidate.name,\n\t\t\t\t\t\tparty,\n\t\t\t\t\t\tcolor\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tsetParties([...parties, ...newParties]);\n\t\tsetCandidatesLoaded(true);\n\t\treturn;\n\t};\n\n\tconst loadVoters = (ballot_data) => {\n\t\tlet voters = [];\n\t\tfor (const item of ballot_data.ballots) {\n\t\t\tlet voter = new Voter(uuid());\n\t\t\tfor (let key in item) {\n\t\t\t\tlet candidateOrder = [];\n\t\t\t\tfor (let candidate_id of item[key]) {\n\t\t\t\t\tconst race = find_race_by_id(races, key);\n\t\t\t\t\tif (race !== null) {\n\t\t\t\t\t\tconst candidate = find_candidate_by_id(\n\t\t\t\t\t\t\trace.candidates,\n\t\t\t\t\t\t\tcandidate_id\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcandidateOrder.push(candidate);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst ballot = new Ballot(uuid(), candidateOrder);\n\t\t\t\tconst race = find_race_by_id(races, key);\n\t\t\t\tif (race !== null) {\n\t\t\t\t\trace.add_ballot(ballot);\n\t\t\t\t}\n\t\t\t\tvoter.add_ballot(key, ballot);\n\t\t\t}\n\t\t\tvoters.push(voter);\n\t\t}\n\t\treturn voters;\n\t};\n\n\tconst excused_changed = (candidate) => {\n\t\tif (candidates_dropped.includes(candidate)) {\n\t\t\tsetCandidatesDropped(\n\t\t\t\tcandidates_dropped.filter((value) => {\n\t\t\t\t\treturn value !== candidate;\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tsetCandidatesDropped([candidate, ...candidates_dropped]);\n\t\t}\n\t};\n\n\tconst [election_configuration, setElectionConfiguration] = useState([]);\n\tconst [candidate_data, setCandidateData] = useState([]);\n\tconst [party_data, setPartyData] = useState([]);\n\tconst [ballot_data, setBallotData] = useState([]);\n\n\tconst [candidates_dropped, setCandidatesDropped] = useState([]);\n\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tconst [partiesLoaded, setPartiesLoaded] = useState(false);\n\tconst [racesLoaded, setRacesLoaded] = useState(false);\n\tconst [candidatesLoaded, setCandidatesLoaded] = useState(false);\n\tconst [votersLoaded, setVotersLoaded] = useState(false);\n\n\tconst [parties, setParties] = useState([]);\n\tconst [races, setRaces] = useState([]);\n\tconst [voters, setVoters] = useState([]);\n\n\tconst [activeRace, setActiveRace] = useState(null);\n\tconst [speed, setSpeed] = useState(1000);\n\tconst [refresh, setRefresh] = useState(false);\n\tconst [isRunning, setIsRunning] = useState(false);\n\tconst [page, setPage] = useState(0);\n\n\tconst [model, setModel] = useState(0);\n\n\tconst size = useWindowSize();\n\n\tuseEffect(() => {\n\t\tif (!isLoading) setPartiesLoaded(true);\n\t}, [parties]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (!isLoading) {\n\t\t\tif (activeRace === null) setActiveRace(races[0]);\n\t\t\tsetRacesLoaded(true);\n\t\t}\n\t}, [races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (!isLoading) setVotersLoaded(true);\n\t}, [voters]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tfor (const race of races) {\n\t\t\tif (race.state !== RaceState.ADDING) continue;\n\t\t\tfor (const candidate of race.inactive_candidates) {\n\t\t\t\trace.unexcuse_candidate(candidate);\n\t\t\t}\n\t\t\tfor (const candidate of candidates_dropped) {\n\t\t\t\tif (\n\t\t\t\t\tfind_candidate_by_id(\n\t\t\t\t\t\trace.candidates,\n\t\t\t\t\t\tcandidate.candidate_id\n\t\t\t\t\t) !== null\n\t\t\t\t)\n\t\t\t\t\trace.excuse_candidate(candidate);\n\t\t\t}\n\t\t}\n\t\tsetRefresh(!refresh);\n\t}, [candidates_dropped, races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tconst loadData = async () => {\n\t\t\tif (props.data !== undefined && props.data !== null) {\n\t\t\t\tsetElectionConfiguration(props.data.election_configuration);\n\t\t\t\tsetCandidateData(props.data.candidate_data);\n\t\t\t\tsetPartyData(props.data.parties_data);\n\t\t\t\tsetBallotData(props.data.ballot_data);\n\t\t\t\tsetIsLoading(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet electionId = props.match.params.electionId;\n\n\t\t\tif (typeof electionId === \"undefined\") {\n\t\t\t\telectionId = \"uc_berkeley\";\n\t\t\t}\n\n\t\t\tlet yearId = props.match.params.yearId;\n\t\t\tif (typeof yearId === \"undefined\") {\n\t\t\t\tyearId = \"2015\";\n\t\t\t}\n\n\t\t\tlet databaseString = \"elections/\" + electionId + \"/\" + yearId;\n\n\t\t\tconsole.log(\"Loading Data From DataBase\");\n\t\t\tawait firebase\n\t\t\t\t.database()\n\t\t\t\t.ref(databaseString)\n\t\t\t\t.once(\"value\", (snapshot) => {\n\t\t\t\t\tif (!snapshot.exists()) {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\"Path Doesn't Exist, Loading Default Reference\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdatabaseString = \"elections/uc_berkeley/2015\";\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tfirebase\n\t\t\t\t.database()\n\t\t\t\t.ref(databaseString)\n\t\t\t\t.once(\"value\", (snapshot) => {\n\t\t\t\t\tsetElectionConfiguration(\n\t\t\t\t\t\tsnapshot.child(\"election_configuration\").val()\n\t\t\t\t\t);\n\t\t\t\t\tsetCandidateData(snapshot.child(\"candidate_data\").val());\n\t\t\t\t\tsetPartyData(snapshot.child(\"parties_data\").val());\n\t\t\t\t\tsetBallotData(snapshot.child(\"ballot_data\").val());\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t});\n\t\t};\n\n\t\tif (isLoading) {\n\t\t\tloadData();\n\t\t\treturn;\n\t\t}\n\t\tif (!partiesLoaded) {\n\t\t\tconsole.log(\"Loading Parties\");\n\t\t\tlet parties = loadParties(party_data);\n\t\t\tsetParties(parties);\n\t\t}\n\n\t\tif (partiesLoaded && !racesLoaded) {\n\t\t\tconsole.log(\"Loading Races\");\n\t\t\tsetRaces(loadRaces(election_configuration));\n\t\t\treturn;\n\t\t}\n\n\t\tif (racesLoaded && !candidatesLoaded) {\n\t\t\tconsole.log(\"Loading Candidates\");\n\t\t\tloadCandidates(candidate_data);\n\t\t\treturn;\n\t\t}\n\n\t\tif (candidatesLoaded && !votersLoaded) {\n\t\t\tconsole.log(\"Loading Voters\");\n\t\t\tsetVoters(loadVoters(ballot_data));\n\t\t}\n\t\tif (votersLoaded) {\n\t\t\tconsole.log(\"Finished Loading\");\n\t\t}\n\t}, [isLoading, partiesLoaded, racesLoaded, candidatesLoaded, votersLoaded]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseInterval(\n\t\t() => {\n\t\t\tif (activeRace.state !== RoundState.COMPLETE && isRunning) {\n\t\t\t\tfor (let i = 0; i < Math.floor(speed / 10); i++) {\n\t\t\t\t\tactiveRace.run_race_step();\n\t\t\t\t}\n\t\t\t\tsetRefresh(!refresh);\n\t\t\t} else {\n\t\t\t\tsetIsRunning(false);\n\t\t\t}\n\t\t},\n\t\tisRunning ? 100 : null\n\t);\n\n\tconst switchActiveRace = (race) => {\n\t\tsetIsRunning(false);\n\t\tsetActiveRace(race);\n\t};\n\n\tconst finishRaces = () => {\n\t\tfor (const race of races) {\n\t\t\twhile (race.state !== RoundState.COMPLETE) {\n\t\t\t\trace.run_race_step();\n\t\t\t}\n\t\t}\n\t\tsetRefresh(!refresh);\n\t};\n\n\tconst stopRunning = (race) => {\n\t\tsetIsRunning(false);\n\t};\n\n\tconst saveCandidateChanges = (id, name, party, color, active) => {\n\t\tlet new_races = find_races_by_candidate_id(races, id);\n\t\tfor (const race_to_change of new_races) {\n\t\t\tlet candidate = find_candidate_by_id(race_to_change.candidates, id);\n\t\t\tcandidate.candidate_name = name;\n\t\t\tcandidate.candidate_party = party;\n\t\t\tcandidate.candidate_color = color;\n\t\t}\n\t};\n\n\tconst savePartyChanges = (id, name, color) => {\n\t\tlet party = find_party_by_id(parties, id);\n\t\tparty.party_name = name;\n\t\tparty.party_color = color;\n\t};\n\n\t// Render Everything\n\tif (isLoading || activeRace == null) return <h1> Loading... </h1>;\n\n\tconst pageButtonStyle = { borderRadius: 0, height: \"100%\", width: \"50%\" };\n\tlet pageButtons = (\n\t\t<ButtonGroup\n\t\t\tsize=\"lg\"\n\t\t\tstyle={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}\n\t\t>\n\t\t\t<Button\n\t\t\t\tonClick={() => setPage(0)}\n\t\t\t\tdisabled={page === 0}\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tsize=\"lg\"\n\t\t\t\tstyle={pageButtonStyle}\n\t\t\t>\n\t\t\t\t{\"Election\"}\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tonClick={() => setPage(1)}\n\t\t\t\tdisabled={page === 1}\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tsize=\"lg\"\n\t\t\t\tstyle={pageButtonStyle}\n\t\t\t>\n\t\t\t\t{\"Charts\"}\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tonClick={() => setPage(2)}\n\t\t\t\tdisabled={page === 2}\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tsize=\"lg\"\n\t\t\t\tstyle={pageButtonStyle}\n\t\t\t>\n\t\t\t\t{\"Models\"}\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tonClick={() => setPage(3)}\n\t\t\t\tdisabled={page === 3}\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tsize=\"lg\"\n\t\t\t\tstyle={pageButtonStyle}\n\t\t\t>\n\t\t\t\t{\"Custom Graph\"}\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tonClick={() => setPage(4)}\n\t\t\t\tdisabled={page === 4}\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tsize=\"lg\"\n\t\t\t\tstyle={pageButtonStyle}\n\t\t\t>\n\t\t\t\t{\"Settings\"}\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t);\n\n\tlet raceTitle = (\n\t\t<div\n\t\t\tclassName=\"title-text\"\n\t\t\tstyle={{\n\t\t\t\twidth: \"100%\",\n\t\t\t\tbackgroundColor: \"grey\",\n\t\t\t\tmargin: \"1% 2.5% 1% 2.5%\",\n\t\t\t\tborderRadius: \"5px\",\n\t\t\t}}\n\t\t>\n\t\t\t<h1\n\t\t\t\tstyle={{\n\t\t\t\t\tfont: \"3.5rem/1 arial, sans-serif\",\n\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\tpadding: \"1%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{\" \"}\n\t\t\t\t{activeRace.race_name}{\" \"}\n\t\t\t</h1>\n\t\t</div>\n\t);\n\n\tif (page === 0) {\n\t\tlet dropdownItems = races.map((item, index) => (\n\t\t\t<Dropdown.Item\n\t\t\t\tkey={index}\n\t\t\t\tas=\"button\"\n\t\t\t\tonClick={() => switchActiveRace(item)}\n\t\t\t>\n\t\t\t\t{\" \"}\n\t\t\t\t{item.race_name}\n\t\t\t</Dropdown.Item>\n\t\t));\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{pageButtons}\n\t\t\t\t{raceTitle}\n\t\t\t\t<div className=\"election-table\" style={{ width: \"100%\" }}>\n\t\t\t\t\t<CandidateList\n\t\t\t\t\t\tcandidates={activeRace.candidateTable}\n\t\t\t\t\t\tseats={activeRace.seats}\n\t\t\t\t\t\trefresh={refresh}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<ButtonGroup\n\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tborderRadius: \"5px\",\n\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\tmargin: \"0% 2.5% 0% 2.5%\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<DropdownButton\n\t\t\t\t\t\tid=\"dropdown-item-button\"\n\t\t\t\t\t\tas={ButtonGroup}\n\t\t\t\t\t\ttitle=\"Change Race\"\n\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tboxShadow: \"0 0 0 1px black\",\n\t\t\t\t\t\t\tborderRadius: \"5px 0px 0px 5px\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{dropdownItems}\n\t\t\t\t\t</DropdownButton>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => setIsRunning(true)}\n\t\t\t\t\t\tdisabled={isRunning}\n\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\tstyle={{ boxShadow: \"0 0 0 1px black\", width: \"5%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{\"Run Election\"}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={finishRaces}\n\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\tstyle={{ boxShadow: \"0 0 0 1px black\", width: \"5%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{\"Finish Races\"}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tboxShadow: \"0 0 0 1px black\",\n\t\t\t\t\t\t\tbackgroundColor: \"#007bff\",\n\t\t\t\t\t\t\twidth: \"30%\",\n\t\t\t\t\t\t\tborderRadius: \"0px 5px 5px 0px\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfont: \"1.3rem/1 arial, sans-serif\",\n\t\t\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\t\t\tpadding: \"5% 0 0 0\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSpeed\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div style={{ margin: \"0% 5% 0% 5%\" }}>\n\t\t\t\t\t\t\t<RangeSlider\n\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\tmax={10000}\n\t\t\t\t\t\t\t\tstep={10}\n\t\t\t\t\t\t\t\tvalue={speed}\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\tonChange={(changeEvent) =>\n\t\t\t\t\t\t\t\t\tsetSpeed(changeEvent.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</ButtonGroup>\n\t\t\t</div>\n\t\t);\n\t} else if (page === 1) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t\twidth: size.width,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{pageButtons}\n\t\t\t\t{raceTitle}\n\t\t\t\t<ChartPage race={activeRace} parties={parties} />\n\t\t\t</div>\n\t\t);\n\t} else if (page === 2) {\n\t\tlet modelButtons = (\n\t\t\t<ButtonGroup\n\t\t\t\tsize=\"lg\"\n\t\t\t\tstyle={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => setModel(0)}\n\t\t\t\t\tdisabled={model === 0}\n\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\tstyle={pageButtonStyle}\n\t\t\t\t>\n\t\t\t\t\t{\"Bar\"}\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => setModel(1)}\n\t\t\t\t\tdisabled={model === 1}\n\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\tstyle={pageButtonStyle}\n\t\t\t\t>\n\t\t\t\t\t{\"Heat Map\"}\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => setModel(2)}\n\t\t\t\t\tdisabled={model === 2}\n\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\tstyle={pageButtonStyle}\n\t\t\t\t>\n\t\t\t\t\t{\"Sankey\"}\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => setModel(3)}\n\t\t\t\t\tdisabled={model === 3}\n\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\tstyle={pageButtonStyle}\n\t\t\t\t>\n\t\t\t\t\t{\"Force\"}\n\t\t\t\t</Button>\n\t\t\t</ButtonGroup>\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\twidth: size.width,\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{pageButtons}\n\t\t\t\t{modelButtons}\n\t\t\t\t{raceTitle}\n\t\t\t\t<ModelPage race={activeRace} model={model} />\n\t\t\t</div>\n\t\t);\n\t} else if (page === 4) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t\twidth: size.width,\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{pageButtons}\n\t\t\t\t{raceTitle}\n\t\t\t\t<ElectionSettings\n\t\t\t\t\trace={activeRace}\n\t\t\t\t\tparties={parties}\n\t\t\t\t\tsavePartyChanges={savePartyChanges}\n\t\t\t\t\tsaveCandidateChanges={saveCandidateChanges}\n\t\t\t\t\texcused={excused_changed}\n\t\t\t\t\trunning={stopRunning}\n\t\t\t\t\trefresh={refresh}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"text-center\"\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t\tminHeight: \"100%\",\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexWrap: \"wrap\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{pageButtons}\n\t\t\t\t{raceTitle}\n\t\t\t\t<CustomFirstPie race={activeRace} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ElectionPage;\n","import React, { Component } from 'react';\n\n\nexport class FourZeroFour extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>404: Oops! Page not found!</h1>\n            </div>)\n    }\n}\nexport default FourZeroFour;\n","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport Button from 'react-bootstrap/Button'\n\nimport { Form } from 'react-bootstrap';\n\nfunction AddToDatabase() {\n    const AddToDB = (event) => {\n        const checkStrings = (str) => {\n            return str === null || str.match(/^ *$/) !== null;\n        }\n        event.preventDefault();\n        let data = ({ election_configuration: election_configuration, candidate_data: candidate_data, ballot_data: ballot_data, parties_data: party_data });\n        if (!checkStrings(electionName) && !checkStrings(year)) {\n            firebase.database().ref(\"elections/\" + electionName + \"/\" + year).set(data);\n            alert(\"Added To Database: elections/\" + electionName + \"/\" + year);\n        }\n        else {\n            alert('Invalid Name');\n        }\n    }\n\n    const onChange = async (event, callback) => {\n        event.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (event) => {\n            callback(JSON.parse(event.target.result));\n        };\n        if (event.target.files[0] !== null)\n            reader.readAsText(event.target.files[0]);\n    }\n\n    const [electionName, setElectionName] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [election_configuration, setElectionConfiguration] = useState(null);\n    const [party_data, setPartyData] = useState(null);\n    const [candidate_data, setCandidateData] = useState(null);\n    const [ballot_data, setBallotData] = useState(null);\n\n    return (\n        <div className=\"text-center\">\n            <h1> Add to Database </h1>\n            <Form onSubmit={AddToDB}>\n                <Form.Group>\n                    <Form.Control type=\"text\" value={electionName} onChange={(event) => setElectionName(event.target.value)} placeholder=\"Election Name\" />\n                    <Form.Control type=\"text\" value={year} onChange={(event) => setYear(event.target.value)} placeholder=\"Year\" />\n                </Form.Group>\n                <Form.Group style={{ display: 'grid', justifyItems: 'center' }}>\n                    <Form.File onChange={(event) => onChange(event, setElectionConfiguration)} accept='.json' label=\"Election Configuration\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setPartyData)} label=\"Party Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setCandidateData)} label=\"Candidate Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setBallotData)} label=\"Ballot Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                </Form.Group>\n                <Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Group>\n            </Form>\n        </div >\n    );\n}\n\nexport default AddToDatabase;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Redirect, withRouter } from \"react-router\";\nimport './firebase';\nimport './App.css'\n\nimport NavBar from './Components/NavBar/NavBar';\nimport Home from './Components/Home';\nimport ElectionPage from './Components/ElectionPage/ElectionPage';\nimport FourZeroFour from './Components/FourZeroFour';\nimport AddToDatabase from './Components/AddToDatabase';\n\nimport election_configuration from './Data/Configuration.json';\nimport candidate_data from './Data/Candidates.json';\nimport parties_data from './Data/Parties.json';\nimport ballot_data from './Data/Ballots.json';\n\nconst NavBarWithRouter = withRouter(NavBar);\n\nfunction App() {\n    return (\n        <BrowserRouter basename='/stvote' style={{ width: '100%', height: '100%' }}>\n            <Fragment >\n                <NavBarWithRouter style={{ width: '100%', height: '100%' }} />\n                <main style={{ width: '100%', height: '100%' }}>\n                    <Switch>\n                        <Route exact path='/'> <Redirect to=\"/home\" /> </Route>\n                        <Route path='/home' component={Home} />\n                        <Route exact path='/election' render={() => (<ElectionPage data={{ election_configuration: election_configuration, candidate_data: candidate_data, parties_data: parties_data, ballot_data: ballot_data }} />)} />\n                        <Route exact path='/election/:electionId' component={ElectionPage} />\n                        <Route path='/election/:electionId/:yearId' component={ElectionPage} />\n                        <Route path='/add' component={AddToDatabase} />\n                        <Route component={FourZeroFour} />\n                    </Switch>\n                </main>\n            </Fragment>\n        </BrowserRouter>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{ width: '100%', height: '100%' }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}