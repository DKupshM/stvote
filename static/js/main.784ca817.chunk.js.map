{"version":3,"sources":["firebase.js","Components/NavBar/NavBar.js","Components/Home.js","Components/Hooks/useInterval.js","Data_Models/Candidate.js","Components/ElectionPage/Race/ProgressBar.js","Components/ElectionPage/Race/CandidatePosition.js","Components/ElectionPage/Race/CandidateList.js","Components/ElectionPage/Settings.js","Data_Models/Util.js","Components/Hooks/useWindowSize.js","Components/ElectionPage/CustomFirstPie.js","Components/ElectionPage/Models/FirstChoicePie.js","Data_Models/Round.js","Data_Models/Race.js","Components/ElectionPage/Models/ElectedCandidatesPie.js","Components/ElectionPage/Models/CandidatesRankedPie.js","Components/ElectionPage/Models/CandidatesRanked.js","Components/ElectionPage/Models/PartyPercentage.js","Components/ElectionPage/Models/EventualWinner.js","Components/ElectionPage/Models/VoteOverTime.js","Components/ElectionPage/Models/VoteOverTimeBump.js","Components/ElectionPage/Models/RoundCandidateBump.js","Data_Models/Voter.js","Data_Models/Ballot.js","Data_Models/Party.js","Components/ElectionPage/Models/Sankey.js","Components/ElectionPage/Models/HeatMap.js","Components/ElectionPage/Models/ElectionBar.js","Components/ElectionPage/Models/Chord.js","Components/ElectionPage/ElectionPage.js","Components/FourZeroFour.js","Components/AddToDatabase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NavBar","props","useState","activeKey","setActiveKey","handleSelect","eventKey","Number","isInteger","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","onClick","Toggle","aria-controls","Collapse","id","Nav","className","onSelect","Link","Home","CreateSelectButton","election_title","filename","years","yearButtons","map","item","index","Button","key","year","console","log","OnClick","ButtonGroup","vertical","size","style","padding","disabled","asuc","asucsb","asucd","asucsc","asucla","display","alignItems","justifyContent","flexWrap","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Candidate","candidate_id","candidate_name","candidate_party","candidate_color","this","CandidateState","ProgressBar","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","color","fontWeight","Math","floor","CandidatePosition","get_status_color","status","position","isNaN","seats","candidate","party_color","party_name","score","margin","quota","min","CandidateList","candidate_list","candidates","sort","x","y","scope","ElectionSettings","excused_boxes","race","inactive_candidates","check","includes","planned_active_candidates","Form","Check","label","checked","onChange","excused","running","reset_race","boxShadow","find_candidate_by_id","i","length","String","find_party_by_name","parties","name","useWindowSize","undefined","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","GroupSettings","groupNumber","number","title","random","toString","CustomGraph","totalAmount","data","top","right","bottom","left","innerRadius","padAngle","cornerRadius","colors","bar","groups","group","borderColor","from","modifiers","enableRadialLabels","sliceLabel","round","value","slicesLabelsSkipAngle","slicesLabelsTextColor","legends","text","fontSize","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemTextColor","itemDirection","itemOpacity","symbolSize","symbolShape","CustomFirstPie","setColor","setTitle","selectedCandidates","setSelectedCandidates","editTitle","setEditTitle","show","setShow","displayColorPicker","setDisplayColorPicker","setGroups","activeGroupNumber","setActiveGroupNumber","push","handleClose","saveChanges","group_buttons","paddingLeft","paddingRight","indexOf","candidate_options","scores","first_scores","groupScore","Row","Col","concat","flexDirection","Modal","aria-labelledby","centered","onHide","Header","closeButton","Title","Body","onKeyPress","e","which","preventDefault","Label","Control","type","event","target","as","Array","selectedOptions","option","multiple","background","cursor","zIndex","onChangeComplete","hex","Footer","copy","splice","FirstChoicePie","get_ranked_choices","party","ranked_choices","ballots","choices","pixelRatio","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","animate","motionStiffness","motionDamping","Round","round_number","add_ballot","ballot","state","RoundState","COMPLETE","Error","ballot_id","find_next_active_candidate","candidate_ballots","candidate_scores","active_candidates","add_candidate","elected_candidates","start_inactive_candidates","start_active_candidates","eliminated_candidates","set_elected_candidate","filter","ballotsToTransfer","set_eliminate_candidate","candidate_ballot","candidate_score","complete","isCandidateElected","candidate_real_scores","RUNNING","exhausted","rankings","Race","race_id","race_name","dropped_candidates","dropped","RaceState","ADDING","current_candidate","inactive_ballots","rounds","transfer_voters","ballots_to_apply","candidate_ballot_rankings","planned_inactive_candidates","elected","transferring","transfered","excuse_candidate","unexcuse_candidate","num_candidates","currentScores","candidateTable","start_tabulation","TABULATING","run_race_step","elect_candidate","currentRound","Object","keys","surplus","transfer_value","transfer_candidate","shift","first_round_score","activeCandidates","roundElected","maxElected","roundTransfer","reverse","complete_round","previousRound","add_round","begin_race","PartyPercentage","entries","constructor","maxChoices","num_ranked","max","scheme","CandidatesRanked","data_to_add","indexBy","innerPadding","minValue","maxValue","groupMode","layout","colorBy","borderWidth","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","isInteractive","maxchoices","datapoints","xScale","yScale","stacked","orient","enablePoints","enableArea","areaOpacity","useMesh","get_first_elected","VoteOverTime","choices_over_time","score_chart","xFormat","yFormat","tickValues","lineWidth","VoteOverTimeBump","indexOfMax","arr","maxIndex","increment","candidate_positions","datapoint","getCandidateByName","activeLineWidth","inactiveLineWidth","inactiveOpacity","pointSize","activePointSize","inactivePointSize","format","RoundCandidateBump","pointColor","theme","pointBorderWidth","activePointBorderWidth","pointBorderColor","Voter","voter_id","participating_races","races","participating_in_race","get_ballot_for_race","Ballot","Party","isValidColor","s","Option","Sankey","active_candidate","prev_round","nodes","links","link","source","transfer_candidates_ballot","next_candidate","transfer_candidate_id","GenerateData","align","nodeTooltip","node","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","enableLinkGradient","enableLabels","labelPosition","labelOrientation","labelPadding","HeatMap","get_ballots_for_candidate_at_position","showPercent","xChoice","setXChoice","yChoice","setYChoice","heatData","other_candidate","sum","xButtons","Dropdown","Item","yButtons","DropdownButton","tooltipFormat","forceSquare","cellOpacity","cellBorderColor","defs","rotation","spacing","fill","hoverTarget","cellHoverOthersOpacity","ElectionBar","get_round_data","round_data","get_candidate_position","candidate_table","get_candidate_by_position","final_candidate_score","setRound","data_active_candidates","round_active_candidates","chart_data","transferred","font","step","changeEvent","max_score","get_max_score","Chord","chordData","matrix","valueFormat","innerRadiusRatio","innerRadiusOffset","arcOpacity","arcBorderWidth","arcBorderColor","ribbonOpacity","ribbonBorderWidth","ribbonBorderColor","labelOffset","labelRotation","arcHoverOpacity","arcHoverOthersOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","effects","on","ElectionPage","shadeColor","percent","R","parseInt","substring","G","B","find_race_by_id","find_race_by_name","election_configuration","setElectionConfiguration","candidate_data","setCandidateData","party_data","setPartyData","ballot_data","setBallotData","candidates_dropped","setCandidatesDropped","isLoading","setIsLoading","partiesLoaded","setPartiesLoaded","racesLoaded","setRacesLoaded","candidatesLoaded","setCandidatesLoaded","votersLoaded","setVotersLoaded","setParties","setRaces","voters","setVoters","activeRace","setActiveRace","speed","setSpeed","refresh","setRefresh","isRunning","setIsRunning","page","setPage","model","setModel","a","parties_data","electionId","match","params","yearId","databaseString","database","ref","once","snapshot","exists","child","val","loadData","partiesToAdd","loadParties","racesToAdd","race_position","race_max_winners","loadRaces","candidate_colors","loadCandidates","voter","uuid","candidateOrder","loadVoters","pageButtonStyle","pageButtons","raceTitle","dropdownItems","chartStyle","alignSelf","ElectedCandidatesPie","CandidatesRankedPie","EventualWinner","modelButtons","minHeight","FourZeroFour","Component","AddToDatabase","reader","FileReader","onload","JSON","parse","result","files","readAsText","electionName","setElectionName","setYear","onSubmit","checkStrings","str","alert","set","Group","placeholder","justifyItems","File","accept","NavBarWithRouter","withRouter","App","basename","exact","path","to","component","render","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.784ca817.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyCFNJfMcHbdoAKVVF88d-9POsUgk-C7NKk\",\n    authDomain: \"stvote-b967b.firebaseapp.com\",\n    databaseURL: \"https://stvote-b967b.firebaseio.com\",\n    projectId: \"stvote-b967b\",\n    storageBucket: \"stvote-b967b.appspot.com\",\n    messagingSenderId: \"487837721842\",\n    appId: \"1:487837721842:web:95c0dc83a5eeb46b995c6b\"\n}\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { useState } from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction NavBar(props) {\n\n    const [activeKey, setActiveKey] = useState(1);\n\n    const handleSelect = (eventKey) => {\n        if (Number.isInteger(eventKey))\n            setActiveKey(eventKey);\n        else\n            setActiveKey(0);\n    };\n\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/stvote/home\" onClick={handleSelect}>STVote</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav activeKey={activeKey} className=\"mr-auto\" onSelect={handleSelect}>\n                    <Nav.Link eventKey={1} href=\"/stvote/home\">Home</Nav.Link>\n                    <Nav.Link eventKey={1} href=\"/stvote/election\">Election</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\n\nfunction Home(props) {\n    const OnClick = (election_title, year) => {\n\n        console.log(\"Clicked\", election_title, year);\n    }\n    const CreateSelectButton = (election_title, filename, years) => {\n        let yearButtons = years.map((item, index) => (\n            <Button key={index} href={\"/stvote/election/\" + filename + \"/\" + item} onClick={() => OnClick(election_title, item)}>{item}</Button>\n        ));\n\n        return (\n            <ButtonGroup vertical size=\"lg\" style={{ padding: '2%' }}>\n                <Button variant=\"dark\" disabled={true}>{election_title}</Button>\n                {yearButtons}\n            </ButtonGroup>\n        );\n    }\n\n    let asuc = CreateSelectButton('ASUC Berkeley', \"uc_berkeley\", [2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsb = CreateSelectButton('ASUC Santa Barbara', \"uc_santa_barbara\", [2016, 2017, 2018, 2019, 2020]);\n    let asucd = CreateSelectButton('AS UC Davis', \"uc_davis\", [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsc = CreateSelectButton('AS UC Santa Cruz', \"uc_berkeley\", [2018, 2019, 2020]);\n    let asucla = CreateSelectButton('AS UC Los Angeles', \"uc_berkeley\", [2018, 2019, 2020]);\n\n    return (\n        <div className=\"text-center\">\n            <h1> STVote Elections </h1>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly', flexWrap: 'wrap' }}>\n                {asuc}\n                {asucsb}\n                {asucd}\n                {asucsc}\n                {asucla}\n            </div>\n        </div >\n    );\n}\n\nexport default Home;\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","\nexport class Candidate {\n    constructor(candidate_id, candidate_name, candidate_party, candidate_color = \"#FFFFFF\") {\n        this.candidate_id = candidate_id;\n        this.candidate_name = candidate_name;\n        this.candidate_party = candidate_party;\n        this.candidate_color = candidate_color;\n    }\n\n\n}\n\nexport const CandidateState = {\n    ELECTED: \"ELECTED\",\n    RUNNING: \"RUNNING\",\n    TRANSFERRING: \"TRANSFERRING\",\n    TRANSFERED: \"TRANSFERED\",\n    EXCUSED: \"EXCUSED\",\n};","import React from 'react';\n\nconst ProgressBar = (props) => {\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        height: '48px',\n        width: '100%',\n        backgroundColor: \"#fffbf5\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: bgcolor,\n        borderRadius: 'inherit',\n        textAlign: 'right'\n    }\n\n    const labelStyles = {\n        padding: 5,\n        color: 'black',\n        fontWeight: 'bold'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span style={labelStyles}>{`${Math.floor(completed)}%`}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;","import React from 'react';\nimport { CandidateState } from '../../../Data_Models/Candidate';\nimport ProgressBar from './ProgressBar';\nimport '../ElectionPage.css'\n\nfunction CandidatePosition(props) {\n    const get_status_color = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"#01A039\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"#0095E0\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"#E07A00\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"#FF0000\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"#D5D5D5\";\n        return \"#FFFFFF\"\n    }\n\n    const get_status_text = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"ELECTED\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"RUNNING\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"TRANSFERRING\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"TRANSFERED\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"EXCUSED\";\n        return \"\"\n    }\n\n    const get_position = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position))\n            return props.position + 1;\n        return 0;\n    }\n\n    const get_position_color = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position)) {\n            if (props.position < props.seats) {\n                if (props.status === CandidateState.ELECTED)\n                    return \"#01A039\";\n                return \"#C5FFC5\"\n            } else if (props.status === CandidateState.RUNNING)\n                return \"#FAB8B8\";\n            else if (props.status === CandidateState.EXCUSED)\n                return \"#D5D5D5\";\n            else\n                return \"#FF0000\";\n        }\n        return \"#FFFFFF\";\n    }\n\n    const get_percentage = () => {\n        if (props.quota === 0)\n            return 0;\n        return Math.min(100, (props.score / props.quota) * 100);\n    }\n\n    return (\n        <tr>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: get_position_color() }}> {get_position()} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: \"#FFFFFF\" }}> {props.candidate.candidate_name} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: props.candidate.candidate_party.party_color }}> {props.candidate.candidate_party.party_name} </td >\n            <td className=\"basic-row\" width=\"150\" style={{ backgroundColor: get_status_color() }}> {get_status_text()} </td >\n            <td className=\"basic-row\" width=\"100\" style={{ backgroundColor: get_status_color() }}> {Math.floor(props.score)} </td >\n            <td style={{ padding: \"0 0 0 0\", margin: \"0 0 0 0\" }}>\n                <div style={{ display: 'inline-block', width: '100%', height: '100%' }}>\n                    <ProgressBar bgcolor={get_status_color()} completed={get_percentage()} />\n                </div>\n            </td >\n        </tr >\n    );\n}\n\nexport default CandidatePosition;\n","import React from 'react';\nimport CandidatePosition from './CandidatePosition';\nimport '../ElectionPage.css'\n\nfunction CandidateList(props) {\n\n    let sortedCandidates = props.candidates().sort((x, y) => {\n        if (x.position > y.position) {\n            return 1;\n        } else if (y.position > x.position) {\n            return -1;\n        }\n        return 0;\n    });\n\n    let candidate_list = sortedCandidates.map((item, index) => (\n        <CandidatePosition key={index} candidate={item.candidate} status={item.status}\n            score={item.score} position={item.position} quota={item.quota} seats={props.seats} />\n    ));\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-bordered\" >\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >#</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Name</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Party</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\">Status</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" > Score</th >\n                        <th className=\"title-row\" scope=\"col\">Quota Percentage</th>\n                    </tr >\n                </thead >\n                <tbody>\n                    {candidate_list}\n                </tbody>\n            </table >\n        </div >\n    );\n}\n\nexport default CandidateList;\n","import React from 'react';\n\nimport { Button, Form } from 'react-bootstrap';\n\nfunction ElectionSettings(props) {\n    const resetRace = () => {\n        props.running()\n        props.race.reset_race()\n    }\n\n    let candidates = [...props.race.candidates, ...props.race.inactive_candidates]\n\n    let excused_boxes = candidates.map((candidate, index) => {\n        const check = props.race.candidates.includes(candidate) || props.race.planned_active_candidates.includes(candidate);\n        return <Form.Check label={candidate.candidate_name} key={index} size=\"lg\" checked={check}\n            onChange={() => (props.excused(candidate))} />\n    });\n\n    return (\n        <div>\n            {excused_boxes}\n            <Button onClick={resetRace} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', borderRadius: '5px 5px 5px 5px' }}>\n                {'Reset Race'}\n            </Button>\n        </div>\n    )\n}\n\nexport default ElectionSettings;","export const find_race_by_name = (races, name) => {\n    for (let i = 0; i < races.length; i++) {\n        if (races[i].race_name === name)\n            return races[i];\n    }\n    return null;\n};\n\nexport const find_race_by_id = (races, id) => {\n    for (let i = 0; i < races.length; i++) {\n        if (String(races[i].race_id) === id)\n            return races[i];\n    }\n    return null;\n};\n\nexport const find_candidate_by_id = (candidates, candidate_id) => {\n    for (let i = 0; i < candidates.length; i++)\n        if (String(candidates[i].candidate_id) === candidate_id)\n            return candidates[i];\n    return null;\n};\n\nexport const find_candidate_by_name = (candidates, candidate_name) => {\n    for (let i = 0; i < candidates.length; i++)\n        if (String(candidates[i].candidate_name) === candidate_name)\n            return candidates[i];\n    return null;\n};\n\nexport const find_party_by_name = (parties, name) => {\n    for (let i = 0; i < parties.length; i++)\n        if (parties[i].party_name === name)\n            return parties[i];\n    return null\n};","import React, { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}\n\nexport default useWindowSize;","import React, { useEffect, useState } from 'react';\n\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { SketchPicker } from 'react-color';\nimport { Form, Row, Col, ButtonGroup, Button, Modal } from 'react-bootstrap';\nimport { find_candidate_by_id } from '../../Data_Models/Util';\nimport useWindowSize from '../Hooks/useWindowSize';\n\nclass GroupSettings {\n    constructor(groupNumber) {\n        this.number = groupNumber\n        this.title = \"Group \" + groupNumber\n        this.candidates = []\n        this.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    }\n}\n\nfunction CustomGraph(props) {\n    const getPercentage = bar => {\n        return Math.round((bar.value / props.totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = (bar) => {\n        for (const group of props.groups) {\n            if (group.title === bar.id) {\n                return group.color\n            }\n        }\n        return \"#fff\"\n    }\n\n    if (props.totalAmount === 0)\n        return <div />\n\n    return (\n        <ResponsivePieCanvas\n            data={props.data}\n            margin={{ top: 40, right: 100, bottom: 40, left: 80 }}\n            innerRadius={0}\n            padAngle={0.7}\n            cornerRadius={3}\n            colors={getColor}\n            borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n            enableRadialLabels={false}\n            sliceLabel={getPercentage}\n            slicesLabelsSkipAngle={20}\n            slicesLabelsTextColor=\"#000000\"\n            legends={[\n                {\n                    text: {\n                        fontSize: 20,\n                        fontWeight: 900,\n                        color: \"#000000\"\n                    },\n                    anchor: 'top-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 0,\n                    translateY: 0,\n                    itemsSpacing: 10,\n                    itemWidth: 60,\n                    itemHeight: 14,\n                    itemTextColor: '#999',\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 1,\n                    symbolSize: 20,\n                    symbolShape: 'square',\n                    itemTextColor: '#000000'\n                }\n            ]}\n        />\n    );\n}\n\nfunction CustomFirstPie(props) {\n    const size = useWindowSize();\n    const [color, setColor] = useState(\"#fff\");\n    const [title, setTitle] = useState(\"Title\")\n    const [selectedCandidates, setSelectedCandidates] = useState([])\n    const [editTitle, setEditTitle] = useState(\"Title\")\n    const [show, setShow] = useState(false);\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    const [groups, setGroups] = useState([]);\n    const [activeGroupNumber, setActiveGroupNumber] = useState(-1)\n\n    useEffect(() => {\n        if (groups.length === 0 || activeGroupNumber === -1)\n            return\n        setTitle(groups[activeGroupNumber].title)\n        setEditTitle(groups[activeGroupNumber].title)\n        setColor(groups[activeGroupNumber].color)\n        let candidates = []\n        for (const candidate of groups[activeGroupNumber].candidates) {\n            candidates.push(candidate.candidate_id)\n        }\n        setSelectedCandidates(candidates)\n    }, [activeGroupNumber, groups])\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n\n    const handleClose = (saveChanges) => {\n        setShow(false);\n        if (saveChanges) {\n            if (groups.length === 0)\n                return\n            groups[activeGroupNumber].title = editTitle;\n            groups[activeGroupNumber].color = color;\n            let candidates = []\n            for (const candidate of selectedCandidates) {\n                candidates.push(find_candidate_by_id(props.race.candidates, candidate))\n            }\n            groups[activeGroupNumber].candidates = candidates\n        }\n    }\n\n    const handleShow = (groupNumber) => {\n        setActiveGroupNumber(groupNumber)\n        setShow(true);\n    }\n\n    const handleEditChange = (event) => {\n        setEditTitle(event.target.value)\n    }\n\n    const handleDelete = () => {\n        const index = groups.indexOf(groups[activeGroupNumber])\n        if (index > -1) {\n            let copy = [].concat(groups);\n            copy.splice(index, 1)\n            setGroups(copy)\n        }\n        setShow(false)\n        setActiveGroupNumber(-1)\n    }\n\n    const handleSelectedChange = (event) => {\n        setSelectedCandidates(Array.from(event.target.selectedOptions, option => option.value))\n    }\n\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n\n    const candidates = props.race.candidates\n\n    const addGroup = () => {\n        setGroups(groups.concat(new GroupSettings(groups.length)))\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault();\n            handleClose(true)\n        }\n    }\n\n    let group_buttons = groups.map((item, index) => (\n        <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n            <Button disabled>{item.title}</Button>\n            <Button onClick={() => (handleShow(groups.indexOf(item)))}> Edit </Button>\n        </ButtonGroup>\n    ));\n\n    let candidate_options = candidates.map((item, index) => {\n        if (groups.length === 0 || activeGroupNumber === -1)\n            return <div key={index} />\n        return <option key={index} value={item.candidate_id}>{item.candidate_name} </option>\n    });\n\n    let data = []\n\n    let totalAmount = 0;\n    const scores = props.race.first_scores[props.race.first_scores.length - 1]\n\n    for (const group of groups) {\n        let groupScore = 0;\n        for (const candidate of group.candidates) {\n            if (scores !== undefined)\n                groupScore += scores[candidate.candidate_id]\n        }\n        if (groupScore > 0) {\n            data.push({\n                \"id\": group.title,\n                \"label\": group.title,\n                \"value\": groupScore,\n                \"color\": group.color,\n            });\n\n            totalAmount += groupScore;\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <Row>\n                <Col>\n                    <Button style={{}} onClick={addGroup}>Add Group</Button>\n                </Col>\n                <Col style={{ flexDirection: \"row\" }}>\n                    {group_buttons}\n                </Col>\n            </Row>\n            <Row style={{ width: size.width, height: \"50vw\" }}>\n                <CustomGraph style={{ margin: '5%' }} totalAmount={totalAmount} data={data} groups={groups} />\n            </Row>\n\n            <Modal size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Editing {title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onKeyPress={onKeyPress}>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Group Name</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control style={{\n                                    width: '32vw'\n                                }}\n                                    type=\"text\"\n                                    value={editTitle}\n                                    onChange={handleEditChange} />\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Candidates</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control as=\"select\" value={selectedCandidates}\n                                    onChange={handleSelectedChange} style={{\n                                        width: '32vw'\n                                    }} multiple>\n                                    {candidate_options}\n                                </Form.Control>\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Group Color</Form.Label>\n                            </Col>\n                            <Col>\n                                <div style={{\n                                    padding: '1vw',\n                                    background: '#fff',\n                                    borderRadius: '5px',\n                                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                                    display: 'inline-block',\n                                    cursor: 'pointer',\n                                }}\n                                    onClick={handleColorPickerClicked}>\n                                    <div style={{\n                                        width: '30vw',\n                                        height: '2vw',\n                                        borderRadius: '2px',\n                                        backgroundColor: color,\n                                    }} />\n                                </div>\n                                {displayColorPicker ? <div style={{\n                                    position: 'absolute',\n                                    zIndex: '2',\n                                }}>\n                                    <div style={{\n                                        position: 'fixed',\n                                        top: '0px',\n                                        right: '0px',\n                                        bottom: '0px',\n                                        left: '0px',\n                                    }} onClick={handleColorPickerClosed} />\n                                    <SketchPicker color={color} onChangeComplete={changeColor} />\n                                </div> : null}\n                            </Col>\n                        </Row>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" style={{}} onClick={handleDelete}>\n                        Delete\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => handleClose(false)}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => handleClose(true)}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div >\n    );\n}\n\nexport default CustomFirstPie;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nimport { find_party_by_name } from '../../../Data_Models/Util';\n\nfunction FirstChoicePie(props) {\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const ballot of race.ballots) {\n            if (ballot.candidates[0].candidate_party.party_name === party.party_name)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(props.parties,item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(props.parties, bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <h1> First Vote Pie by Party </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default FirstChoicePie;\n","import { CandidateState } from \"./Candidate\";\n\nexport class Round {\n    constructor(round_number, quota) {\n        this.round_number = round_number;\n        this.quota = quota;\n        this.state = RoundState.RUNNING;\n\n        this.candidates = []\n\n        this.elected_candidates = []\n        this.active_candidates = []\n        this.start_inactive_candidates = []\n        this.start_active_candidates = []\n        this.eliminated_candidates = []\n\n        this.ballots = { exhausted: 0 }\n        this.ballotsToTransfer = {}\n        this.candidate_ballots = { exhausted: [] }\n        this.candidate_real_scores = {}\n        this.candidate_scores = { exhausted: 0 }\n        this.rankings = {};\n    }\n\n    add_ballot = (ballot, value) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        if (this.ballots[ballot.ballot_id] !== undefined)\n            throw new Error(\"Already added Ballot\");\n\n        let candidate = this.find_next_active_candidate(ballot.candidates);\n        if (candidate !== \"exhausted\") {\n            this.candidate_ballots[candidate.candidate_id].push(ballot);\n            this.candidate_scores[candidate.candidate_id] += value;\n        } else {\n            this.candidate_ballots[candidate].push(ballot);\n            this.candidate_scores[candidate] += value;\n        }\n        this.ballots[ballot.ballot_id] = value;\n    }\n\n    find_next_active_candidate = (candidates) => {\n        for (const candidate of candidates)\n            if (this.active_candidates.includes(candidate))\n                return candidate\n        return \"exhausted\";\n    }\n\n    add_candidate = (candidate, state) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        this.candidates.push(candidate);\n        if (state === CandidateState.ELECTED) {\n            this.elected_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        } else if (state === CandidateState.RUNNING) {\n            this.active_candidates.push(candidate);\n            this.start_active_candidates.push(candidate);\n        } else {\n            this.eliminated_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        }\n\n        this.candidate_ballots[candidate.candidate_id] = [];\n        this.candidate_scores[candidate.candidate_id] = 0;\n    }\n\n    set_elected_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.elected_candidates.push(candidate);\n    }\n\n    set_eliminate_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.eliminated_candidates.push(candidate);\n    }\n\n    candidate_ballot = (candidate) => {\n        if (candidate === null)\n            candidate = \"exhausted\";\n        else if (candidate.candidate_id !== undefined)\n            candidate = candidate.candidate_id;\n\n        let ballots = [];\n        for (const ballot of this.candidate_ballots[candidate]) {\n            ballots.push([ballot, this.ballots[ballot.ballot_id]]);\n        }\n        return ballots;\n    }\n\n    candidate_score = (candidate) => {\n        if (candidate.candidate_id !== undefined)\n            return this.candidate_scores[candidate.candidate_id];\n        return this.candidate_scores[candidate];\n    }\n\n    complete = () => {\n        const isCandidateElected = (candidate_id) => {\n            for (const candidate in this.elected_candidates) {\n                if (candidate_id === this.elected_candidates[candidate].candidate_id) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this.candidate_real_scores = { ...this.candidate_scores }\n        for (const candidate_id in this.candidate_real_scores) {\n            if (this.candidate_real_scores[candidate_id] === 0 && isCandidateElected(candidate_id)) {\n                this.candidate_real_scores[candidate_id] = this.quota;\n            }\n        }\n\n        this.state = RoundState.COMPLETE;\n    }\n}\n\nexport const RoundState = {\n    RUNNING: \"RUNNING\",\n    COMPLETE: \"COMPLETE\"\n};","\nimport { Round, RoundState } from './Round';\nimport { CandidateState } from './Candidate';\n\nexport class Race {\n\n    constructor(race_id, race_name, seats, dropped_candidates = []) {\n        this.race_id = race_id\n        this.race_name = race_name\n        this.seats = Number(seats)\n\n        this.rounds = [];\n\n        this.state = RaceState.ADDING;\n\n        // Candidates\n        this.candidates = []\n        this.inactive_candidates = dropped_candidates;\n\n        this.ballots = []\n        this.inactive_ballots = []\n\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        this.first_scores = []\n\n        // Planning Candidates\n        this.planned_inactive_candidates = []\n        this.planned_active_candidates = []\n\n        // Set Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n    }\n\n    add_candidate = (candidate, dropped = false) => {\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Candidates While Running\");\n\n        for (const current_candidate of this.inactive_candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n\n\n        if (dropped) {\n            this.inactive_candidates.push(candidate)\n            this.excused[candidate.candidate_id] = [0]\n            return\n        }\n\n        for (const current_candidate of this.candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n    }\n\n    add_ballot = (ballot) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Ballots While Running\");\n\n        if (find_next_active_candidate(ballot.candidates) === null) {\n            this.inactive_ballots.push(ballot)\n            return;\n        }\n        for (let i = 0; i < this.ballots.length; i++)\n            if (this.ballots[i].ballot_id === ballot.ballot_id)\n                return;\n        this.ballots.push(ballot);\n    }\n\n    reset_race = () => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state === RaceState.ADDING)\n            return;\n\n        this.state = RaceState.ADDING;\n        this.rounds = []\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        // Set Candidates Correctely\n        for (const candidate of this.planned_inactive_candidates) {\n            this.inactive_candidates.push(candidate)\n            this.candidates = this.candidates.filter((value) => {\n                return value !== candidate\n            });\n        }\n\n        for (const candidate of this.planned_active_candidates) {\n            this.candidates.push(candidate)\n            this.inactive_candidates = this.inactive_candidates.filter((value) => {\n                return value !== candidate\n            });\n        }\n\n        // Reset Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n        this.first_scores = []\n\n        // Set Candidate States according to candidates\n        for (const candidate of this.candidates) {\n            this.running[candidate.candidate_id] = [0, this.running.length];\n        }\n\n        for (const candidate of this.inactive_candidates) {\n            this.excused[candidate.candidate_id] = [0]\n        }\n\n        // Lastly, Reset the Ballots\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n\n        for (const ballot of this.inactive_ballots) {\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n        console.log(\"Race Reset: \", this.race_name)\n\n    }\n\n    excuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n\n        // Check if Excused Already Excused\n        for (const current_candidate of this.inactive_candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        if (this.state !== RaceState.ADDING) {\n            this.planned_inactive_candidates.push(candidate)\n            return;\n        }\n\n        delete this.elected[candidate.candidate_id];\n        delete this.running[candidate.candidate_id];\n        delete this.transferring[candidate.candidate_id];\n        delete this.transfered[candidate.candidate_id];\n\n        this.candidates = this.candidates.filter((value) => {\n            return value !== candidate\n        });\n\n\n        this.inactive_candidates.push(candidate)\n        this.excused[candidate.candidate_id] = [0]\n\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n    }\n\n    unexcuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n\n        // Check if Already Not Excused\n        for (const current_candidate of this.candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        if (this.state !== RaceState.ADDING) {\n\n            // Check if excused in planned inactive\n            for (const current_candidate of this.planned_inactive_candidates) {\n                if (current_candidate.candidate_id === candidate.candidate_id) {\n                    this.inactive_candidates = this.inactive_candidates.filter((value) => {\n                        return value !== candidate\n                    });\n                    return;\n                }\n            }\n\n            this.planned_active_candidates.push(candidate)\n            return;\n        }\n\n        delete this.excused[candidate.candidate_id];\n        this.inactive_candidates = this.inactive_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n\n        for (const ballot of this.inactive_ballots)\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n    }\n\n    num_candidates = () => {\n        return this.candidates.length;\n    }\n\n    quota = () => {\n        if (this.state === RaceState.ADDING)\n            throw new Error(\"Can't Get Quota While Adding Ballots\");\n        return Math.floor(this.ballots.length / (this.seats + 1)) + 1;\n    }\n\n    currentScores = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let scores = [];\n        for (const candidate in this.elected) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.elected[candidate][0],\n            });\n        }\n        for (const candidate in this.running) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.running[candidate][0],\n            });\n        }\n        for (const candidate in this.transferring) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transferring[candidate][0],\n            });\n        }\n        for (const candidate in this.transfered) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transfered[candidate][0],\n            });\n        }\n        for (const candidate in this.inactive_candidates) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: 0,\n            });\n        }\n        return scores;\n    }\n\n    candidateTable = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let quota = 0;\n        if (this.state !== RaceState.ADDING)\n            quota = this.quota();\n\n        let candidateTable = []\n        // Candidate, Status, Position, Score\n\n        for (const candidate in this.elected) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.ELECTED,\n                position: this.elected[candidate][1],\n                score: this.elected[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.running) {\n            if (this.state === RaceState.ADDING) {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: candidateTable.length,\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            } else {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: this.running[candidate][1],\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            }\n        }\n        for (const candidate in this.transferring) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERRING,\n                position: this.transferring[candidate][1],\n                score: this.transferring[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.transfered) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERED,\n                position: this.transfered[candidate][1],\n                score: this.transfered[candidate][0],\n                quota: quota,\n            });\n        }\n\n        for (const candidate in this.excused) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.EXCUSED,\n                position: this.candidates.length,\n                score: 0,\n                quota: quota,\n            });\n        }\n        return candidateTable;\n    }\n\n    start_tabulation = () => {\n        if (this.state === RaceState.ADDING)\n            this.state = RaceState.TABULATING;\n    }\n\n    run_race_step = () => {\n        const begin_race = () => {\n            console.log(\"Beginning Race for\", this.race_name);\n            console.log(\"Total Voters is: \" + this.ballots.length + \" , for \" + this.seats + \" seats.\")\n            console.log(\"Quota is\", this.quota())\n            if (this.ballots.length === 0) {\n                this.state = RaceState.COMPLETE;\n                console.log(\"No Ballots Cast in Race\");\n            }\n            else {\n                let round = new Round(0, this.quota());\n\n                for (let i = 0; i < this.candidates.length; i++) {\n                    round.add_candidate(this.candidates[i], CandidateState.RUNNING);\n                }\n\n\n                for (let i = 0; i < this.ballots.length; i++) {\n                    this.ballots_to_apply.push([this.ballots[i], 1]);\n                }\n                this.rounds.push(round);\n            }\n        }\n\n        const add_round = () => {\n            const find_candidate_by_id = (id) => {\n                for (const candidate of this.candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                for (const candidate of this.inactive_candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                return null;\n            }\n            console.log(\"Starting Round\", this.rounds.length);\n            let round = new Round(this.rounds.length, this.quota());\n            let previousRound = this.rounds[this.rounds.length - 1];\n\n            for (const candidate in this.elected) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.ELECTED);\n            }\n            for (const candidate in this.running) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.RUNNING);\n                for (const ballot of previousRound.candidate_ballot(candidate)) {\n                    round.add_ballot(ballot[0], ballot[1]);\n                }\n            }\n            for (const candidate in this.transferring) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERRING);\n            }\n            for (const candidate in this.transfered) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERED);\n            }\n            for (const candidate in this.excused) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.EXCUSED);\n            }\n\n            for (const ballot of previousRound.candidate_ballot(null)) {\n                round.add_ballot(ballot[0], ballot[1]);\n            }\n\n            this.rounds.push(round);\n        }\n\n        const elect_candidate = (candidate, score, currentRound) => {\n            console.log(\"Electing Candidate: \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_elected_candidate(candidate);\n\n            this.elected[candidate.candidate_id] = [score, Object.keys(this.elected).length];\n            delete this.running[candidate.candidate_id];\n\n            const surplus = score - this.quota();\n\n            let transfer_value = 1;\n            if (surplus > 0) {\n                transfer_value = surplus / score;\n            }\n\n            for (const ballot of currentRound.candidate_ballot(candidate)) {\n                this.ballots_to_apply.push([ballot[0], ballot[1] * transfer_value]);\n            }\n        }\n\n        const transfer_candidate = (candidate, score, currentRound) => {\n            console.log(\"Transferring Candidate \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_eliminate_candidate(candidate);\n\n            this.transferring[candidate.candidate_id] = [score, Object.keys(this.elected).length + Object.keys(this.running).length - 1];\n            delete this.running[candidate.candidate_id];\n\n            for (const ballot of currentRound.candidate_ballot(candidate))\n                this.ballots_to_apply.push(ballot)\n        }\n\n        const complete_round = (currentRound) => {\n            console.log(\"Completed Round\", currentRound.round_number);\n            currentRound.complete();\n\n            if (currentRound.active_candidates.length === 0) {\n                console.log(\"Race Complete\");\n                for (const candidate in this.transferring) {\n                    this.transfered[candidate] = this.transferring[candidate];\n                    delete this.transferring[candidate]\n                }\n                console.log(this.rounds);\n                this.state = RaceState.COMPLETE;\n            }\n        }\n\n        if (this.state === RaceState.COMPLETE)\n            return;\n        this.state = RaceState.TABULATING;\n\n        if (this.rounds.length === 0) {\n            begin_race();\n            return;\n        }\n\n        let currentRound = this.rounds[this.rounds.length - 1];\n        if (currentRound.state === RoundState.COMPLETE) {\n            add_round();\n            return;\n        }\n\n        if (this.ballots_to_apply.length > 0) {\n            let ballot = this.ballots_to_apply.shift();\n            currentRound.add_ballot(ballot[0], ballot[1]);\n\n            if (this.rounds.length === 1) {\n                const find_next_active_candidate = (candidates) => {\n                    for (const candidate of candidates)\n                        if (this.candidates.includes(candidate))\n                            return candidate\n                    return null;\n                }\n\n                for (let i = 0; i < ballot[0].candidates.length; i++) {\n                    const candidate = ballot[0].candidates[i];\n                    if (this.candidate_ballot_rankings[candidate] === undefined)\n                        this.candidate_ballot_rankings[candidate] = [];\n                    while (this.candidate_ballot_rankings[candidate].length < i + 1)\n                        this.candidate_ballot_rankings[candidate].push(0);\n                    this.candidate_ballot_rankings[candidate][i] += 1\n                }\n\n                let first_round_score = {};\n                if (this.first_scores.length !== 0) {\n                    first_round_score = { ...this.first_scores[this.first_scores.length - 1] };\n                }\n                let candidate = find_next_active_candidate(ballot[0].candidates)\n                if (candidate !== null) {\n                    if (candidate.candidate_id in first_round_score)\n                        first_round_score[candidate.candidate_id] += 1;\n                    else\n                        first_round_score[candidate.candidate_id] = 1;\n                    this.first_scores.push(first_round_score);\n                }\n            }\n\n            let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n                if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                    return -1;\n                } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                    return 1;\n                }\n                return 0;\n            });\n\n            for (let i = 0; i < activeCandidates.length; i++) {\n                this.running[activeCandidates[i].candidate_id] = [currentRound.candidate_score(activeCandidates[i]), Object.keys(this.elected).length + i];\n            }\n\n            return;\n        }\n\n        for (const candidate in this.transferring) {\n            this.transfered[candidate] = this.transferring[candidate];\n            delete this.transferring[candidate]\n        }\n\n        let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n            if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                return -1;\n            } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let roundElected = [];\n        let maxElected = this.seats - Object.keys(this.elected).length;\n\n        if (activeCandidates.length <= maxElected) {\n            for (const candidate of activeCandidates) {\n                if (currentRound.elected_candidates) {\n                    roundElected.push(candidate);\n                }\n            }\n        } else {\n            for (const candidate of activeCandidates) {\n                if (currentRound.candidate_score(candidate) >= this.quota()) {\n                    roundElected.push(candidate);\n                }\n            }\n        }\n\n        for (const candidate of roundElected) {\n            elect_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n        }\n\n        let roundTransfer = [];\n        if (Object.keys(this.elected).length === this.seats) {\n            for (const candidate of activeCandidates.reverse()) {\n                roundTransfer.push(candidate);\n            }\n        } else if (roundElected.length === 0) {\n            roundTransfer.push(activeCandidates[activeCandidates.length - 1]);\n        }\n\n        for (const candidate of roundTransfer) {\n            if (!currentRound.elected_candidates.includes(candidate)) {\n                transfer_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n            }\n        }\n\n        complete_round(currentRound);\n    }\n};\n\nexport const RaceState = {\n    ADDING: \"ADDING\",\n    TABULATING: \"TABULATING\",\n    COMPLETE: \"COMPLETE\"\n};","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { RaceState } from '../../../Data_Models/Race';\n\nfunction PartyPercentage(props) {\n    const find_candidate_by_id = (race, id) => {\n        for (const candidate of race.candidates)\n            if (candidate.candidate_id === id)\n                return candidate;\n        return null;\n    }\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const candidate in race.elected) {\n            if (find_candidate_by_id(race, candidate).candidate_party === party)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    // Wait until a candidate is actually elected to display\n    if (Object.entries(props.race.elected).length === 0 && props.race.elected.constructor === Object)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidates Elected By Party </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n\n    const get_ranked_choices = (race) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item]\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n\n\n    return (\n        <div style={props.style}>\n            <h1> Number of Candidates Ranked </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar'\n\nfunction CandidatesRanked(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            if (ballot.candidates[0].candidate_party.party_name !== party.party_name)\n                continue;\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = {};\n    let keys = []\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n        keys.push(party.party_name);\n    }\n\n    let data = [];\n\n    for (let i = 1; i < maxChoices + 1; i++) {\n        let data_to_add = { index: i };\n        for (const item in choices) {\n            if (i in choices[item]) {\n                data_to_add[item] = choices[item][i];\n                data_to_add[item + \"Color\"] = choices[item][i];\n            }\n        }\n        data.push(data_to_add);\n    }\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <h1> Number of Candidates Ranked </h1>\n            <ResponsiveBarCanvas\n                data={data}\n                keys={keys}\n                indexBy=\"index\"\n                margin={{ top: 40, right: 40, bottom: 40, left: 60 }}\n                pixelRatio={2}\n                padding={0.05}\n                innerPadding={0}\n                minValue=\"auto\"\n                maxValue=\"auto\"\n                groupMode=\"stacked\"\n                layout=\"vertical\"\n                reverse={false}\n                colors={getColor}\n                colorBy=\"id\"\n                borderWidth={0}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '# of Candidates Ranked',\n                    legendPosition: 'middle',\n                    legendOffset: 30\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '# of Voters',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                enableGridX={false}\n                enableGridY={true}\n                enableLabel={false}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                isInteractive={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\nimport { RaceState } from '../../../Data_Models/Race';\n\n\nfunction PartyPercentage(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            for (let i = 0; i < ballot.candidates.length; i++) {\n                maxchoices = Math.max(i, maxchoices);\n                if (ballot.candidates[i].candidate_party.party_name === party.party_name)\n                    if (i in ranked_choices)\n                        ranked_choices[i] += 1;\n                    else\n                        ranked_choices[i] = 1;\n            }\n        }\n        return ranked_choices;\n    }\n    let maxchoices = 0;\n    let choices = {};\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    for (const item in choices) {\n        let datapoints = [];\n        for (let i = 1; i < maxchoices + 1; i++) {\n            if (i in choices[item])\n                datapoints.push({ x: i, y: choices[item][i - 1] })\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { RaceState } from '../../../Data_Models/Race';\n\nfunction CandidatesRanked(props) {\n\n    const get_first_elected = (ballot, elected) => {\n        for (let i = 0; i < ballot.candidates.length; i++) {\n            for (const candidate in elected) {\n                if (candidate === ballot.candidates[i].candidate_id) {\n                    return i + 1\n                }\n            }\n        }\n        return \"Exhausted\"\n    }\n\n    const get_ranked_choices = (race) => {\n        let ranked_choices = {};\n        for (const ballot of race.ballots) {\n            maxChoices = Math.max(ballot.candidates.length, maxChoices);\n        }\n\n        for (let i = 1; i < maxChoices + 1; i++) {\n            ranked_choices[i] = 0\n        }\n        ranked_choices[\"Exhausted\"] = 0\n\n        for (const ballot of race.ballots) {\n            ranked_choices[get_first_elected(ballot, race.elected)] += 1;\n        }\n\n        return ranked_choices\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        if (choices[item] > 0) {\n            data.push({\n                \"id\": item,\n                \"label\": item,\n                \"value\": choices[item]\n            });\n            totalAmount += choices[item];\n        }\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    if (Object.entries(props.race.elected).length === 0 && props.race.elected.constructor === Object)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Voter Satisfaction </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLineCanvas } from '@nivo/line'\nimport { RaceState } from '../../../Data_Models/Race';\n\nfunction VoteOverTime(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const find_candidate_by_id = (candidate_id) => {\n        for (let i = 0; i < props.race.candidates.length; i++)\n            if (String(props.race.candidates[i].candidate_id) === candidate_id)\n                return props.race.candidates[i];\n        return null;\n    };\n\n    let choices_over_time = {};\n    for (const party of props.parties) {\n        choices_over_time[party.party_name] = [];\n    }\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 100);\n\n    for (let i = 0; i < props.race.first_scores.length; i += 1) {\n        const score_chart = props.race.first_scores[i];\n\n        let choices = {}\n        for (const party of props.parties) {\n            choices[party.party_name] = 0;\n        }\n\n        for (const candidate_id in score_chart) {\n            const candidate = find_candidate_by_id(candidate_id);\n            choices[candidate.candidate_party.party_name] += score_chart[candidate_id];\n        }\n\n        for (const party of props.parties) {\n            choices_over_time[party.party_name] = [...choices_over_time[party.party_name], choices[party.party_name]];\n        }\n    }\n\n    let data = [];\n    for (const item in choices_over_time) {\n        let datapoints = [];\n        for (let i = 0; i < choices_over_time[item].length; i++) {\n            if (choices_over_time[item][i] !== 0) {\n                datapoints.push({ x: (i * 1), y: ((choices_over_time[item][i]) / ((i + 1) * 1) * 100) })\n            }\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Party Vote Over Time </h1>\n            <ResponsiveLineCanvas\n                data={data}\n                margin={{ top: 50, right: 160, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear' }}\n                xFormat={',.2r'}\n                yScale={{ type: 'linear', stacked: false, min: 0, max: 100 }}\n                yFormat={',.2r'}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    tickValues: 5,\n                    legend: 'Votes',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Percentage',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                enableGridX={false}\n                colors={getColor}\n                lineWidth={1}\n                enablePoints={false}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTime;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\nimport { RaceState } from '../../../Data_Models/Race';\n\n\nfunction VoteOverTimeBump(props) {\n    const indexOfMax = (arr) => {\n        if (arr.length === 0) {\n            return -1;\n        }\n        var max = arr[0];\n        var maxIndex = 0;\n        for (var i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                maxIndex = i;\n                max = arr[i];\n            }\n        }\n\n        return maxIndex;\n    }\n\n\n    let choices_over_time = [];\n\n    if (props.race.first_scores.length <= 1)\n        return (<div></div>);\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 50);\n\n    for (let i = 0; i < props.race.first_scores.length; i += increment) {\n        const score_chart = props.race.first_scores[i]\n\n        let candidate_positions = {};\n        let candidates = []\n        let scores = []\n        for (const candidate of props.race.candidates) {\n            candidates.push(candidate);\n            if (candidate.candidate_id in score_chart)\n                scores.push(score_chart[candidate.candidate_id]);\n            else\n                scores.push(0);\n        }\n\n        let position = 1;\n        while (scores.length > 0) {\n            let i = indexOfMax(scores);\n            scores.splice(i, 1);\n            candidate_positions[candidates[i].candidate_id] = position;\n            candidates.splice(i, 1);\n            position++;\n        }\n        choices_over_time.push(candidate_positions);\n    }\n\n\n    let data = [];\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (let i = 0; i < choices_over_time.length; i++) {\n            datapoint.push({ x: (i + 1) * increment, y: choices_over_time[i][candidate.candidate_id] });\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n    const getCandidateByName = (name) => {\n        for (const candidate of props.race.candidates) {\n            if (candidate.candidate_name === name)\n                return candidate;\n        }\n        return null;\n    }\n\n    const getColor = (bar) => {\n        return getCandidateByName(bar.id).candidate_color\n    }\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidate Rank Over Time </h1>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={getColor}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 90,\n                    tickValues: 5,\n                    format: \".2s\",\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTimeBump;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\nimport { RaceState } from '../../../Data_Models/Race';\n\n\nfunction RoundCandidateBump(props) {\n\n    if (props.race.rounds.length <= 1)\n        return (<div></div>);\n\n    let data = []\n\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (const round of props.race.rounds) {\n            if (round.elected_candidates.includes(candidate)) {\n                datapoint.push({ x: round.round_number + 1, y: props.race.elected[candidate.candidate_id][1] + 1 });\n            } else if (round.eliminated_candidates.includes(candidate)) {\n                if (candidate.candidate_id in props.race.transferring)\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transferring[candidate.candidate_id][1] + 1 });\n                else\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transfered[candidate.candidate_id][1] + 1 });\n            } else {\n                let active_candidates = round.active_candidates.sort((x, y) => {\n                    if (round.candidate_score(x) > round.candidate_score(y)) {\n                        return -1;\n                    } else if (round.candidate_score(y) > round.candidate_score(x)) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                datapoint.push({ x: round.round_number + 1, y: active_candidates.indexOf(candidate) + round.elected_candidates.length + 1 });\n            }\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n    const getCandidateByName = (name) => {\n        for (const candidate of props.race.candidates) {\n            if (candidate.candidate_name === name)\n                return candidate;\n        }\n        return null;\n    }\n\n    const getColor = (bar) => {\n        return getCandidateByName(bar.id).candidate_color\n    }\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidate Rank By Round </h1>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={getColor}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                pointColor={{ theme: 'background' }}\n                pointBorderWidth={3}\n                activePointBorderWidth={3}\n                pointBorderColor={{ from: 'serie.color' }}\n                axisTop={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: -36\n                }}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default RoundCandidateBump;\n","\nexport class Voter {\n    constructor(voter_id) {\n        this.voter_id = voter_id;\n\n        // Format\n        // {id: Ballot}\n        this.races = {};\n    }\n\n    participating_races = () => {\n        return Object.keys(this.races);\n    }\n\n    participating_in_race = (race_id) => {\n        return race_id in this.races;\n    }\n\n    get_ballot_for_race = (race_id) => {\n        if (race_id in this.races) {\n            if (this.races[race_id].length === 1)\n                return this.races[race_id][0]\n            return this.races[race_id];\n        }\n        return null;\n    }\n\n    add_ballot = (race_id, ballot) => {\n        if (ballot.candidates.length > 0) {\n            if (race_id in this.races) {\n                this.races[race_id] = [...this.races[race_id], ballot]\n            } else {\n                this.races[race_id] = [ballot];\n            }\n        }\n    }\n}","\nexport class Ballot {\n    constructor(ballot_id, candidates) {\n        this.ballot_id = ballot_id;\n        this.candidates = candidates;\n    }\n}","\nexport class Party {\n    constructor(party_name, party_color) {\n        this.party_name = party_name;\n\n        if (!this.isValidColor(party_color)) {\n            party_color = \"#\" + party_color\n            if (!this.isValidColor(party_color)) {\n                console.log(\"Error Color Isn't Valid\", party_color)\n                party_color = \"#FFFFFF\"\n            }\n        }\n        this.party_color = party_color;\n    }\n\n    isValidColor = (color) => {\n        var s = new Option().style;\n        s.color = color;\n        return s.color !== '';\n    }\n}","import React from 'react';\n\nimport { ResponsiveSankey } from '@nivo/sankey'\n\nfunction Sankey(props) {\n\n    const GenerateData = (race) => {\n        const find_candidate_by_id = (candidate_id) => {\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n            return null;\n        };\n\n        const find_next_active_candidate = (candidates, active_candidates) => {\n            for (const candidate in candidates) {\n                for (const active_candidate in active_candidates) {\n                    if (candidates[candidate].candidate_id === active_candidates[active_candidate].candidate_id) {\n                        return candidates[candidate];\n                    }\n                }\n            }\n            return \"exhausted\";\n        }\n\n        const prev_round = (round) => {\n            return race.rounds[round.round_number - 1];\n        }\n\n        let data = { nodes: [{ id: \"Total Votes\", name: \"Total Votes\", color: \"#000000\" }, { id: \"Elected\", name: \"Elected\", color: \"#01A039\" }, { id: \"Exhausted\", name: \"Exhausted\", color: \"#FF0000\" }], links: [] }\n        for (const round_number in race.rounds) {\n            const round = race.rounds[round_number];\n            for (const candidate of round.start_active_candidates) {\n                data[\"nodes\"].push({ id: candidate.candidate_name + \" \" + round_number, name: candidate.candidate_name, color: candidate.candidate_party.party_color });\n            }\n            if (round.round_number === 0) {\n                // First Round so Count Vote Totals\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: \"Total Votes\", target: candidate.candidate_name + \" \" + round.round_number, value: round.candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n            } else {\n                // First add links from prior rounds\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: candidate.candidate_name + \" \" + round.round_number, value: prev_round(round).candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    // Check if elected this round and add link if elected\n\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n\n                // Then add links from eliminated or elected candidates\n                for (const candidate_id in prev_round(round).ballotsToTransfer) {\n                    const candidate = find_candidate_by_id(candidate_id);\n\n                    // Find candidates that it will transfer to\n                    let transfer_candidates_ballot = {};\n\n                    let candidate_ballots = prev_round(round).ballotsToTransfer[candidate_id];\n                    for (const ballot in candidate_ballots) {\n                        const next_candidate = find_next_active_candidate(candidate_ballots[ballot].candidates, round.start_active_candidates);\n                        if (next_candidate !== \"exhausted\") {\n                            if (next_candidate.candidate_id in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate.candidate_id].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate.candidate_id] = [candidate_ballots[ballot]];\n                        } else {\n                            if (next_candidate in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate] = [candidate_ballots[ballot]];\n                        }\n                    }\n\n\n                    for (const transfer_candidate_id in transfer_candidates_ballot) {\n                        if (transfer_candidate_id !== \"exhausted\") {\n                            const transfer_candidate = find_candidate_by_id(transfer_candidate_id);\n\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: transfer_candidate.candidate_name + \" \" + round.round_number, value: value };\n                            data['links'].push(link);\n                        }\n                        else {\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: \"Exhausted\", value: value };\n                            data['links'].push(link);\n                        }\n                    }\n                }\n            }\n            if (round.round_number === race.rounds.length - 1) {\n                for (const candidate of round.start_active_candidates) {\n                    if (round.elected_candidates.includes(candidate)) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                    else {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Exhausted\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                }\n            }\n        }\n        return data;\n    }\n\n    if (props.race.rounds.length === 0)\n        return (<h1>Loading</h1>)\n\n\n    const data = GenerateData(props.race);\n\n    const getColor = (bar) => {\n        return bar.color\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsiveSankey\n                data={data}\n                margin={{ top: 100, right: 40, bottom: 100, left: 40 }}\n                layout=\"vertical\"\n                align=\"justify\"\n                sort=\"ascending\"\n                colors={getColor}\n                nodeTooltip={node => <span> {node.name}: {Math.round(node.value)}</span>}\n                nodeOpacity={1}\n                nodeThickness={10}\n                nodeInnerPadding={3}\n                nodeSpacing={10}\n                nodeBorderWidth={0}\n                nodeBorderColor={{ from: 'color', modifiers: [['darker', 0.8]] }}\n                linkOpacity={0.4}\n                linkHoverOpacity={0.8}\n                linkHoverOthersOpacity={0.1}\n                enableLinkGradient={true}\n                enableLabels={true}\n                label={node => `${node.name}`}\n                labelPosition=\"outside\"\n                labelOrientation=\"vertical\"\n                labelPadding={16}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default Sankey;","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveHeatMapCanvas } from '@nivo/heatmap'\n\nfunction HeatMap(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [showPercent, setShowPercent] = useState(true);\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let heatData = { candidate: candidate.candidate_name };\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            if (!showPercent)\n                heatData[other_candidate.candidate_name] = sum;\n            else\n                heatData[other_candidate.candidate_name] = Math.round((sum / ballots.length) * 100);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(heatData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveHeatMapCanvas\n                    data={data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    tooltipFormat={\".0%\"}\n                    margin={{ top: 100, right: 60, bottom: 60, left: 60 }}\n                    forceSquare={true}\n                    axisTop={{ orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -90, legend: '', legendOffset: 36 }}\n                    axisRight={null}\n                    axisBottom={null}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    cellOpacity={1}\n                    cellBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.8]] }}\n                    defs={[\n                        {\n                            id: 'lines',\n                            type: 'patternLines',\n                            background: 'inherit',\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            rotation: -45,\n                            lineWidth: 4,\n                            spacing: 7\n                        }\n                    ]}\n                    fill={[{ id: 'lines' }]}\n                    animate={true}\n                    motionStiffness={80}\n                    motionDamping={9}\n                    hoverTarget=\"cell\"\n                    cellHoverOthersOpacity={0.25}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default HeatMap;\n","import React, { useState } from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar';\n\nimport { RaceState } from '../../../Data_Models/Race';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n\nfunction ElectionBar(props) {\n    const get_round_data = (round, active_candidates) => {\n        let round_data = {};\n        for (let i = 0; i < active_candidates.length; i++) {\n            round_data[active_candidates[i].candidate_id] = { position: i, score: round.candidate_score(active_candidates[i]) }\n        }\n        return round_data;\n    }\n\n    const get_candidate_position = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.position;\n            }\n        }\n        return 0;\n    }\n\n    const get_max_score = () => {\n        let max_score = quota;\n        for (const candidate_table of candidateTable) {\n            max_score = Math.max(candidate_table.score, max_score);\n        }\n        return max_score\n    }\n\n    const get_candidate_by_position = (position) => {\n        for (const candidate of props.race.candidates) {\n            if (get_candidate_position(candidate) === position) {\n                return candidate;\n            }\n        }\n        return 0;\n    }\n\n    const final_candidate_score = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.score;\n            }\n        }\n        return 0;\n    }\n\n    const [round, setRound] = useState(1);\n    const candidateTable = props.race.candidateTable();\n\n    if (props.race.rounds === 0 || props.race.state === RaceState.ADDING)\n        return <h1> Loading... </h1>\n\n    let quota = props.race.quota();\n\n    let data_active_candidates = [];\n    // Get Candidates to Display\n    let round_active_candidates = props.race.rounds[round - 1].active_candidates;\n    for (let i = 0; i < round; i++) {\n        data_active_candidates.push(get_round_data(props.race.rounds[i],\n            round_active_candidates));\n    }\n\n    let keys = [\"elected\", \"transferred\"]\n    let chart_data = [];\n\n    for (let i = 0; i < props.race.rounds[round - 1].candidates.length; i++) {\n        const candidate = get_candidate_by_position(i);\n        if (round_active_candidates.includes(candidate)) {\n            let data = { candidate: candidate.candidate_name };\n            for (let i = 0; i < round; i++) {\n                let score = data_active_candidates[i][candidate.candidate_id].score;\n                if (i !== 0) {\n                    score -= data_active_candidates[i - 1][candidate.candidate_id].score;\n                }\n                data[\"Round \" + (i + 1)] = score;\n                if (!keys.includes(\"Round \" + (i + 1))) {\n                    keys.push(\"Round \" + (i + 1));\n                }\n            }\n            chart_data.push(data);\n        } else if (props.race.rounds[round - 1].elected_candidates.includes(candidate)) {\n            chart_data.push({ candidate: candidate.candidate_name, elected: props.race.rounds[round - 1].candidate_real_scores[candidate.candidate_id] });\n        } else {\n            chart_data.push({ candidate: candidate.candidate_name, transferred: final_candidate_score(candidate) });\n        }\n    }\n    return (\n        <div style={{ width: '100%', height: '50vw' }}>\n            <div style={{ width: '80%' }}>\n                <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'black', textAlign: 'center', padding: '5% 0 0 0' }}>\n                    Round\n                </label>\n                <div style={{ margin: '0% 5% 0% 5%' }}>\n                    <RangeSlider\n                        min={1}\n                        max={props.race.rounds.length}\n                        step={1}\n                        value={round}\n                        variant=\"secondary\"\n                        onChange={changeEvent => setRound(changeEvent.target.value)}\n                    />\n                </div>\n            </div>\n            <div style={{ width: '100%', height: '50vw' }}>\n                <ResponsiveBarCanvas\n                    data={chart_data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    margin={{ top: 40, right: 40, bottom: 200, left: 60 }}\n                    maxValue={get_max_score()}\n                    pixelRatio={2}\n                    padding={0.05}\n                    innerPadding={0}\n                    groupMode=\"stacked\"\n                    layout=\"vertical\"\n                    reverse={false}\n                    colors={{ scheme: 'nivo' }}\n                    colorBy=\"id\"\n                    borderWidth={0}\n                    borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    axisBottom={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: -60,\n                    }}\n                    axisLeft={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Score',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    enableGridX={false}\n                    enableGridY={true}\n                    enableLabel={false}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    isInteractive={true}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ElectionBar;\n","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveChordCanvas } from '@nivo/chord'\n\nfunction Chord(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let chordData = [];\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            chordData.push(sum);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(chordData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <div>\n                <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                    {yButtons}\n                </DropdownButton>\n\n                <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                    {xButtons}\n                </DropdownButton>\n            </div>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveChordCanvas\n                    matrix={data}\n                    keys={keys}\n                    margin={{ top: 60, right: 200, bottom: 60, left: 60 }}\n                    valueFormat=\".2f\"\n                    pixelRatio={2}\n                    padAngle={0.006}\n                    innerRadiusRatio={0.86}\n                    innerRadiusOffset={0}\n                    arcOpacity={1}\n                    arcBorderWidth={1}\n                    arcBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    ribbonOpacity={0.5}\n                    ribbonBorderWidth={0}\n                    ribbonBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    enableLabel={true}\n                    label=\"id\"\n                    labelOffset={9}\n                    labelRotation={-90}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                    colors={{ scheme: 'category10' }}\n                    isInteractive={true}\n                    arcHoverOpacity={1}\n                    arcHoverOthersOpacity={0.4}\n                    ribbonHoverOpacity={0.75}\n                    ribbonHoverOthersOpacity={0.15}\n                    legends={[\n                        {\n                            anchor: 'right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 120,\n                            translateY: 0,\n                            itemWidth: 80,\n                            itemHeight: 11,\n                            itemsSpacing: 0,\n                            itemTextColor: '#999',\n                            itemDirection: 'left-to-right',\n                            symbolSize: 12,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemTextColor: '#000'\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chord;\n","import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport uuid from 'react-uuid'\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport useInterval from '../Hooks/useInterval';\nimport CandidateList from './Race/CandidateList';\n\nimport ElectionSettings from './Settings';\n\nimport CustomFirstPie from './CustomFirstPie'\n\nimport FirstChoicePie from './Models/FirstChoicePie';\nimport ElectedCandidatesPie from './Models/ElectedCandidatesPie';\nimport CandidatesRankedPie from './Models/CandidatesRankedPie';\nimport CandidatesRanked from './Models/CandidatesRanked';\nimport PartyPercentage from './Models/PartyPercentage';\nimport EventualWinner from './Models/EventualWinner';\nimport VoteOverTime from './Models/VoteOverTime';\nimport VoteOverTimeBump from './Models/VoteOverTimeBump';\nimport RoundCandidateBump from './Models/RoundCandidateBump';\n\nimport { Race, RaceState } from '../../Data_Models/Race';\nimport { Voter } from '../../Data_Models/Voter';\nimport { Ballot } from '../../Data_Models/Ballot';\nimport { Party } from '../../Data_Models/Party';\nimport { Candidate } from '../../Data_Models/Candidate';\n\nimport './ElectionPage.css'\nimport { RoundState } from '../../Data_Models/Round';\nimport NivoSankey from './Models/Sankey';\nimport HeatMap from './Models/HeatMap';\nimport ElectionBar from './Models/ElectionBar';\nimport Chord from './Models/Chord';\n\nfunction ElectionPage(props) {\n\n    // Helper Functions\n    const shadeColor = (color, percent) => {\n\n        var R = parseInt(color.substring(1, 3), 16);\n        var G = parseInt(color.substring(3, 5), 16);\n        var B = parseInt(color.substring(5, 7), 16);\n\n        R = parseInt(R * (100 + percent) / 100);\n        G = parseInt(G * (100 + percent) / 100);\n        B = parseInt(B * (100 + percent) / 100);\n\n        R = (R < 255) ? R : 255;\n        G = (G < 255) ? G : 255;\n        B = (B < 255) ? B : 255;\n\n        var RR = ((R.toString(16).length === 1) ? \"0\" + R.toString(16) : R.toString(16));\n        var GG = ((G.toString(16).length === 1) ? \"0\" + G.toString(16) : G.toString(16));\n        var BB = ((B.toString(16).length === 1) ? \"0\" + B.toString(16) : B.toString(16));\n\n        return \"#\" + RR + GG + BB;\n    }\n\n    const find_race_by_id = (id) => {\n        for (let i = 0; i < races.length; i++) {\n            if (String(races[i].race_id) === id)\n                return races[i];\n        }\n        return null;\n    };\n\n    const find_race_by_name = (name) => {\n        for (let i = 0; i < races.length; i++) {\n            if (races[i].race_name === name)\n                return races[i];\n        }\n        return null;\n    };\n\n    const find_candidate_by_id = (race_id, candidate_id) => {\n        let race = find_race_by_id(race_id);\n        if (race !== null)\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n        return null;\n    };\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < parties.length; i++)\n            if (parties[i].party_name === name)\n                return parties[i];\n        return null\n    };\n\n    const loadParties = (party_data) => {\n        let partiesToAdd = []\n        for (const party of party_data.parties) {\n            for (let i = 0; i < partiesToAdd.length; i++)\n                if (partiesToAdd.party_name === party.party_name)\n                    continue;\n            partiesToAdd.push(new Party(party.party_name, party.party_color));\n        }\n        return partiesToAdd;\n    }\n\n    const loadRaces = (election_configuration) => {\n        let racesToAdd = []\n        for (const race of election_configuration.races) {\n            for (let i = 0; i < racesToAdd.length; i++)\n                if (racesToAdd.race_id === race.race_id)\n                    continue;\n\n            racesToAdd.push(new Race(race.race_id, race.race_position, race.race_max_winners));\n        }\n        return racesToAdd;\n    }\n\n    const loadCandidates = (candidate_data) => {\n        for (let key in candidate_data) {\n            const race = find_race_by_name(key);\n            let candidate_colors = {};\n            if (race === null)\n                continue;\n            for (const candidate of candidate_data[key]) {\n                let party = find_party_by_name(candidate.party);\n                if (party === null) {\n                    party = new Party(candidate.party, \"FFFFFF\");\n                    console.log(\"Adding Party: \", party.party_name);\n                    setParties([...parties, party]);\n                }\n                let color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n\n                if (party.party_name in candidate_colors) {\n                    while (candidate_colors[party.party_name].includes(color))\n                        color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n                    candidate_colors[party.party_name].push(color);\n                }\n                else\n                    candidate_colors[party.party_name] = [color]\n                race.add_candidate(new Candidate(candidate.number, candidate.name, party, color));\n            }\n        }\n        setCandidatesLoaded(true);\n\n        return;\n    }\n\n    const loadVoters = (ballot_data) => {\n        let voters = []\n        for (const item of ballot_data.ballots) {\n            let voter = new Voter(uuid())\n            for (let key in item) {\n                let candidateOrder = []\n                for (let candidate_id of item[key]) {\n                    let candidate = find_candidate_by_id(key, candidate_id);\n                    candidateOrder.push(candidate);\n                };\n\n                const ballot = new Ballot(uuid(), candidateOrder);\n                const race = find_race_by_id(key);\n                if (race !== null) {\n                    race.add_ballot(ballot);\n                }\n                voter.add_ballot(key, ballot);\n            }\n            voters.push(voter);\n        }\n        return voters;\n    }\n\n    const excused_changed = (candidate) => {\n        if (candidates_dropped.includes(candidate)) {\n            setCandidatesDropped(candidates_dropped.filter((value) => {\n                return value !== candidate\n            }));\n        } else {\n            setCandidatesDropped([candidate, ...candidates_dropped])\n        }\n    }\n\n    const [election_configuration, setElectionConfiguration] = useState([]);\n    const [candidate_data, setCandidateData] = useState([]);\n    const [party_data, setPartyData] = useState([]);\n    const [ballot_data, setBallotData] = useState([]);\n\n    const [candidates_dropped, setCandidatesDropped] = useState([]);\n\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [partiesLoaded, setPartiesLoaded] = useState(false);\n    const [racesLoaded, setRacesLoaded] = useState(false);\n    const [candidatesLoaded, setCandidatesLoaded] = useState(false);\n    const [votersLoaded, setVotersLoaded] = useState(false);\n\n    const [parties, setParties] = useState([]);\n    const [races, setRaces] = useState([]);\n    const [voters, setVoters] = useState([]);\n\n    const [activeRace, setActiveRace] = useState(null);\n    const [speed, setSpeed] = useState(1000);\n    const [refresh, setRefresh] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [page, setPage] = useState(0);\n\n    const [model, setModel] = useState(0);\n\n    useEffect(() => {\n        if (!isLoading)\n            setPartiesLoaded(true);\n    }, [parties]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (activeRace === null)\n                setActiveRace(races[0]);\n            setRacesLoaded(true);\n        }\n    }, [races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading)\n            setVotersLoaded(true);\n    }, [voters]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        for (const race of races) {\n            if (race.state !== RaceState.ADDING)\n                continue;\n            for (const candidate of race.inactive_candidates) {\n                race.unexcuse_candidate(candidate);\n            }\n            for (const candidate of candidates_dropped) {\n                if (find_candidate_by_id(race.race_id, candidate.candidate_id) !== null)\n                    race.excuse_candidate(candidate);\n            }\n        }\n        setRefresh(!refresh)\n    }, [candidates_dropped, races]);\n\n    useEffect(() => {\n        const loadData = async () => {\n            if (props.data !== undefined && props.data !== null) {\n                setElectionConfiguration(props.data.election_configuration);\n                setCandidateData(props.data.candidate_data);\n                setPartyData(props.data.parties_data);\n                setBallotData(props.data.ballot_data);\n                setIsLoading(false);\n                return;\n            }\n            let electionId = props.match.params.electionId;\n\n            if (typeof (electionId) === \"undefined\") {\n                electionId = \"uc_berkeley\";\n            }\n\n            let yearId = props.match.params.yearId;\n            if (typeof (yearId) === \"undefined\") {\n                yearId = \"2015\";\n            }\n\n            let databaseString = 'elections/' + electionId + \"/\" + yearId;\n\n            console.log(\"Loading Data From DataBase\");\n            await firebase.database().ref(databaseString).once('value', snapshot => {\n                if (!snapshot.exists()) {\n                    console.log(\"Path Doesn't Exist, Loading Default Reference\");\n                    databaseString = 'elections/uc_berkeley/2015';\n                }\n            });\n\n            firebase.database().ref(databaseString).once('value', snapshot => {\n                setElectionConfiguration(snapshot.child('election_configuration').val());\n                setCandidateData(snapshot.child('candidate_data').val());\n                setPartyData(snapshot.child('parties_data').val());\n                setBallotData(snapshot.child('ballot_data').val());\n                setIsLoading(false);\n            });\n        }\n\n        if (isLoading) {\n            loadData();\n            return;\n        }\n        if (!partiesLoaded) {\n            console.log(\"Loading Parties\")\n            let parties = loadParties(party_data);\n            setParties(parties);\n        }\n\n        if (partiesLoaded && !racesLoaded) {\n            console.log(\"Loading Races\");\n            setRaces(loadRaces(election_configuration));\n            return;\n        }\n\n        if (racesLoaded && !candidatesLoaded) {\n            console.log(\"Loading Candidates\");\n            loadCandidates(candidate_data);\n            return;\n        }\n\n        if (candidatesLoaded && !votersLoaded) {\n            console.log(\"Loading Voters\");\n            setVoters(loadVoters(ballot_data));\n        }\n        if (votersLoaded) {\n            console.log(\"Finished Loading\");\n        }\n\n    }, [isLoading, partiesLoaded, racesLoaded, candidatesLoaded, votersLoaded]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useInterval(() => {\n        if (activeRace.state !== RoundState.COMPLETE && isRunning) {\n            for (let i = 0; i < Math.floor(speed / 10); i++) {\n                activeRace.run_race_step();\n            }\n            setRefresh(!refresh);\n        } else {\n            setIsRunning(false)\n        }\n    }, isRunning ? 100 : null)\n\n    const switchActiveRace = (race) => {\n        setIsRunning(false);\n        setActiveRace(race);\n    }\n\n    const finishRaces = () => {\n        for (const race of races) {\n            while (race.state !== RoundState.COMPLETE) {\n                race.run_race_step();\n            }\n        }\n        setRefresh(!refresh);\n    }\n\n    const stopRunning = (race) => {\n        setIsRunning(false);\n    }\n\n\n    // Render Everything\n    if (isLoading || activeRace == null)\n        return <h1> Loading... </h1>\n\n    const pageButtonStyle = { borderRadius: 0, height: \"100%\", width: '50%' };\n    let pageButtons = (\n        <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n            <Button onClick={() => setPage(0)} disabled={page === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Election'}\n            </Button>\n            <Button onClick={() => setPage(1)} disabled={page === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Charts'}\n            </Button>\n            <Button onClick={() => setPage(2)} disabled={page === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Models'}\n            </Button>\n            <Button onClick={() => setPage(4)} disabled={page === 3} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Custom Graph'}\n            </Button>\n            <Button onClick={() => setPage(3)} disabled={page === 3} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Settings'}\n            </Button>\n        </ButtonGroup>\n    );\n\n    let raceTitle = (\n        <div className=\"title-text\" style={{ width: '100%', backgroundColor: 'grey', margin: '1% 2.5% 1% 2.5%', borderRadius: '5px' }}>\n            <h1 style={{ font: '3.5rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '1%' }}> {activeRace.race_name} </h1>\n        </div>\n    );\n\n    if (page === 0) {\n\n        let dropdownItems = races.map((item, index) => (\n            <Dropdown.Item key={index} as=\"button\" onClick={() => switchActiveRace(item)} > {item.race_name}</Dropdown.Item >\n        ));\n\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap' }}>\n                {pageButtons}\n                {raceTitle}\n                <div className=\"election-table\" style={{ width: '100%' }}>\n                    <CandidateList candidates={activeRace.candidateTable} seats={activeRace.seats} refresh={refresh} />\n                </div>\n                <ButtonGroup size=\"lg\" style={{ borderRadius: '5px', width: '100%', margin: '0% 2.5% 0% 2.5%' }}>\n                    <DropdownButton id=\"dropdown-item-button\" as={ButtonGroup} title=\"Change Race\" variant=\"primary\" size=\"lg\" style={{ boxShadow: '0 0 0 1px black', borderRadius: '5px 0px 0px 5px' }}>\n                        {dropdownItems}\n                    </DropdownButton>\n                    <Button onClick={() => setIsRunning(true)} disabled={isRunning} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Run Election'}\n                    </Button>\n                    <Button onClick={finishRaces} disabled={false} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Finish Races'}\n                    </Button>\n                    <div style={{ boxShadow: '0 0 0 1px black', backgroundColor: '#007bff', width: '30%', borderRadius: '0px 5px 5px 0px' }}>\n                        <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '5% 0 0 0' }}>\n                            Speed\n                        </label>\n                        <div style={{ margin: '0% 5% 0% 5%' }}>\n                            <RangeSlider\n                                min={0}\n                                max={10000}\n                                step={10}\n                                value={speed}\n                                variant=\"secondary\"\n                                onChange={changeEvent => setSpeed(changeEvent.target.value)}\n                            />\n                        </div>\n                    </div>\n                </ButtonGroup>\n            </div >\n        );\n    } else if (page === 1) {\n        let chartStyle = {\n            alignSelf: 'center', width: '50%', height: '30vw', margin: '0 0% 5% 0'\n        }\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap', width: '100%' }}>\n                {pageButtons}\n                {raceTitle}\n                <FirstChoicePie race={activeRace} parties={parties} style={chartStyle} />\n                <ElectedCandidatesPie race={activeRace} parties={parties} style={chartStyle} />\n                <CandidatesRanked race={activeRace} parties={parties} style={chartStyle} />\n                <CandidatesRankedPie race={activeRace} style={chartStyle} />\n                <PartyPercentage race={activeRace} parties={parties} style={chartStyle} />\n                <VoteOverTime race={activeRace} parties={parties} style={chartStyle} />\n                <VoteOverTimeBump race={activeRace} style={chartStyle} />\n                <EventualWinner race={activeRace} style={chartStyle} />\n                <RoundCandidateBump race={activeRace} style={chartStyle} />\n            </div >\n        );\n    } else if (page === 2) {\n        let modelButtons = (\n            <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n                <Button onClick={() => setModel(0)} disabled={model === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Bar'}\n                </Button>\n                <Button onClick={() => setModel(1)} disabled={model === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Heat Map'}\n                </Button>\n                <Button onClick={() => setModel(2)} disabled={model === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Sankey'}\n                </Button>\n            </ButtonGroup>\n        );\n        if (model === 0) {\n            return (\n                <div className=\"text-center\" style={{\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <div style={{ display: \"flex\", flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center', width: '100%' }}>\n                        <ElectionBar race={activeRace} style={{ alignSelf: 'center', width: '40vw' }} />\n                    </div>\n                </div>\n            );\n        }\n        else if (model === 1) {\n            return (\n                <div className=\"text-center\" style={{\n                    height: '100%',\n                    minHeight: '100%',\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <HeatMap race={activeRace} />\n                    <Chord race={activeRace} />\n                </div >\n            );\n        }\n        else {\n            return (\n                <div className=\"text-center\" style={{\n                    height: '100%',\n                    minHeight: '100%',\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <NivoSankey race={activeRace} style={{\n                        width: '90%',\n                        height: '60vw'\n                    }}\n                    />\n                </div >\n            );\n        }\n    } else if (page == 3) {\n        return (\n            <div className=\"text-center\" style={{\n                height: '100%',\n                minHeight: '100%',\n                display: \"flex\",\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                { pageButtons}\n                { raceTitle}\n                <ElectionSettings race={activeRace} excused={excused_changed} running={stopRunning} refresh={refresh} />\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"text-center\" style={{\n                height: '100%',\n                minHeight: '100%',\n                display: \"flex\",\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                { pageButtons}\n                { raceTitle}\n                <CustomFirstPie race={activeRace} />\n            </div>\n        )\n    }\n}\n\nexport default ElectionPage;","import React, { Component } from 'react';\n\n\nexport class FourZeroFour extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>404: Oops! Page not found!</h1>\n            </div>)\n    }\n}\nexport default FourZeroFour;\n","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport Button from 'react-bootstrap/Button'\n\nimport { Form } from 'react-bootstrap';\n\nfunction AddToDatabase() {\n    const AddToDB = (event) => {\n        const checkStrings = (str) => {\n            return str === null || str.match(/^ *$/) !== null;\n        }\n        event.preventDefault();\n        let data = ({ election_configuration: election_configuration, candidate_data: candidate_data, ballot_data: ballot_data, parties_data: party_data });\n        if (!checkStrings(electionName) && !checkStrings(year)) {\n            firebase.database().ref(\"elections/\" + electionName + \"/\" + year).set(data);\n            alert(\"Added To Database: elections/\" + electionName + \"/\" + year);\n        }\n        else {\n            alert('Invalid Name');\n        }\n    }\n\n    const onChange = async (event, callback) => {\n        event.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (event) => {\n            callback(JSON.parse(event.target.result));\n        };\n        if (event.target.files[0] !== null)\n            reader.readAsText(event.target.files[0]);\n    }\n\n    const [electionName, setElectionName] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [election_configuration, setElectionConfiguration] = useState(null);\n    const [party_data, setPartyData] = useState(null);\n    const [candidate_data, setCandidateData] = useState(null);\n    const [ballot_data, setBallotData] = useState(null);\n\n    return (\n        <div className=\"text-center\">\n            <h1> Add to Database </h1>\n            <Form onSubmit={AddToDB}>\n                <Form.Group>\n                    <Form.Control type=\"text\" value={electionName} onChange={(event) => setElectionName(event.target.value)} placeholder=\"Election Name\" />\n                    <Form.Control type=\"text\" value={year} onChange={(event) => setYear(event.target.value)} placeholder=\"Year\" />\n                </Form.Group>\n                <Form.Group style={{ display: 'grid', justifyItems: 'center' }}>\n                    <Form.File onChange={(event) => onChange(event, setElectionConfiguration)} accept='.json' label=\"Election Configuration\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setPartyData)} label=\"Party Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setCandidateData)} label=\"Candidate Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setBallotData)} label=\"Ballot Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                </Form.Group>\n                <Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Group>\n            </Form>\n        </div >\n    );\n}\n\nexport default AddToDatabase;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Redirect, withRouter } from \"react-router\";\nimport './firebase';\nimport './App.css'\n\nimport NavBar from './Components/NavBar/NavBar';\nimport Home from './Components/Home';\nimport ElectionPage from './Components/ElectionPage/ElectionPage';\nimport FourZeroFour from './Components/FourZeroFour';\nimport AddToDatabase from './Components/AddToDatabase';\n\nimport election_configuration from './Data/Configuration.json';\nimport candidate_data from './Data/Candidates.json';\nimport parties_data from './Data/Parties.json';\nimport ballot_data from './Data/Ballots.json';\n\nconst NavBarWithRouter = withRouter(NavBar);\n\nfunction App() {\n    return (\n        <BrowserRouter basename='/stvote' style={{ width: '100%', height: '100%' }}>\n            <Fragment >\n                <NavBarWithRouter style={{ width: '100%', height: '100%' }} />\n                <main style={{ width: '100%', height: '100%' }}>\n                    <Switch>\n                        <Route exact path='/'> <Redirect to=\"/home\" /> </Route>\n                        <Route path='/home' component={Home} />\n                        <Route exact path='/election' render={() => (<ElectionPage data={{ election_configuration: election_configuration, candidate_data: candidate_data, parties_data: parties_data, ballot_data: ballot_data }} />)} />\n                        <Route exact path='/election/:electionId' component={ElectionPage} />\n                        <Route path='/election/:electionId/:yearId' component={ElectionPage} />\n                        <Route path='/add' component={AddToDatabase} />\n                        <Route component={FourZeroFour} />\n                    </Switch>\n                </main>\n            </Fragment>\n        </BrowserRouter>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{ width: '100%', height: '100%' }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}