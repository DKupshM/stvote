{"version":3,"sources":["firebase.js","Components/NavBar/NavBar.js","Components/Home.js","Components/Hooks/useInterval.js","Data_Models/Candidate.js","Components/ElectionPage/Race/ProgressBar.js","Components/ElectionPage/Race/CandidatePosition.js","Components/ElectionPage/Race/CandidateList.js","Components/ElectionPage/Models/FirstChoicePie.js","Components/ElectionPage/Models/ElectedCandidatesPie.js","Components/ElectionPage/Models/CandidatesRankedPie.js","Components/ElectionPage/Models/CandidatesRanked.js","Components/ElectionPage/Models/PartyPercentage.js","Components/ElectionPage/Models/EventualWinner.js","Components/ElectionPage/Models/VoteOverTime.js","Components/ElectionPage/Models/VoteOverTimeBump.js","Components/ElectionPage/Models/RoundCandidateBump.js","Data_Models/Round.js","Data_Models/Race.js","Data_Models/Voter.js","Data_Models/Ballot.js","Data_Models/Party.js","Components/ElectionPage/Models/Sankey.js","Components/ElectionPage/Models/HeatMap.js","Components/ElectionPage/Models/ElectionBar.js","Components/ElectionPage/Models/Chord.js","Components/ElectionPage/ElectionPage.js","Components/FourZeroFour.js","Components/AddToDatabase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NavBar","props","useState","activeKey","setActiveKey","handleSelect","eventKey","Number","isInteger","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","onClick","Toggle","aria-controls","Collapse","id","Nav","className","onSelect","Link","Home","CreateSelectButton","election_title","filename","years","yearButtons","map","item","index","Button","key","year","console","log","OnClick","ButtonGroup","vertical","size","style","padding","disabled","asuc","asucsb","asucd","asucsc","asucla","display","alignItems","justifyContent","flexWrap","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Candidate","candidate_id","candidate_name","candidate_party","candidate_color","this","CandidateState","ProgressBar","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","color","fontWeight","Math","floor","CandidatePosition","get_status_color","status","position","isNaN","seats","candidate","party_color","party_name","score","margin","quota","min","CandidateList","candidate_list","candidates","sort","x","y","scope","FirstChoicePie","find_party_by_name","name","i","parties","length","get_ranked_choices","race","party","ranked_choices","ballots","choices","data","totalAmount","push","top","right","bottom","left","pixelRatio","padAngle","cornerRadius","colors","bar","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","sliceLabel","round","value","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","PartyPercentage","find_candidate_by_id","elected","maxChoices","num_ranked","max","scheme","CandidatesRanked","ballot","keys","data_to_add","indexBy","innerPadding","minValue","maxValue","groupMode","layout","reverse","colorBy","borderWidth","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","isInteractive","maxchoices","datapoints","xScale","type","yScale","stacked","orient","enablePoints","enableArea","areaOpacity","useMesh","eventualElected","electeddatapoints","notelecteddatapoints","VoteOverTime","String","choices_over_time","first_scores","score_chart","xFormat","yFormat","tickValues","lineWidth","VoteOverTimeBump","indexOfMax","arr","maxIndex","increment","candidate_positions","scores","splice","datapoint","activeLineWidth","inactiveLineWidth","inactiveOpacity","pointSize","activePointSize","inactivePointSize","format","RoundCandidateBump","rounds","elected_candidates","includes","round_number","eliminated_candidates","transferring","transfered","active_candidates","candidate_score","indexOf","pointColor","theme","pointBorderWidth","activePointBorderWidth","pointBorderColor","Round","add_ballot","state","RoundState","COMPLETE","Error","undefined","ballot_id","find_next_active_candidate","candidate_ballots","candidate_scores","add_candidate","start_inactive_candidates","start_active_candidates","set_elected_candidate","filter","ballotsToTransfer","set_eliminate_candidate","candidate_ballot","complete","isCandidateElected","candidate_real_scores","RUNNING","exhausted","rankings","Race","race_id","race_name","running","num_candidates","RaceState","ADDING","currentScores","candidateTable","start_tabulation","TABULATING","run_race_step","elect_candidate","currentRound","Object","surplus","transfer_value","ballots_to_apply","transfer_candidate","shift","candidate_ballot_rankings","first_round_score","activeCandidates","roundElected","maxElected","roundTransfer","complete_round","previousRound","add_round","begin_race","transfer_voters","Voter","voter_id","participating_races","races","participating_in_race","get_ballot_for_race","Ballot","Party","isValidColor","s","Option","Sankey","active_candidate","prev_round","nodes","links","link","source","target","transfer_candidates_ballot","next_candidate","transfer_candidate_id","GenerateData","align","nodeTooltip","node","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","enableLinkGradient","enableLabels","label","labelPosition","labelOrientation","labelPadding","HeatMap","get_ballots_for_candidate_at_position","showPercent","xChoice","setXChoice","yChoice","setYChoice","heatData","other_candidate","sum","xButtons","Dropdown","Item","as","yButtons","DropdownButton","title","tooltipFormat","forceSquare","cellOpacity","cellBorderColor","defs","background","rotation","spacing","fill","hoverTarget","cellHoverOthersOpacity","ElectionBar","get_round_data","round_data","get_candidate_position","candidate_table","get_candidate_by_position","final_candidate_score","setRound","data_active_candidates","round_active_candidates","chart_data","transferred","font","step","onChange","changeEvent","max_score","get_max_score","Chord","chordData","matrix","valueFormat","innerRadiusRatio","innerRadiusOffset","arcOpacity","arcBorderWidth","arcBorderColor","ribbonOpacity","ribbonBorderWidth","ribbonBorderColor","labelOffset","labelRotation","arcHoverOpacity","arcHoverOthersOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","legends","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","itemTextColor","itemDirection","symbolSize","effects","on","ElectionPage","shadeColor","percent","R","parseInt","substring","G","B","toString","find_race_by_id","find_race_by_name","election_configuration","setElectionConfiguration","candidate_data","setCandidateData","party_data","setPartyData","ballot_data","setBallotData","isLoading","setIsLoading","partiesLoaded","setPartiesLoaded","racesLoaded","setRacesLoaded","candidatesLoaded","setCandidatesLoaded","votersLoaded","setVotersLoaded","setParties","setRaces","voters","setVoters","activeRace","setActiveRace","speed","setSpeed","refresh","setRefresh","isRunning","setIsRunning","page","setPage","model","setModel","a","parties_data","electionId","match","params","yearId","databaseString","database","ref","once","snapshot","exists","child","val","loadData","partiesToAdd","loadParties","racesToAdd","race_position","race_max_winners","loadRaces","candidate_colors","random","number","loadCandidates","voter","uuid","candidateOrder","loadVoters","pageButtonStyle","pageButtons","raceTitle","dropdownItems","boxShadow","chartStyle","alignSelf","ElectedCandidatesPie","CandidatesRankedPie","EventualWinner","modelButtons","minHeight","FourZeroFour","Component","AddToDatabase","event","preventDefault","reader","FileReader","onload","JSON","parse","result","files","readAsText","electionName","setElectionName","setYear","Form","onSubmit","checkStrings","str","alert","set","Group","Control","placeholder","justifyItems","File","accept","NavBarWithRouter","withRouter","App","basename","exact","path","to","component","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.150b5456.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyCFNJfMcHbdoAKVVF88d-9POsUgk-C7NKk\",\n    authDomain: \"stvote-b967b.firebaseapp.com\",\n    databaseURL: \"https://stvote-b967b.firebaseio.com\",\n    projectId: \"stvote-b967b\",\n    storageBucket: \"stvote-b967b.appspot.com\",\n    messagingSenderId: \"487837721842\",\n    appId: \"1:487837721842:web:95c0dc83a5eeb46b995c6b\"\n}\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { useState } from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction NavBar(props) {\n\n    const [activeKey, setActiveKey] = useState(1);\n\n    const handleSelect = (eventKey) => {\n        if (Number.isInteger(eventKey))\n            setActiveKey(eventKey);\n        else\n            setActiveKey(0);\n    };\n\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/stvote/home\" onClick={handleSelect}>STVote</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav activeKey={activeKey} className=\"mr-auto\" onSelect={handleSelect}>\n                    <Nav.Link eventKey={1} href=\"/stvote/home\">Home</Nav.Link>\n                    <Nav.Link eventKey={1} href=\"/stvote/election\">Election</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\n\nfunction Home(props) {\n    const OnClick = (election_title, year) => {\n\n        console.log(\"Clicked\", election_title, year);\n    }\n    const CreateSelectButton = (election_title, filename, years) => {\n        let yearButtons = years.map((item, index) => (\n            <Button key={index} href={\"/stvote/election/\" + filename + \"/\" + item} onClick={() => OnClick(election_title, item)}>{item}</Button>\n        ));\n\n        return (\n            <ButtonGroup vertical size=\"lg\" style={{ padding: '2%' }}>\n                <Button variant=\"dark\" disabled={true}>{election_title}</Button>\n                {yearButtons}\n            </ButtonGroup>\n        );\n    }\n\n    let asuc = CreateSelectButton('ASUC Berkeley', \"uc_berkeley\", [2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsb = CreateSelectButton('ASUC Santa Barbara', \"uc_santa_barbara\", [2016, 2017, 2018, 2019, 2020]);\n    let asucd = CreateSelectButton('AS UC Davis', \"uc_davis\", [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsc = CreateSelectButton('AS UC Santa Cruz', \"uc_berkeley\", [2018, 2019, 2020]);\n    let asucla = CreateSelectButton('AS UC Los Angeles', \"uc_berkeley\", [2018, 2019, 2020]);\n\n    return (\n        <div className=\"text-center\">\n            <h1> STVote Elections </h1>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly', flexWrap: 'wrap' }}>\n                {asuc}\n                {asucsb}\n                {asucd}\n                {asucsc}\n                {asucla}\n            </div>\n        </div >\n    );\n}\n\nexport default Home;\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","\nexport class Candidate {\n    constructor(candidate_id, candidate_name, candidate_party, candidate_color = \"#FFFFFF\") {\n        this.candidate_id = candidate_id;\n        this.candidate_name = candidate_name;\n        this.candidate_party = candidate_party;\n        this.candidate_color = candidate_color;\n    }\n\n\n}\n\nexport const CandidateState = {\n    ELECTED: \"ELECTED\",\n    RUNNING: \"RUNNING\",\n    TRANSFERRING: \"TRANSFERRING\",\n    TRANSFERED: \"TRANSFERED\",\n    EXCUSED: \"EXCUSED\",\n};","import React from 'react';\n\nconst ProgressBar = (props) => {\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        height: '48px',\n        width: '100%',\n        backgroundColor: \"#fffbf5\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: bgcolor,\n        borderRadius: 'inherit',\n        textAlign: 'right'\n    }\n\n    const labelStyles = {\n        padding: 5,\n        color: 'black',\n        fontWeight: 'bold'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span style={labelStyles}>{`${Math.floor(completed)}%`}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;","import React from 'react';\nimport { CandidateState } from '../../../Data_Models/Candidate';\nimport ProgressBar from './ProgressBar';\nimport '../ElectionPage.css'\n\nfunction CandidatePosition(props) {\n    const get_status_color = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"#01A039\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"#0095E0\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"#E07A00\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"#FF0000\";\n    }\n\n    const get_status_text = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"ELECTED\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"RUNNING\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"TRANSFERRING\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"TRANSFERED\";\n    }\n\n    const get_position = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position))\n            return props.position + 1;\n        return 0;\n    }\n\n    const get_position_color = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position)) {\n            if (props.position < props.seats)\n                return \"#01A039\";\n        }\n        return \"#FF0000\";\n    }\n\n    const get_percentage = () => {\n        if (props.quota === 0)\n            return 0;\n        return Math.min(100, (props.score / props.quota) * 100);\n    }\n\n    return (\n        <tr>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: get_position_color() }}> {get_position()} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: props.candidate.candidate_color }}> {props.candidate.candidate_name} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: props.candidate.candidate_party.party_color }}> {props.candidate.candidate_party.party_name} </td >\n            <td className=\"basic-row\" width=\"150\" style={{ backgroundColor: get_status_color() }}> {get_status_text()} </td >\n            <td className=\"basic-row\" width=\"100\" style={{ backgroundColor: get_status_color() }}> {Math.floor(props.score)} </td >\n            <td style={{ padding: \"0 0 0 0\", margin: \"0 0 0 0\" }}>\n                <div style={{ display: 'inline-block', width: '100%', height: '100%' }}>\n                    <ProgressBar bgcolor={get_status_color()} completed={get_percentage()} />\n                </div>\n            </td >\n        </tr >\n    );\n}\n\nexport default CandidatePosition;\n","import React from 'react';\nimport CandidatePosition from './CandidatePosition';\nimport '../ElectionPage.css'\n\nfunction CandidateList(props) {\n\n    let sortedCandidates = props.candidates().sort((x, y) => {\n        if (x.position > y.position) {\n            return 1;\n        } else if (y.position > x.position) {\n            return -1;\n        }\n        return 0;\n    });\n\n    let candidate_list = sortedCandidates.map((item, index) => (\n        <CandidatePosition key={index} candidate={item.candidate} status={item.status}\n            score={item.score} position={item.position} quota={item.quota} seats={props.seats} />\n    ));\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-bordered\" >\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >#</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Name</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Party</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\">Status</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" > Score</th >\n                        <th className=\"title-row\" scope=\"col\">Quota Percentage</th>\n                    </tr >\n                </thead >\n                <tbody>\n                    {candidate_list}\n                </tbody>\n            </table >\n        </div >\n    );\n}\n\nexport default CandidateList;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction FirstChoicePie(props) {\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const ballot of race.ballots) {\n            if (ballot.candidates[0].candidate_party.party_name === party.party_name)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default FirstChoicePie;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n    const find_candidate_by_id = (race, id) => {\n        for (const candidate of race.candidates)\n            if (candidate.candidate_id === id)\n                return candidate;\n        return null;\n    }\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const candidate in race.elected) {\n            if (find_candidate_by_id(race, candidate).candidate_party === party)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n\n    const get_ranked_choices = (race) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item]\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar'\n\nfunction CandidatesRanked(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            if (ballot.candidates[0].candidate_party.party_name !== party.party_name)\n                continue;\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = {};\n    let keys = []\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n        keys.push(party.party_name);\n    }\n\n    let data = [];\n\n    for (let i = 1; i < maxChoices + 1; i++) {\n        let data_to_add = { index: i };\n        for (const item in choices) {\n            if (i in choices[item]) {\n                data_to_add[item] = choices[item][i];\n                data_to_add[item + \"Color\"] = choices[item][i];\n            }\n        }\n        data.push(data_to_add);\n    }\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsiveBarCanvas\n                data={data}\n                keys={keys}\n                indexBy=\"index\"\n                margin={{ top: 40, right: 40, bottom: 40, left: 60 }}\n                pixelRatio={2}\n                padding={0.05}\n                innerPadding={0}\n                minValue=\"auto\"\n                maxValue=\"auto\"\n                groupMode=\"stacked\"\n                layout=\"vertical\"\n                reverse={false}\n                colors={getColor}\n                colorBy=\"id\"\n                borderWidth={0}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Candidates Ranked',\n                    legendPosition: 'middle',\n                    legendOffset: 30\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Number of Voters',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                enableGridX={false}\n                enableGridY={true}\n                enableLabel={false}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                isInteractive={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\n\n\nfunction PartyPercentage(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            for (let i = 0; i < ballot.candidates.length; i++) {\n                maxchoices = Math.max(i, maxchoices);\n                if (ballot.candidates[i].candidate_party.party_name === party.party_name)\n                    if (i in ranked_choices)\n                        ranked_choices[i] += 1;\n                    else\n                        ranked_choices[i] = 1;\n            }\n        }\n        return ranked_choices;\n    }\n    let maxchoices = 0;\n    let choices = {};\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    for (const item in choices) {\n        let datapoints = [];\n        for (let i = 1; i < maxchoices + 1; i++) {\n            if (i in choices[item])\n                datapoints.push({ x: i, y: choices[item][i - 1] })\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\n\nfunction CandidatesRanked(props) {\n    const get_ranked_choices = (race) => {\n        let ranked_choices = {};\n        for (const ballot of race.ballots) {\n            maxChoices = Math.max(ballot.candidates.length, maxChoices);\n        }\n        for (let i = 0; i < maxChoices; i++) {\n            ranked_choices[i] = 0;\n        }\n\n        for (const ballot of race.ballots) {\n            let eventualElected = false;\n            for (let i = 0; i < maxChoices; i++) {\n                if (i < ballot.candidates.length && !eventualElected) {\n                    for (const candidate in race.elected) {\n                        if (candidate === ballot.candidates[i].candidate_id)\n                            eventualElected = true;\n                    }\n                }\n\n                if (eventualElected)\n                    ranked_choices[i] += 1;\n            }\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let electeddatapoints = [];\n    for (let i = 1; i < maxChoices + 1; i++) {\n        if (i in choices)\n            electeddatapoints.push({ x: i, y: choices[i] })\n    }\n\n    let notelecteddatapoints = [];\n    for (let i = 1; i < maxChoices + 1; i++) {\n        if (i in choices)\n            notelecteddatapoints.push({ x: i, y: (props.race.ballots.length - choices[i]) })\n    }\n\n    let data =\n        [{\n            id: \"elected\",\n            color: \"red\",\n            data: electeddatapoints\n        },\n        {\n            id: \"notelected\",\n            color: \"blue\",\n            data: notelecteddatapoints,\n        }]\n\n    const getColor = bar => {\n        console.log(bar.id);\n        if (bar.id === \"elected\")\n            return \"#0d00ff\";\n        return '#ff0000';\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLineCanvas } from '@nivo/line'\n\nfunction VoteOverTime(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const find_candidate_by_id = (candidate_id) => {\n        for (let i = 0; i < props.race.candidates.length; i++)\n            if (String(props.race.candidates[i].candidate_id) === candidate_id)\n                return props.race.candidates[i];\n        return null;\n    };\n\n    let choices_over_time = {};\n    for (const party of props.parties) {\n        choices_over_time[party.party_name] = [];\n    }\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 100);\n\n    for (let i = 0; i < props.race.first_scores.length; i += 1) {\n        const score_chart = props.race.first_scores[i];\n\n        let choices = {}\n        for (const party of props.parties) {\n            choices[party.party_name] = 0;\n        }\n\n        for (const candidate_id in score_chart) {\n            const candidate = find_candidate_by_id(candidate_id);\n            choices[candidate.candidate_party.party_name] += score_chart[candidate_id];\n        }\n\n        for (const party of props.parties) {\n            choices_over_time[party.party_name] = [...choices_over_time[party.party_name], choices[party.party_name]];\n        }\n    }\n\n    let data = [];\n    for (const item in choices_over_time) {\n        let datapoints = [];\n        for (let i = 0; i < choices_over_time[item].length; i++) {\n            if (choices_over_time[item][i] !== 0) {\n                datapoints.push({ x: (i * 1), y: ((choices_over_time[item][i]) / ((i + 1) * 1) * 100) })\n            }\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLineCanvas\n                data={data}\n                margin={{ top: 50, right: 160, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear' }}\n                xFormat={',.2r'}\n                yScale={{ type: 'linear', stacked: false, min: 0, max: 100 }}\n                yFormat={',.2r'}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    tickValues: 5,\n                    legend: 'Votes',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Percentage',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                enableGridX={false}\n                colors={getColor}\n                lineWidth={1}\n                enablePoints={false}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTime;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\n\n\nfunction VoteOverTimeBump(props) {\n    const indexOfMax = (arr) => {\n        if (arr.length === 0) {\n            return -1;\n        }\n\n        var max = arr[0];\n        var maxIndex = 0;\n\n        for (var i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                maxIndex = i;\n                max = arr[i];\n            }\n        }\n\n        return maxIndex;\n    }\n\n\n    let choices_over_time = [];\n\n    if (props.race.first_scores.length <= 1)\n        return (<div></div>);\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 50);\n\n    for (let i = 0; i < props.race.first_scores.length; i += increment) {\n        const score_chart = props.race.first_scores[i]\n\n        let candidate_positions = {};\n        let candidates = []\n        let scores = []\n        for (const candidate of props.race.candidates) {\n            candidates.push(candidate);\n            if (candidate.candidate_id in score_chart)\n                scores.push(score_chart[candidate.candidate_id]);\n            else\n                scores.push(0);\n        }\n\n        let position = 1;\n        while (scores.length > 0) {\n            let i = indexOfMax(scores);\n            scores.splice(i, 1);\n            candidate_positions[candidates[i].candidate_id] = position;\n            candidates.splice(i, 1);\n            position++;\n        }\n        choices_over_time.push(candidate_positions);\n    }\n\n\n    let data = [];\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (let i = 0; i < choices_over_time.length; i++) {\n            datapoint.push({ x: (i + 1) * increment, y: choices_over_time[i][candidate.candidate_id] });\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n    console.log(data);\n\n\n    return (\n        <div style={props.style}>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={{ scheme: 'spectral' }}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 90,\n                    tickValues: 5,\n                    format: \".2s\",\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTimeBump;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\n\n\nfunction RoundCandidateBump(props) {\n\n    if (props.race.rounds.length === 0)\n        return (<div></div>);\n\n    let data = []\n\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (const round of props.race.rounds) {\n            if (round.elected_candidates.includes(candidate)) {\n                datapoint.push({ x: round.round_number + 1, y: props.race.elected[candidate.candidate_id][1] + 1 });\n            } else if (round.eliminated_candidates.includes(candidate)) {\n                if (candidate.candidate_id in props.race.transferring)\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transferring[candidate.candidate_id][1] + 1 });\n                else\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transfered[candidate.candidate_id][1] + 1 });\n            } else {\n                let active_candidates = round.active_candidates.sort((x, y) => {\n                    if (round.candidate_score(x) > round.candidate_score(y)) {\n                        return -1;\n                    } else if (round.candidate_score(y) > round.candidate_score(x)) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                datapoint.push({ x: round.round_number + 1, y: active_candidates.indexOf(candidate) + round.elected_candidates.length + 1 });\n            }\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n\n    return (\n        <div style={props.style}>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={{ scheme: 'spectral' }}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                pointColor={{ theme: 'background' }}\n                pointBorderWidth={3}\n                activePointBorderWidth={3}\n                pointBorderColor={{ from: 'serie.color' }}\n                axisTop={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: -36\n                }}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default RoundCandidateBump;\n","import { CandidateState } from \"./Candidate\";\n\nexport class Round {\n    constructor(round_number, quota) {\n        this.round_number = round_number;\n        this.quota = quota;\n        this.state = RoundState.RUNNING;\n\n        this.candidates = []\n\n        this.elected_candidates = []\n        this.active_candidates = []\n        this.start_inactive_candidates = []\n        this.start_active_candidates = []\n        this.eliminated_candidates = []\n\n        this.ballots = { exhausted: 0 }\n        this.ballotsToTransfer = {}\n        this.candidate_ballots = { exhausted: [] }\n        this.candidate_real_scores = {}\n        this.candidate_scores = { exhausted: 0 }\n        this.rankings = {};\n    }\n\n    add_ballot = (ballot, value) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        if (this.ballots[ballot.ballot_id] !== undefined)\n            throw new Error(\"Already added Ballot\");\n\n        let candidate = this.find_next_active_candidate(ballot.candidates);\n        if (candidate !== \"exhausted\") {\n            this.candidate_ballots[candidate.candidate_id].push(ballot);\n            this.candidate_scores[candidate.candidate_id] += value;\n        } else {\n            this.candidate_ballots[candidate].push(ballot);\n            this.candidate_scores[candidate] += value;\n        }\n        this.ballots[ballot.ballot_id] = value;\n    }\n\n    find_next_active_candidate = (candidates) => {\n        for (const candidate of candidates)\n            if (this.active_candidates.includes(candidate))\n                return candidate\n        return \"exhausted\";\n    }\n\n    add_candidate = (candidate, state) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        this.candidates.push(candidate);\n        if (state === CandidateState.ELECTED) {\n            this.elected_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        } else if (state === CandidateState.RUNNING) {\n            this.active_candidates.push(candidate);\n            this.start_active_candidates.push(candidate);\n        } else {\n            this.eliminated_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        }\n\n        this.candidate_ballots[candidate.candidate_id] = [];\n        this.candidate_scores[candidate.candidate_id] = 0;\n    }\n\n    set_elected_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.elected_candidates.push(candidate);\n    }\n\n    set_eliminate_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.eliminated_candidates.push(candidate);\n    }\n\n    candidate_ballot = (candidate) => {\n        if (candidate === null)\n            candidate = \"exhausted\";\n        else if (candidate.candidate_id !== undefined)\n            candidate = candidate.candidate_id;\n\n        let ballots = [];\n        for (const ballot of this.candidate_ballots[candidate]) {\n            ballots.push([ballot, this.ballots[ballot.ballot_id]]);\n        }\n        return ballots;\n    }\n\n    candidate_score = (candidate) => {\n        if (candidate.candidate_id !== undefined)\n            return this.candidate_scores[candidate.candidate_id];\n        return this.candidate_scores[candidate];\n    }\n\n    complete = () => {\n        const isCandidateElected = (candidate_id) => {\n            for (const candidate in this.elected_candidates) {\n                if (candidate_id === this.elected_candidates[candidate].candidate_id) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this.candidate_real_scores = { ...this.candidate_scores }\n        for (const candidate_id in this.candidate_real_scores) {\n            if (this.candidate_real_scores[candidate_id] === 0 && isCandidateElected(candidate_id)) {\n                this.candidate_real_scores[candidate_id] = this.quota;\n            }\n        }\n\n        this.state = RoundState.COMPLETE;\n    }\n}\n\nexport const RoundState = {\n    RUNNING: \"RUNNING\",\n    COMPLETE: \"COMPLETE\"\n};","\nimport { Round, RoundState } from './Round';\nimport { CandidateState } from './Candidate';\n\nexport class Race {\n\n    constructor(race_id, race_name, seats) {\n        this.race_id = race_id\n        this.race_name = race_name\n        this.seats = Number(seats)\n\n        this.rounds = [];\n\n        this.state = RaceState.ADDING;\n\n        this.candidates = []\n        this.ballots = []\n\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        this.first_scores = []\n\n        // Set Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n    }\n\n    add_candidate = (candidate) => {\n        for (const current_candidate of this.candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n    }\n\n    add_ballot = (ballot) => {\n        if (ballot.candidates.length === 0)\n            return;\n        for (let i = 0; i < this.ballots.length; i++)\n            if (this.ballots[i].ballot_id === ballot.ballot_id)\n                return;\n        this.ballots.push(ballot);\n    }\n\n    num_candidates = () => {\n        return this.candidates.length;\n    }\n\n    quota = () => {\n        if (this.state === RaceState.ADDING)\n            throw new Error(\"Can't Get Quota While Adding Ballots\");\n        return Math.floor(this.ballots.length / (this.seats + 1)) + 1;\n    }\n\n    currentScores = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let scores = [];\n        for (const candidate in this.elected) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.elected[candidate][0],\n            });\n        }\n        for (const candidate in this.running) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.running[candidate][0],\n            });\n        }\n        for (const candidate in this.transferring) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transferring[candidate][0],\n            });\n        }\n        for (const candidate in this.transfered) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transfered[candidate][0],\n            });\n        }\n        return scores;\n    }\n\n    candidateTable = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let quota = 0;\n        if (this.state !== RaceState.ADDING)\n            quota = this.quota();\n\n        let candidateTable = []\n        // Candidate, Status, Position, Score\n\n        for (const candidate in this.elected) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.ELECTED,\n                position: this.elected[candidate][1],\n                score: this.elected[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.running) {\n            if (this.state === RaceState.ADDING) {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: candidateTable.length,\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            } else {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: this.running[candidate][1],\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            }\n        }\n        for (const candidate in this.transferring) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERRING,\n                position: this.transferring[candidate][1],\n                score: this.transferring[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.transfered) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERED,\n                position: this.transfered[candidate][1],\n                score: this.transfered[candidate][0],\n                quota: quota,\n            });\n        }\n        return candidateTable;\n    }\n\n    start_tabulation = () => {\n        if (this.state === RaceState.ADDING)\n            this.state = RaceState.TABULATING;\n    }\n\n    run_race_step = () => {\n        const begin_race = () => {\n            console.log(\"Beginning Race for\", this.race_name);\n            console.log(\"Total Voters is: \" + this.ballots.length + \" , for \" + this.seats + \" seats.\")\n            console.log(\"Quota is\", this.quota())\n            if (this.ballots.length === 0) {\n                this.state = RaceState.COMPLETE;\n                console.log(\"No Ballots Cast in Race\");\n            }\n            else {\n                let round = new Round(0, this.quota());\n\n                for (let i = 0; i < this.candidates.length; i++) {\n                    round.add_candidate(this.candidates[i], CandidateState.RUNNING);\n                }\n\n\n                for (let i = 0; i < this.ballots.length; i++) {\n                    this.ballots_to_apply.push([this.ballots[i], 1]);\n                }\n                this.rounds.push(round);\n            }\n        }\n\n        const add_round = () => {\n            const find_candidate_by_id = (id) => {\n                for (const candidate of this.candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                return null;\n            }\n            console.log(\"Starting Round\", this.rounds.length);\n            let round = new Round(this.rounds.length, this.quota());\n            let previousRound = this.rounds[this.rounds.length - 1];\n\n            for (const candidate in this.elected) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.ELECTED);\n            }\n            for (const candidate in this.running) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.RUNNING);\n                for (const ballot of previousRound.candidate_ballot(candidate)) {\n                    round.add_ballot(ballot[0], ballot[1]);\n                }\n            }\n            for (const candidate in this.transferring) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERRING);\n            }\n            for (const candidate in this.transfered) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERED);\n            }\n\n            for (const ballot of previousRound.candidate_ballot(null)) {\n                round.add_ballot(ballot[0], ballot[1]);\n            }\n\n            this.rounds.push(round);\n        }\n\n        const elect_candidate = (candidate, score, currentRound) => {\n            console.log(\"Electing Candidate: \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_elected_candidate(candidate);\n\n            this.elected[candidate.candidate_id] = [score, Object.keys(this.elected).length];\n            delete this.running[candidate.candidate_id];\n\n            const surplus = score - this.quota();\n\n            let transfer_value = 1;\n            if (surplus > 0) {\n                transfer_value = surplus / score;\n            }\n\n            for (const ballot of currentRound.candidate_ballot(candidate)) {\n                this.ballots_to_apply.push([ballot[0], ballot[1] * transfer_value]);\n            }\n        }\n\n        const transfer_candidate = (candidate, score, currentRound) => {\n            console.log(\"Transferring Candidate \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_eliminate_candidate(candidate);\n\n            this.transferring[candidate.candidate_id] = [score, Object.keys(this.elected).length + Object.keys(this.running).length - 1];\n            delete this.running[candidate.candidate_id];\n\n            for (const ballot of currentRound.candidate_ballot(candidate))\n                this.ballots_to_apply.push(ballot)\n        }\n\n        const complete_round = (currentRound) => {\n            console.log(\"Completed Round\", currentRound.round_number);\n            currentRound.complete();\n\n            if (currentRound.active_candidates.length === 0) {\n                console.log(\"Race Complete\");\n                for (const candidate in this.transferring) {\n                    this.transfered[candidate] = this.transferring[candidate];\n                    delete this.transferring[candidate]\n                }\n                console.log(this.rounds);\n                this.state = RaceState.COMPLETE;\n            }\n        }\n\n        if (this.state === RaceState.COMPLETE)\n            return;\n        this.state = RaceState.TABULATING;\n\n        if (this.rounds.length === 0) {\n            begin_race();\n            return;\n        }\n\n        let currentRound = this.rounds[this.rounds.length - 1];\n        if (currentRound.state === RoundState.COMPLETE) {\n            add_round();\n            return;\n        }\n\n        if (this.ballots_to_apply.length > 0) {\n            let ballot = this.ballots_to_apply.shift();\n            currentRound.add_ballot(ballot[0], ballot[1]);\n\n            if (this.rounds.length === 1) {\n                for (let i = 0; i < ballot[0].candidates.length; i++) {\n                    const candidate = ballot[0].candidates[i];\n                    if (this.candidate_ballot_rankings[candidate] === undefined)\n                        this.candidate_ballot_rankings[candidate] = [];\n                    while (this.candidate_ballot_rankings[candidate].length < i + 1)\n                        this.candidate_ballot_rankings[candidate].push(0);\n                    this.candidate_ballot_rankings[candidate][i] += 1\n                }\n\n                let first_round_score = {};\n                if (this.first_scores.length !== 0) {\n                    first_round_score = { ...this.first_scores[this.first_scores.length - 1] };\n                }\n                if (ballot[0].candidates[0].candidate_id in first_round_score)\n                    first_round_score[ballot[0].candidates[0].candidate_id] += 1;\n                else\n                    first_round_score[ballot[0].candidates[0].candidate_id] = 1;\n                this.first_scores.push(first_round_score);\n            }\n\n            let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n                if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                    return -1;\n                } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                    return 1;\n                }\n                return 0;\n            });\n\n            for (let i = 0; i < activeCandidates.length; i++) {\n                this.running[activeCandidates[i].candidate_id] = [currentRound.candidate_score(activeCandidates[i]), Object.keys(this.elected).length + i];\n            }\n\n            return;\n        }\n\n        for (const candidate in this.transferring) {\n            this.transfered[candidate] = this.transferring[candidate];\n            delete this.transferring[candidate]\n        }\n\n        let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n            if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                return -1;\n            } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let roundElected = [];\n        let maxElected = this.seats - Object.keys(this.elected).length;\n\n        if (activeCandidates.length <= maxElected) {\n            for (const candidate of activeCandidates) {\n                if (currentRound.elected_candidates) {\n                    roundElected.push(candidate);\n                }\n            }\n        } else {\n            for (const candidate of activeCandidates) {\n                if (currentRound.candidate_score(candidate) >= this.quota()) {\n                    roundElected.push(candidate);\n                }\n            }\n        }\n\n        for (const candidate of roundElected) {\n            elect_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n        }\n\n        let roundTransfer = [];\n        if (Object.keys(this.elected).length === this.seats) {\n            for (const candidate of activeCandidates.reverse()) {\n                roundTransfer.push(candidate);\n            }\n        } else if (roundElected.length === 0) {\n            roundTransfer.push(activeCandidates[activeCandidates.length - 1]);\n        }\n\n        for (const candidate of roundTransfer) {\n            if (!currentRound.elected_candidates.includes(candidate)) {\n                transfer_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n            }\n        }\n\n        complete_round(currentRound);\n    }\n};\n\nexport const RaceState = {\n    ADDING: \"ADDING\",\n    TABULATING: \"TABULATING\",\n    COMPLETE: \"COMPLETE\"\n};","\nexport class Voter {\n    constructor(voter_id) {\n        this.voter_id = voter_id;\n\n        // Format\n        // {id: Ballot}\n        this.races = {};\n    }\n\n    participating_races = () => {\n        return Object.keys(this.races);\n    }\n\n    participating_in_race = (race_id) => {\n        return race_id in this.races;\n    }\n\n    get_ballot_for_race = (race_id) => {\n        if (race_id in this.races) {\n            if (this.races[race_id].length === 1)\n                return this.races[race_id][0]\n            return this.races[race_id];\n        }\n        return null;\n    }\n\n    add_ballot = (race_id, ballot) => {\n        if (ballot.candidates.length > 0) {\n            if (race_id in this.races) {\n                this.races[race_id] = [...this.races[race_id], ballot]\n            } else {\n                this.races[race_id] = [ballot];\n            }\n        }\n    }\n}","\nexport class Ballot {\n    constructor(ballot_id, candidates) {\n        this.ballot_id = ballot_id;\n        this.candidates = candidates;\n    }\n}","\nexport class Party {\n    constructor(party_name, party_color) {\n        this.party_name = party_name;\n\n        if (!this.isValidColor(party_color)) {\n            party_color = \"#\" + party_color\n            if (!this.isValidColor(party_color)) {\n                console.log(\"Error Color Isn't Valid\", party_color)\n                party_color = \"#FFFFFF\"\n            }\n        }\n        this.party_color = party_color;\n    }\n\n    isValidColor = (color) => {\n        var s = new Option().style;\n        s.color = color;\n        return s.color !== '';\n    }\n}","import React from 'react';\n\nimport { ResponsiveSankey } from '@nivo/sankey'\n\nfunction Sankey(props) {\n\n    const GenerateData = (race) => {\n        const find_candidate_by_id = (candidate_id) => {\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n            return null;\n        };\n\n        const find_next_active_candidate = (candidates, active_candidates) => {\n            for (const candidate in candidates) {\n                for (const active_candidate in active_candidates) {\n                    if (candidates[candidate].candidate_id === active_candidates[active_candidate].candidate_id) {\n                        return candidates[candidate];\n                    }\n                }\n            }\n            return \"exhausted\";\n        }\n\n        const prev_round = (round) => {\n            return race.rounds[round.round_number - 1];\n        }\n\n        let data = { nodes: [{ id: \"Total Votes\", name: \"Total Votes\", color: \"#000000\" }, { id: \"Elected\", name: \"Elected\", color: \"#01A039\" }, { id: \"Exhausted\", name: \"Exhausted\", color: \"#FF0000\" }], links: [] }\n        for (const round_number in race.rounds) {\n            const round = race.rounds[round_number];\n            for (const candidate of round.start_active_candidates) {\n                data[\"nodes\"].push({ id: candidate.candidate_name + \" \" + round_number, name: candidate.candidate_name, color: candidate.candidate_party.party_color });\n            }\n            if (round.round_number === 0) {\n                // First Round so Count Vote Totals\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: \"Total Votes\", target: candidate.candidate_name + \" \" + round.round_number, value: round.candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n            } else {\n                // First add links from prior rounds\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: candidate.candidate_name + \" \" + round.round_number, value: prev_round(round).candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    // Check if elected this round and add link if elected\n\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n\n                // Then add links from eliminated or elected candidates\n                for (const candidate_id in prev_round(round).ballotsToTransfer) {\n                    const candidate = find_candidate_by_id(candidate_id);\n\n                    // Find candidates that it will transfer to\n                    let transfer_candidates_ballot = {};\n\n                    let candidate_ballots = prev_round(round).ballotsToTransfer[candidate_id];\n                    for (const ballot in candidate_ballots) {\n                        const next_candidate = find_next_active_candidate(candidate_ballots[ballot].candidates, round.start_active_candidates);\n                        if (next_candidate !== \"exhausted\") {\n                            if (next_candidate.candidate_id in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate.candidate_id].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate.candidate_id] = [candidate_ballots[ballot]];\n                        } else {\n                            if (next_candidate in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate] = [candidate_ballots[ballot]];\n                        }\n                    }\n\n\n                    for (const transfer_candidate_id in transfer_candidates_ballot) {\n                        if (transfer_candidate_id !== \"exhausted\") {\n                            const transfer_candidate = find_candidate_by_id(transfer_candidate_id);\n\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: transfer_candidate.candidate_name + \" \" + round.round_number, value: value };\n                            data['links'].push(link);\n                        }\n                        else {\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: \"Exhausted\", value: value };\n                            data['links'].push(link);\n                        }\n                    }\n                }\n            }\n            if (round.round_number === race.rounds.length - 1) {\n                for (const candidate of round.start_active_candidates) {\n                    if (round.elected_candidates.includes(candidate)) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                    else {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Exhausted\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                }\n            }\n        }\n        return data;\n    }\n\n    if (props.race.rounds.length === 0)\n        return (<h1>Loading</h1>)\n\n\n    const data = GenerateData(props.race);\n\n    return (\n        <div style={props.style}>\n            <ResponsiveSankey\n                data={data}\n                margin={{ top: 100, right: 40, bottom: 100, left: 40 }}\n                layout=\"vertical\"\n                align=\"justify\"\n                sort=\"ascending\"\n                colors={{ scheme: 'category10' }}\n                nodeTooltip={node => <span> {node.name}: {Math.round(node.value)}</span>}\n                nodeOpacity={1}\n                nodeThickness={10}\n                nodeInnerPadding={3}\n                nodeSpacing={10}\n                nodeBorderWidth={0}\n                nodeBorderColor={{ from: 'color', modifiers: [['darker', 0.8]] }}\n                linkOpacity={0.4}\n                linkHoverOpacity={0.8}\n                linkHoverOthersOpacity={0.1}\n                enableLinkGradient={true}\n                enableLabels={true}\n                label={node => `${node.name}`}\n                labelPosition=\"outside\"\n                labelOrientation=\"vertical\"\n                labelPadding={16}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default Sankey;","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveHeatMapCanvas } from '@nivo/heatmap'\n\nfunction HeatMap(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [showPercent, setShowPercent] = useState(true);\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let heatData = { candidate: candidate.candidate_name };\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            if (!showPercent)\n                heatData[other_candidate.candidate_name] = sum;\n            else\n                heatData[other_candidate.candidate_name] = Math.round((sum / ballots.length) * 100);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(heatData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveHeatMapCanvas\n                    data={data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    tooltipFormat={\".0%\"}\n                    margin={{ top: 100, right: 60, bottom: 60, left: 60 }}\n                    forceSquare={true}\n                    axisTop={{ orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -90, legend: '', legendOffset: 36 }}\n                    axisRight={null}\n                    axisBottom={null}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    cellOpacity={1}\n                    cellBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.8]] }}\n                    defs={[\n                        {\n                            id: 'lines',\n                            type: 'patternLines',\n                            background: 'inherit',\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            rotation: -45,\n                            lineWidth: 4,\n                            spacing: 7\n                        }\n                    ]}\n                    fill={[{ id: 'lines' }]}\n                    animate={true}\n                    motionStiffness={80}\n                    motionDamping={9}\n                    hoverTarget=\"cell\"\n                    cellHoverOthersOpacity={0.25}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default HeatMap;\n","import React, { useState } from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar';\n\nimport { RaceState } from '../../../Data_Models/Race';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n\nfunction ElectionBar(props) {\n    const get_round_data = (round, active_candidates) => {\n        let round_data = {};\n        for (let i = 0; i < active_candidates.length; i++) {\n            round_data[active_candidates[i].candidate_id] = { position: i, score: round.candidate_score(active_candidates[i]) }\n        }\n        return round_data;\n    }\n\n    const get_candidate_position = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.position;\n            }\n        }\n        return 0;\n    }\n\n    const get_max_score = () => {\n        let max_score = quota;\n        for (const candidate_table of candidateTable) {\n            max_score = Math.max(candidate_table.score, max_score);\n        }\n        return max_score\n    }\n\n    const get_candidate_by_position = (position) => {\n        for (const candidate of props.race.candidates) {\n            if (get_candidate_position(candidate) === position) {\n                return candidate;\n            }\n        }\n        return 0;\n    }\n\n    const final_candidate_score = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.score;\n            }\n        }\n        return 0;\n    }\n\n    const [round, setRound] = useState(1);\n    const candidateTable = props.race.candidateTable();\n\n    if (props.race.rounds === 0 || props.race.state === RaceState.ADDING)\n        return <h1> Loading... </h1>\n\n    let quota = props.race.quota();\n\n    let data_active_candidates = [];\n    // Get Candidates to Display\n    let round_active_candidates = props.race.rounds[round - 1].active_candidates;\n    for (let i = 0; i < round; i++) {\n        data_active_candidates.push(get_round_data(props.race.rounds[i],\n            round_active_candidates));\n    }\n\n    let keys = [\"elected\", \"transferred\"]\n    let chart_data = [];\n\n    for (let i = 0; i < props.race.rounds[round - 1].candidates.length; i++) {\n        const candidate = get_candidate_by_position(i);\n        if (round_active_candidates.includes(candidate)) {\n            let data = { candidate: candidate.candidate_name };\n            for (let i = 0; i < round; i++) {\n                let score = data_active_candidates[i][candidate.candidate_id].score;\n                if (i !== 0) {\n                    score -= data_active_candidates[i - 1][candidate.candidate_id].score;\n                }\n                data[\"Round \" + (i + 1)] = score;\n                if (!keys.includes(\"Round \" + (i + 1))) {\n                    keys.push(\"Round \" + (i + 1));\n                }\n            }\n            chart_data.push(data);\n        } else if (props.race.rounds[round - 1].elected_candidates.includes(candidate)) {\n            chart_data.push({ candidate: candidate.candidate_name, elected: props.race.rounds[round - 1].candidate_real_scores[candidate.candidate_id] });\n        } else {\n            chart_data.push({ candidate: candidate.candidate_name, transferred: final_candidate_score(candidate) });\n        }\n    }\n    return (\n        <div style={{ width: '100%', height: '50vw' }}>\n            <div style={{ width: '80%' }}>\n                <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'black', textAlign: 'center', padding: '5% 0 0 0' }}>\n                    Round\n                </label>\n                <div style={{ margin: '0% 5% 0% 5%' }}>\n                    <RangeSlider\n                        min={1}\n                        max={props.race.rounds.length}\n                        step={1}\n                        value={round}\n                        variant=\"secondary\"\n                        onChange={changeEvent => setRound(changeEvent.target.value)}\n                    />\n                </div>\n            </div>\n            <div style={{ width: '100%', height: '50vw' }}>\n                <ResponsiveBarCanvas\n                    data={chart_data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    margin={{ top: 40, right: 40, bottom: 200, left: 60 }}\n                    maxValue={get_max_score()}\n                    pixelRatio={2}\n                    padding={0.05}\n                    innerPadding={0}\n                    groupMode=\"stacked\"\n                    layout=\"vertical\"\n                    reverse={false}\n                    colors={{ scheme: 'nivo' }}\n                    colorBy=\"id\"\n                    borderWidth={0}\n                    borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    axisBottom={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: -60,\n                    }}\n                    axisLeft={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Score',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    enableGridX={false}\n                    enableGridY={true}\n                    enableLabel={false}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    isInteractive={true}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ElectionBar;\n","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveChordCanvas } from '@nivo/chord'\n\nfunction Chord(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let chordData = [];\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            chordData.push(sum);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(chordData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveChordCanvas\n                    matrix={data}\n                    keys={keys}\n                    margin={{ top: 60, right: 200, bottom: 60, left: 60 }}\n                    valueFormat=\".2f\"\n                    pixelRatio={2}\n                    padAngle={0.006}\n                    innerRadiusRatio={0.86}\n                    innerRadiusOffset={0}\n                    arcOpacity={1}\n                    arcBorderWidth={1}\n                    arcBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    ribbonOpacity={0.5}\n                    ribbonBorderWidth={0}\n                    ribbonBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    enableLabel={true}\n                    label=\"id\"\n                    labelOffset={9}\n                    labelRotation={-90}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                    colors={{ scheme: 'category10' }}\n                    isInteractive={true}\n                    arcHoverOpacity={1}\n                    arcHoverOthersOpacity={0.4}\n                    ribbonHoverOpacity={0.75}\n                    ribbonHoverOthersOpacity={0.15}\n                    legends={[\n                        {\n                            anchor: 'right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 120,\n                            translateY: 0,\n                            itemWidth: 80,\n                            itemHeight: 11,\n                            itemsSpacing: 0,\n                            itemTextColor: '#999',\n                            itemDirection: 'left-to-right',\n                            symbolSize: 12,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemTextColor: '#000'\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chord;\n","import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport uuid from 'react-uuid'\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport useInterval from '../Hooks/useInterval';\nimport CandidateList from './Race/CandidateList';\n\nimport FirstChoicePie from './Models/FirstChoicePie';\nimport ElectedCandidatesPie from './Models/ElectedCandidatesPie';\nimport CandidatesRankedPie from './Models/CandidatesRankedPie';\nimport CandidatesRanked from './Models/CandidatesRanked';\nimport PartyPercentage from './Models/PartyPercentage';\nimport EventualWinner from './Models/EventualWinner';\nimport VoteOverTime from './Models/VoteOverTime';\nimport VoteOverTimeBump from './Models/VoteOverTimeBump';\nimport RoundCandidateBump from './Models/RoundCandidateBump';\n\nimport { Race } from '../../Data_Models/Race';\nimport { Voter } from '../../Data_Models/Voter';\nimport { Ballot } from '../../Data_Models/Ballot';\nimport { Party } from '../../Data_Models/Party';\nimport { Candidate } from '../../Data_Models/Candidate';\n\nimport './ElectionPage.css'\nimport { RoundState } from '../../Data_Models/Round';\nimport NivoSankey from './Models/Sankey';\nimport HeatMap from './Models/HeatMap';\nimport ElectionBar from './Models/ElectionBar';\nimport Chord from './Models/Chord';\n\nfunction ElectionPage(props) {\n\n    const shadeColor = (color, percent) => {\n\n        var R = parseInt(color.substring(1, 3), 16);\n        var G = parseInt(color.substring(3, 5), 16);\n        var B = parseInt(color.substring(5, 7), 16);\n\n        R = parseInt(R * (100 + percent) / 100);\n        G = parseInt(G * (100 + percent) / 100);\n        B = parseInt(B * (100 + percent) / 100);\n\n        R = (R < 255) ? R : 255;\n        G = (G < 255) ? G : 255;\n        B = (B < 255) ? B : 255;\n\n        var RR = ((R.toString(16).length == 1) ? \"0\" + R.toString(16) : R.toString(16));\n        var GG = ((G.toString(16).length == 1) ? \"0\" + G.toString(16) : G.toString(16));\n        var BB = ((B.toString(16).length == 1) ? \"0\" + B.toString(16) : B.toString(16));\n\n        return \"#\" + RR + GG + BB;\n    }\n\n    // Helper Functions\n    const find_race_by_id = (id) => {\n        for (let i = 0; i < races.length; i++) {\n            if (String(races[i].race_id) === id)\n                return races[i];\n        }\n        return null;\n    };\n\n    const find_race_by_name = (name) => {\n        for (let i = 0; i < races.length; i++) {\n            if (races[i].race_name === name)\n                return races[i];\n        }\n        return null;\n    };\n\n    const find_candidate_by_id = (race_id, candidate_id) => {\n        let race = find_race_by_id(race_id);\n        if (race !== null)\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n        return null;\n    };\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < parties.length; i++)\n            if (parties[i].party_name === name)\n                return parties[i];\n        return null\n    };\n\n    const loadParties = (party_data) => {\n        let partiesToAdd = []\n        for (const party of party_data.parties) {\n            for (let i = 0; i < partiesToAdd.length; i++)\n                if (partiesToAdd.party_name === party.party_name)\n                    continue;\n            partiesToAdd.push(new Party(party.party_name, party.party_color));\n        }\n        return partiesToAdd;\n    }\n\n    const loadRaces = (election_configuration) => {\n        let racesToAdd = []\n        for (const race of election_configuration.races) {\n            for (let i = 0; i < racesToAdd.length; i++)\n                if (racesToAdd.race_id === race.race_id)\n                    continue;\n            racesToAdd.push(new Race(race.race_id, race.race_position, race.race_max_winners));\n        }\n        return racesToAdd;\n    }\n\n    const loadCandidates = (candidate_data) => {\n        for (let key in candidate_data) {\n            const race = find_race_by_name(key);\n            let candidate_colors = {};\n            if (race === null)\n                continue;\n            for (const candidate of candidate_data[key]) {\n                let party = find_party_by_name(candidate.party);\n                if (party === null) {\n                    party = new Party(candidate.party, \"FFFFFF\");\n                    console.log(\"Adding Party: \", party.party_name);\n                    setParties([...parties, party]);\n                }\n                let color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n\n                if (party.party_name in candidate_colors) {\n                    while (candidate_colors[party.party_name].includes(color))\n                        color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n                    candidate_colors[party.party_name].push(color);\n                }\n                else\n                    candidate_colors[party.party_name] = [color]\n\n                race.add_candidate(new Candidate(candidate.number, candidate.name, party, color));\n            }\n        }\n        setCandidatesLoaded(true);\n\n        return;\n    }\n\n    const loadVoters = (ballot_data) => {\n        let voters = []\n        for (const item of ballot_data.ballots) {\n            let voter = new Voter(uuid())\n            for (let key in item) {\n                let candidateOrder = []\n                for (let candidate_id of item[key]) {\n                    let candidate = find_candidate_by_id(key, candidate_id);\n                    candidateOrder.push(candidate);\n                };\n\n                const ballot = new Ballot(uuid(), candidateOrder);\n                const race = find_race_by_id(key);\n                if (race !== null) {\n                    race.add_ballot(ballot);\n                }\n                voter.add_ballot(key, ballot);\n            }\n            voters.push(voter);\n        }\n        return voters;\n    }\n\n\n    const [election_configuration, setElectionConfiguration] = useState([]);\n    const [candidate_data, setCandidateData] = useState([]);\n    const [party_data, setPartyData] = useState([]);\n    const [ballot_data, setBallotData] = useState([]);\n\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [partiesLoaded, setPartiesLoaded] = useState(false);\n    const [racesLoaded, setRacesLoaded] = useState(false);\n    const [candidatesLoaded, setCandidatesLoaded] = useState(false);\n    const [votersLoaded, setVotersLoaded] = useState(false);\n\n    const [parties, setParties] = useState([]);\n    const [races, setRaces] = useState([]);\n    const [voters, setVoters] = useState([]);\n\n    const [activeRace, setActiveRace] = useState(null);\n    const [speed, setSpeed] = useState(1000);\n    const [refresh, setRefresh] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [page, setPage] = useState(0);\n\n    const [model, setModel] = useState(0);\n\n    useEffect(() => {\n        if (!isLoading)\n            setPartiesLoaded(true);\n    }, [parties]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (activeRace === null)\n                setActiveRace(races[0]);\n            setRacesLoaded(true);\n        }\n    }, [races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading)\n            setVotersLoaded(true);\n    }, [voters]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n\n    useEffect(() => {\n        const loadData = async () => {\n            if (props.data !== undefined && props.data !== null) {\n                setElectionConfiguration(props.data.election_configuration);\n                setCandidateData(props.data.candidate_data);\n                setPartyData(props.data.parties_data);\n                setBallotData(props.data.ballot_data);\n                setIsLoading(false);\n                return;\n            }\n            let electionId = props.match.params.electionId;\n\n            if (typeof (electionId) === \"undefined\") {\n                electionId = \"uc_berkeley\";\n            }\n\n            let yearId = props.match.params.yearId;\n            if (typeof (yearId) === \"undefined\") {\n                yearId = \"2015\";\n            }\n\n            let databaseString = 'elections/' + electionId + \"/\" + yearId;\n\n            console.log(\"Loading Data From DataBase\");\n            await firebase.database().ref(databaseString).once('value', snapshot => {\n                if (!snapshot.exists()) {\n                    console.log(\"Path Doesn't Exist, Loading Default Reference\");\n                    databaseString = 'elections/uc_berkeley/2015';\n                }\n            });\n\n            firebase.database().ref(databaseString).once('value', snapshot => {\n                setElectionConfiguration(snapshot.child('election_configuration').val());\n                setCandidateData(snapshot.child('candidate_data').val());\n                setPartyData(snapshot.child('parties_data').val());\n                setBallotData(snapshot.child('ballot_data').val());\n                setIsLoading(false);\n            });\n        }\n\n        if (isLoading) {\n            loadData();\n            return;\n        }\n        if (!partiesLoaded) {\n            console.log(\"Loading Parties\")\n            let parties = loadParties(party_data);\n            setParties(parties);\n        }\n\n        if (partiesLoaded && !racesLoaded) {\n            console.log(\"Loading Races\");\n            setRaces(loadRaces(election_configuration));\n            return;\n        }\n\n        if (racesLoaded && !candidatesLoaded) {\n            console.log(\"Loading Candidates\");\n            loadCandidates(candidate_data);\n            return;\n        }\n\n        if (candidatesLoaded && !votersLoaded) {\n            console.log(\"Loading Voters\");\n            setVoters(loadVoters(ballot_data));\n        }\n        if (votersLoaded) {\n            console.log(\"Finished Loading\");\n        }\n\n    }, [isLoading, partiesLoaded, racesLoaded, candidatesLoaded, votersLoaded]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useInterval(() => {\n        if (activeRace.state !== RoundState.COMPLETE && isRunning) {\n            for (let i = 0; i < Math.floor(speed / 10); i++) {\n                activeRace.run_race_step();\n            }\n            setRefresh(!refresh);\n        } else {\n            setIsRunning(false)\n        }\n    }, isRunning ? 100 : null)\n\n    const switchActiveRace = (race) => {\n        setIsRunning(false);\n        setActiveRace(race);\n    }\n\n    const finishRaces = () => {\n        for (const race of races) {\n            while (race.state !== RoundState.COMPLETE) {\n                race.run_race_step();\n            }\n        }\n        setRefresh(!refresh);\n    }\n\n\n    // Render Everything\n    if (isLoading || activeRace == null)\n        return <h1> Loading... </h1>\n\n    const pageButtonStyle = { borderRadius: 0, height: \"100%\", width: '50%' };\n    let pageButtons = (\n        <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n            <Button onClick={() => setPage(0)} disabled={page === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Election'}\n            </Button>\n            <Button onClick={() => setPage(1)} disabled={page === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Charts'}\n            </Button>\n            <Button onClick={() => setPage(2)} disabled={page === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Models'}\n            </Button>\n        </ButtonGroup>\n    );\n\n    let raceTitle = (\n        <div className=\"title-text\" style={{ width: '100%', backgroundColor: 'grey', margin: '1% 2.5% 1% 2.5%', borderRadius: '5px' }}>\n            <h1 style={{ font: '3.5rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '1%' }}> {activeRace.race_name} </h1>\n        </div>\n    );\n\n    if (page === 0) {\n\n        let dropdownItems = races.map((item, index) => (\n            <Dropdown.Item key={index} as=\"button\" onClick={() => switchActiveRace(item)} > {item.race_name}</Dropdown.Item >\n        ));\n\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap' }}>\n                {pageButtons}\n                {raceTitle}\n                <div className=\"election-table\" style={{ width: '100%' }}>\n                    <CandidateList candidates={activeRace.candidateTable} seats={activeRace.seats} refresh={refresh} />\n                </div>\n                <ButtonGroup size=\"lg\" style={{ borderRadius: '5px', width: '100%', margin: '0% 2.5% 0% 2.5%' }}>\n                    <DropdownButton id=\"dropdown-item-button\" as={ButtonGroup} title=\"Change Race\" variant=\"primary\" size=\"lg\" style={{ boxShadow: '0 0 0 1px black', borderRadius: '5px 0px 0px 5px' }}>\n                        {dropdownItems}\n                    </DropdownButton>\n                    <Button onClick={() => setIsRunning(true)} disabled={isRunning} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Run Election'}\n                    </Button>\n                    <Button onClick={finishRaces} disabled={false} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Finish Races'}\n                    </Button>\n                    <div style={{ boxShadow: '0 0 0 1px black', backgroundColor: '#007bff', width: '30%', borderRadius: '0px 5px 5px 0px' }}>\n                        <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '5% 0 0 0' }}>\n                            Speed\n                        </label>\n                        <div style={{ margin: '0% 5% 0% 5%' }}>\n                            <RangeSlider\n                                min={0}\n                                max={10000}\n                                step={10}\n                                value={speed}\n                                variant=\"secondary\"\n                                onChange={changeEvent => setSpeed(changeEvent.target.value)}\n                            />\n                        </div>\n                    </div>\n                </ButtonGroup>\n            </div >\n        );\n    } else if (page === 1) {\n        let chartStyle = {\n            alignSelf: 'center', width: '50%', height: '30vw',\n        }\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap', width: '100%' }}>\n                {pageButtons}\n                {raceTitle}\n                <FirstChoicePie race={activeRace} parties={parties} style={chartStyle} />\n                <ElectedCandidatesPie race={activeRace} parties={parties} style={chartStyle} />\n                <CandidatesRanked race={activeRace} parties={parties} style={chartStyle} />\n                <CandidatesRankedPie race={activeRace} style={chartStyle} />\n                <PartyPercentage race={activeRace} parties={parties} style={chartStyle} />\n                <VoteOverTime race={activeRace} parties={parties} style={chartStyle} />\n                <VoteOverTimeBump race={activeRace} style={chartStyle} />\n                <EventualWinner race={activeRace} style={chartStyle} />\n                <RoundCandidateBump race={activeRace} style={chartStyle} />\n            </div >\n        );\n    } else {\n        let modelButtons = (\n            <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n                <Button onClick={() => setModel(0)} disabled={model === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Bar'}\n                </Button>\n                <Button onClick={() => setModel(1)} disabled={model === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Heat Map'}\n                </Button>\n                <Button onClick={() => setModel(2)} disabled={model === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Sankey'}\n                </Button>\n            </ButtonGroup>\n        );\n        if (model === 0) {\n            return (\n                <div className=\"text-center\" style={{\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <div style={{ display: \"flex\", flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center', width: '100%' }}>\n                        <ElectionBar race={activeRace} style={{ alignSelf: 'center', width: '40vw' }} />\n                    </div>\n                </div>\n            );\n        }\n        else if (model === 1) {\n            return (\n                <div className=\"text-center\" style={{\n                    height: '100%',\n                    minHeight: '100%',\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <HeatMap race={activeRace} />\n                    <Chord race={activeRace} />\n                </div >\n            );\n        }\n        else {\n            return (\n                <div className=\"text-center\" style={{\n                    height: '100%',\n                    minHeight: '100%',\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <NivoSankey race={activeRace} style={{\n                        width: '90%',\n                        height: '60vw'\n                    }}\n                    />\n                </div >\n            );\n        }\n    }\n    // <SankeyGraph race={activeRace} width={\"1000\"} height={activeRace.candidates.length * 100} />\n}\n\nexport default ElectionPage;","import React, { Component } from 'react';\n\n\nexport class FourZeroFour extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>404: Oops! Page not found!</h1>\n            </div>)\n    }\n}\nexport default FourZeroFour;\n","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport Button from 'react-bootstrap/Button'\n\nimport { Form } from 'react-bootstrap';\n\nfunction AddToDatabase() {\n    const AddToDB = (event) => {\n        const checkStrings = (str) => {\n            return str === null || str.match(/^ *$/) !== null;\n        }\n        event.preventDefault();\n        let data = ({ election_configuration: election_configuration, candidate_data: candidate_data, ballot_data: ballot_data, parties_data: party_data });\n        if (!checkStrings(electionName) && !checkStrings(year)) {\n            firebase.database().ref(\"elections/\" + electionName + \"/\" + year).set(data);\n            alert(\"Added To Database: elections/\" + electionName + \"/\" + year);\n        }\n        else {\n            alert('Invalid Name');\n        }\n    }\n\n    const onChange = async (event, callback) => {\n        event.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (event) => {\n            callback(JSON.parse(event.target.result));\n        };\n        if (event.target.files[0] !== null)\n            reader.readAsText(event.target.files[0]);\n    }\n\n    const [electionName, setElectionName] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [election_configuration, setElectionConfiguration] = useState(null);\n    const [party_data, setPartyData] = useState(null);\n    const [candidate_data, setCandidateData] = useState(null);\n    const [ballot_data, setBallotData] = useState(null);\n\n    return (\n        <div className=\"text-center\">\n            <h1> Add to Database </h1>\n            <Form onSubmit={AddToDB}>\n                <Form.Group>\n                    <Form.Control type=\"text\" value={electionName} onChange={(event) => setElectionName(event.target.value)} placeholder=\"Election Name\" />\n                    <Form.Control type=\"text\" value={year} onChange={(event) => setYear(event.target.value)} placeholder=\"Year\" />\n                </Form.Group>\n                <Form.Group style={{ display: 'grid', justifyItems: 'center' }}>\n                    <Form.File onChange={(event) => onChange(event, setElectionConfiguration)} accept='.json' label=\"Election Configuration\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setPartyData)} label=\"Party Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setCandidateData)} label=\"Candidate Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setBallotData)} label=\"Ballot Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                </Form.Group>\n                <Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Group>\n            </Form>\n        </div >\n    );\n}\n\nexport default AddToDatabase;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Redirect, withRouter } from \"react-router\";\nimport './firebase';\nimport './App.css'\n\nimport NavBar from './Components/NavBar/NavBar';\nimport Home from './Components/Home';\nimport ElectionPage from './Components/ElectionPage/ElectionPage';\nimport FourZeroFour from './Components/FourZeroFour';\nimport AddToDatabase from './Components/AddToDatabase';\n\nimport election_configuration from './Data/Configuration.json';\nimport candidate_data from './Data/Candidates.json';\nimport parties_data from './Data/Parties.json';\nimport ballot_data from './Data/Ballots.json';\n\nconst NavBarWithRouter = withRouter(NavBar);\n\nfunction App() {\n    return (\n        <BrowserRouter basename='/stvote' style={{ width: '100%', height: '100%' }}>\n            <Fragment >\n                <NavBarWithRouter style={{ width: '100%', height: '100%' }} />\n                <main style={{ width: '100%', height: '100%' }}>\n                    <Switch>\n                        <Route exact path='/'> <Redirect to=\"/home\" /> </Route>\n                        <Route path='/home' component={Home} />\n                        <Route exact path='/election' render={() => (<ElectionPage data={{ election_configuration: election_configuration, candidate_data: candidate_data, parties_data: parties_data, ballot_data: ballot_data }} />)} />\n                        <Route exact path='/election/:electionId' component={ElectionPage} />\n                        <Route path='/election/:electionId/:yearId' component={ElectionPage} />\n                        <Route path='/add' component={AddToDatabase} />\n                        <Route component={FourZeroFour} />\n                    </Switch>\n                </main>\n            </Fragment>\n        </BrowserRouter>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{ width: '100%', height: '100%' }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}