{"version":3,"sources":["firebase.js","Components/NavBar/NavBar.js","Components/Home.js","Components/Hooks/useInterval.js","Data_Models/Candidate.js","Components/ElectionPage/Race/ProgressBar.js","Components/ElectionPage/Race/CandidatePosition.js","Components/ElectionPage/Race/CandidateList.js","Data_Models/Round.js","Data_Models/Race.js","Components/ElectionPage/Settings.js","Components/ElectionPage/Models/FirstChoicePie.js","Components/ElectionPage/Models/ElectedCandidatesPie.js","Components/ElectionPage/Models/CandidatesRankedPie.js","Components/ElectionPage/Models/CandidatesRanked.js","Components/ElectionPage/Models/PartyPercentage.js","Components/ElectionPage/Models/EventualWinner.js","Components/ElectionPage/Models/VoteOverTime.js","Components/ElectionPage/Models/VoteOverTimeBump.js","Components/ElectionPage/Models/RoundCandidateBump.js","Data_Models/Voter.js","Data_Models/Ballot.js","Data_Models/Party.js","Components/ElectionPage/Models/Sankey.js","Components/ElectionPage/Models/HeatMap.js","Components/ElectionPage/Models/ElectionBar.js","Components/ElectionPage/Models/Chord.js","Components/ElectionPage/ElectionPage.js","Components/FourZeroFour.js","Components/AddToDatabase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NavBar","props","useState","activeKey","setActiveKey","handleSelect","eventKey","Number","isInteger","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","onClick","Toggle","aria-controls","Collapse","id","Nav","className","onSelect","Link","Home","CreateSelectButton","election_title","filename","years","yearButtons","map","item","index","Button","key","year","console","log","OnClick","ButtonGroup","vertical","size","style","padding","disabled","asuc","asucsb","asucd","asucsc","asucla","display","alignItems","justifyContent","flexWrap","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Candidate","candidate_id","candidate_name","candidate_party","candidate_color","this","CandidateState","ProgressBar","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","color","fontWeight","Math","floor","CandidatePosition","get_status_color","status","position","isNaN","seats","candidate","party_color","party_name","score","margin","quota","min","CandidateList","candidate_list","candidates","sort","x","y","scope","Round","round_number","add_ballot","ballot","value","state","RoundState","COMPLETE","Error","undefined","ballots","ballot_id","find_next_active_candidate","candidate_ballots","push","candidate_scores","active_candidates","includes","add_candidate","elected_candidates","start_inactive_candidates","start_active_candidates","eliminated_candidates","set_elected_candidate","filter","ballotsToTransfer","set_eliminate_candidate","candidate_ballot","candidate_score","complete","isCandidateElected","candidate_real_scores","RUNNING","exhausted","rankings","Race","race_id","race_name","dropped_candidates","dropped","RaceState","ADDING","inactive_candidates","current_candidate","excused","running","length","i","inactive_ballots","excuse_candidate","elected","transferring","transfered","unexcuse_candidate","num_candidates","currentScores","find_candidate_by_id","scores","candidateTable","start_tabulation","TABULATING","run_race_step","elect_candidate","currentRound","Object","keys","surplus","transfer_value","ballots_to_apply","transfer_candidate","rounds","shift","candidate_ballot_rankings","first_round_score","first_scores","activeCandidates","roundElected","maxElected","roundTransfer","reverse","complete_round","round","previousRound","add_round","begin_race","transfer_voters","ElectionSettings","excused_boxes","race","check","Form","Check","label","checked","onChange","FirstChoicePie","find_party_by_name","name","parties","get_ranked_choices","party","ranked_choices","choices","data","totalAmount","top","right","bottom","left","pixelRatio","padAngle","cornerRadius","colors","bar","borderColor","from","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","sliceLabel","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","PartyPercentage","maxChoices","num_ranked","max","scheme","CandidatesRanked","data_to_add","indexBy","innerPadding","minValue","maxValue","groupMode","layout","colorBy","borderWidth","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","isInteractive","maxchoices","datapoints","xScale","type","yScale","stacked","orient","enablePoints","enableArea","areaOpacity","useMesh","eventualElected","electeddatapoints","notelecteddatapoints","VoteOverTime","String","choices_over_time","score_chart","xFormat","yFormat","tickValues","lineWidth","VoteOverTimeBump","indexOfMax","arr","maxIndex","increment","candidate_positions","splice","datapoint","activeLineWidth","inactiveLineWidth","inactiveOpacity","pointSize","activePointSize","inactivePointSize","format","RoundCandidateBump","indexOf","pointColor","theme","pointBorderWidth","activePointBorderWidth","pointBorderColor","Voter","voter_id","participating_races","races","participating_in_race","get_ballot_for_race","Ballot","Party","isValidColor","s","Option","Sankey","active_candidate","prev_round","nodes","links","link","source","target","transfer_candidates_ballot","next_candidate","transfer_candidate_id","GenerateData","align","nodeTooltip","node","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","enableLinkGradient","enableLabels","labelPosition","labelOrientation","labelPadding","HeatMap","get_ballots_for_candidate_at_position","showPercent","xChoice","setXChoice","yChoice","setYChoice","heatData","other_candidate","sum","xButtons","Dropdown","Item","as","yButtons","DropdownButton","title","tooltipFormat","forceSquare","cellOpacity","cellBorderColor","defs","background","rotation","spacing","fill","hoverTarget","cellHoverOthersOpacity","ElectionBar","get_round_data","round_data","get_candidate_position","candidate_table","get_candidate_by_position","final_candidate_score","setRound","data_active_candidates","round_active_candidates","chart_data","transferred","font","step","changeEvent","max_score","get_max_score","Chord","chordData","matrix","valueFormat","innerRadiusRatio","innerRadiusOffset","arcOpacity","arcBorderWidth","arcBorderColor","ribbonOpacity","ribbonBorderWidth","ribbonBorderColor","labelOffset","labelRotation","arcHoverOpacity","arcHoverOthersOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","legends","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","itemTextColor","itemDirection","symbolSize","effects","on","ElectionPage","shadeColor","percent","R","parseInt","substring","G","B","toString","find_race_by_id","find_race_by_name","election_configuration","setElectionConfiguration","candidate_data","setCandidateData","party_data","setPartyData","ballot_data","setBallotData","candidates_dropped","setCandidatesDropped","isLoading","setIsLoading","partiesLoaded","setPartiesLoaded","racesLoaded","setRacesLoaded","candidatesLoaded","setCandidatesLoaded","votersLoaded","setVotersLoaded","setParties","setRaces","voters","setVoters","activeRace","setActiveRace","speed","setSpeed","refresh","setRefresh","isRunning","setIsRunning","page","setPage","model","setModel","a","parties_data","electionId","match","params","yearId","databaseString","database","ref","once","snapshot","exists","child","val","loadData","partiesToAdd","loadParties","racesToAdd","race_position","race_max_winners","loadRaces","candidate_colors","random","number","loadCandidates","voter","uuid","candidateOrder","loadVoters","pageButtonStyle","pageButtons","raceTitle","dropdownItems","boxShadow","chartStyle","alignSelf","ElectedCandidatesPie","CandidatesRankedPie","EventualWinner","modelButtons","minHeight","FourZeroFour","Component","AddToDatabase","event","preventDefault","reader","FileReader","onload","JSON","parse","result","files","readAsText","electionName","setElectionName","setYear","onSubmit","checkStrings","str","alert","set","Group","Control","placeholder","justifyItems","File","accept","NavBarWithRouter","withRouter","App","basename","exact","path","to","component","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e987d7ba.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyCFNJfMcHbdoAKVVF88d-9POsUgk-C7NKk\",\n    authDomain: \"stvote-b967b.firebaseapp.com\",\n    databaseURL: \"https://stvote-b967b.firebaseio.com\",\n    projectId: \"stvote-b967b\",\n    storageBucket: \"stvote-b967b.appspot.com\",\n    messagingSenderId: \"487837721842\",\n    appId: \"1:487837721842:web:95c0dc83a5eeb46b995c6b\"\n}\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { useState } from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction NavBar(props) {\n\n    const [activeKey, setActiveKey] = useState(1);\n\n    const handleSelect = (eventKey) => {\n        if (Number.isInteger(eventKey))\n            setActiveKey(eventKey);\n        else\n            setActiveKey(0);\n    };\n\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/stvote/home\" onClick={handleSelect}>STVote</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav activeKey={activeKey} className=\"mr-auto\" onSelect={handleSelect}>\n                    <Nav.Link eventKey={1} href=\"/stvote/home\">Home</Nav.Link>\n                    <Nav.Link eventKey={1} href=\"/stvote/election\">Election</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\n\nfunction Home(props) {\n    const OnClick = (election_title, year) => {\n\n        console.log(\"Clicked\", election_title, year);\n    }\n    const CreateSelectButton = (election_title, filename, years) => {\n        let yearButtons = years.map((item, index) => (\n            <Button key={index} href={\"/stvote/election/\" + filename + \"/\" + item} onClick={() => OnClick(election_title, item)}>{item}</Button>\n        ));\n\n        return (\n            <ButtonGroup vertical size=\"lg\" style={{ padding: '2%' }}>\n                <Button variant=\"dark\" disabled={true}>{election_title}</Button>\n                {yearButtons}\n            </ButtonGroup>\n        );\n    }\n\n    let asuc = CreateSelectButton('ASUC Berkeley', \"uc_berkeley\", [2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsb = CreateSelectButton('ASUC Santa Barbara', \"uc_santa_barbara\", [2016, 2017, 2018, 2019, 2020]);\n    let asucd = CreateSelectButton('AS UC Davis', \"uc_davis\", [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsc = CreateSelectButton('AS UC Santa Cruz', \"uc_berkeley\", [2018, 2019, 2020]);\n    let asucla = CreateSelectButton('AS UC Los Angeles', \"uc_berkeley\", [2018, 2019, 2020]);\n\n    return (\n        <div className=\"text-center\">\n            <h1> STVote Elections </h1>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly', flexWrap: 'wrap' }}>\n                {asuc}\n                {asucsb}\n                {asucd}\n                {asucsc}\n                {asucla}\n            </div>\n        </div >\n    );\n}\n\nexport default Home;\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","\nexport class Candidate {\n    constructor(candidate_id, candidate_name, candidate_party, candidate_color = \"#FFFFFF\") {\n        this.candidate_id = candidate_id;\n        this.candidate_name = candidate_name;\n        this.candidate_party = candidate_party;\n        this.candidate_color = candidate_color;\n    }\n\n\n}\n\nexport const CandidateState = {\n    ELECTED: \"ELECTED\",\n    RUNNING: \"RUNNING\",\n    TRANSFERRING: \"TRANSFERRING\",\n    TRANSFERED: \"TRANSFERED\",\n    EXCUSED: \"EXCUSED\",\n};","import React from 'react';\n\nconst ProgressBar = (props) => {\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        height: '48px',\n        width: '100%',\n        backgroundColor: \"#fffbf5\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: bgcolor,\n        borderRadius: 'inherit',\n        textAlign: 'right'\n    }\n\n    const labelStyles = {\n        padding: 5,\n        color: 'black',\n        fontWeight: 'bold'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span style={labelStyles}>{`${Math.floor(completed)}%`}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;","import React from 'react';\nimport { CandidateState } from '../../../Data_Models/Candidate';\nimport ProgressBar from './ProgressBar';\nimport '../ElectionPage.css'\n\nfunction CandidatePosition(props) {\n    const get_status_color = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"#01A039\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"#0095E0\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"#E07A00\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"#FF0000\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"#D5D5D5\";\n        return \"#FFFFFF\"\n    }\n\n    const get_status_text = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"ELECTED\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"RUNNING\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"TRANSFERRING\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"TRANSFERED\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"EXCUSED\";\n        return \"\"\n    }\n\n    const get_position = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position))\n            return props.position + 1;\n        return 0;\n    }\n\n    const get_position_color = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position)) {\n            if (props.position < props.seats) {\n                if (props.status === CandidateState.ELECTED)\n                    return \"#01A039\";\n                return \"#C5FFC5\"\n            } else if (props.status === CandidateState.RUNNING)\n                return \"#FAB8B8\";\n            else if (props.status === CandidateState.EXCUSED)\n                return \"#D5D5D5\";\n            else\n                return \"#FF0000\";\n        }\n        return \"#FFFFFF\";\n    }\n\n    const get_percentage = () => {\n        if (props.quota === 0)\n            return 0;\n        return Math.min(100, (props.score / props.quota) * 100);\n    }\n\n    return (\n        <tr>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: get_position_color() }}> {get_position()} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: \"#FFFFFF\" }}> {props.candidate.candidate_name} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: props.candidate.candidate_party.party_color }}> {props.candidate.candidate_party.party_name} </td >\n            <td className=\"basic-row\" width=\"150\" style={{ backgroundColor: get_status_color() }}> {get_status_text()} </td >\n            <td className=\"basic-row\" width=\"100\" style={{ backgroundColor: get_status_color() }}> {Math.floor(props.score)} </td >\n            <td style={{ padding: \"0 0 0 0\", margin: \"0 0 0 0\" }}>\n                <div style={{ display: 'inline-block', width: '100%', height: '100%' }}>\n                    <ProgressBar bgcolor={get_status_color()} completed={get_percentage()} />\n                </div>\n            </td >\n        </tr >\n    );\n}\n\nexport default CandidatePosition;\n","import React from 'react';\nimport CandidatePosition from './CandidatePosition';\nimport '../ElectionPage.css'\n\nfunction CandidateList(props) {\n\n    let sortedCandidates = props.candidates().sort((x, y) => {\n        if (x.position > y.position) {\n            return 1;\n        } else if (y.position > x.position) {\n            return -1;\n        }\n        return 0;\n    });\n\n    let candidate_list = sortedCandidates.map((item, index) => (\n        <CandidatePosition key={index} candidate={item.candidate} status={item.status}\n            score={item.score} position={item.position} quota={item.quota} seats={props.seats} />\n    ));\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-bordered\" >\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >#</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Name</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Party</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\">Status</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" > Score</th >\n                        <th className=\"title-row\" scope=\"col\">Quota Percentage</th>\n                    </tr >\n                </thead >\n                <tbody>\n                    {candidate_list}\n                </tbody>\n            </table >\n        </div >\n    );\n}\n\nexport default CandidateList;\n","import { CandidateState } from \"./Candidate\";\n\nexport class Round {\n    constructor(round_number, quota) {\n        this.round_number = round_number;\n        this.quota = quota;\n        this.state = RoundState.RUNNING;\n\n        this.candidates = []\n\n        this.elected_candidates = []\n        this.active_candidates = []\n        this.start_inactive_candidates = []\n        this.start_active_candidates = []\n        this.eliminated_candidates = []\n\n        this.ballots = { exhausted: 0 }\n        this.ballotsToTransfer = {}\n        this.candidate_ballots = { exhausted: [] }\n        this.candidate_real_scores = {}\n        this.candidate_scores = { exhausted: 0 }\n        this.rankings = {};\n    }\n\n    add_ballot = (ballot, value) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        if (this.ballots[ballot.ballot_id] !== undefined)\n            throw new Error(\"Already added Ballot\");\n\n        let candidate = this.find_next_active_candidate(ballot.candidates);\n        if (candidate !== \"exhausted\") {\n            this.candidate_ballots[candidate.candidate_id].push(ballot);\n            this.candidate_scores[candidate.candidate_id] += value;\n        } else {\n            this.candidate_ballots[candidate].push(ballot);\n            this.candidate_scores[candidate] += value;\n        }\n        this.ballots[ballot.ballot_id] = value;\n    }\n\n    find_next_active_candidate = (candidates) => {\n        for (const candidate of candidates)\n            if (this.active_candidates.includes(candidate))\n                return candidate\n        return \"exhausted\";\n    }\n\n    add_candidate = (candidate, state) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        this.candidates.push(candidate);\n        if (state === CandidateState.ELECTED) {\n            this.elected_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        } else if (state === CandidateState.RUNNING) {\n            this.active_candidates.push(candidate);\n            this.start_active_candidates.push(candidate);\n        } else {\n            this.eliminated_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        }\n\n        this.candidate_ballots[candidate.candidate_id] = [];\n        this.candidate_scores[candidate.candidate_id] = 0;\n    }\n\n    set_elected_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.elected_candidates.push(candidate);\n    }\n\n    set_eliminate_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.eliminated_candidates.push(candidate);\n    }\n\n    candidate_ballot = (candidate) => {\n        if (candidate === null)\n            candidate = \"exhausted\";\n        else if (candidate.candidate_id !== undefined)\n            candidate = candidate.candidate_id;\n\n        let ballots = [];\n        for (const ballot of this.candidate_ballots[candidate]) {\n            ballots.push([ballot, this.ballots[ballot.ballot_id]]);\n        }\n        return ballots;\n    }\n\n    candidate_score = (candidate) => {\n        if (candidate.candidate_id !== undefined)\n            return this.candidate_scores[candidate.candidate_id];\n        return this.candidate_scores[candidate];\n    }\n\n    complete = () => {\n        const isCandidateElected = (candidate_id) => {\n            for (const candidate in this.elected_candidates) {\n                if (candidate_id === this.elected_candidates[candidate].candidate_id) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this.candidate_real_scores = { ...this.candidate_scores }\n        for (const candidate_id in this.candidate_real_scores) {\n            if (this.candidate_real_scores[candidate_id] === 0 && isCandidateElected(candidate_id)) {\n                this.candidate_real_scores[candidate_id] = this.quota;\n            }\n        }\n\n        this.state = RoundState.COMPLETE;\n    }\n}\n\nexport const RoundState = {\n    RUNNING: \"RUNNING\",\n    COMPLETE: \"COMPLETE\"\n};","\nimport { Round, RoundState } from './Round';\nimport { CandidateState } from './Candidate';\n\nexport class Race {\n\n    constructor(race_id, race_name, seats, dropped_candidates = []) {\n        this.race_id = race_id\n        this.race_name = race_name\n        this.seats = Number(seats)\n\n        this.rounds = [];\n\n        this.state = RaceState.ADDING;\n\n        this.candidates = []\n        this.inactive_candidates = dropped_candidates;\n        this.ballots = []\n        this.inactive_ballots = []\n\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        this.first_scores = []\n\n        // Set Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n    }\n\n    add_candidate = (candidate, dropped = false) => {\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Candidates While Running\");\n        for (const current_candidate of this.inactive_candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                this.inactive_candidates.push(candidate)\n                return;\n            }\n\n        if (dropped) {\n            this.inactive_candidates.push(candidate)\n            this.excused[candidate.candidate_id] = [0]\n            return\n        }\n        for (const current_candidate of this.candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n    }\n\n    add_ballot = (ballot) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Ballots While Running\");\n        if (find_next_active_candidate(ballot.candidates) === null) {\n            this.inactive_ballots.push(ballot)\n            return;\n        }\n        for (let i = 0; i < this.ballots.length; i++)\n            if (this.ballots[i].ballot_id === ballot.ballot_id)\n                return;\n        this.ballots.push(ballot);\n    }\n\n    excuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Excuse Candidate While Running\");\n\n        // Check if Excused Already Excused\n        for (const current_candidate of this.inactive_candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        delete this.elected[candidate.candidate_id];\n        delete this.running[candidate.candidate_id];\n        delete this.transferring[candidate.candidate_id];\n        delete this.transfered[candidate.candidate_id];\n\n        this.candidates = this.candidates.filter((value) => {\n            return value !== candidate\n        });\n\n\n        this.inactive_candidates.push(candidate)\n        this.excused[candidate.candidate_id] = [0]\n\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n    }\n\n    unexcuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't unexcuse Candidate While Running\");\n\n        // Check if Already Not Excused\n        for (const current_candidate of this.candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        delete this.excused[candidate.candidate_id];\n        this.inactive_candidates = this.inactive_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n\n        for (const ballot of this.inactive_ballots)\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n    }\n\n    num_candidates = () => {\n        return this.candidates.length;\n    }\n\n    quota = () => {\n        if (this.state === RaceState.ADDING)\n            throw new Error(\"Can't Get Quota While Adding Ballots\");\n        return Math.floor(this.ballots.length / (this.seats + 1)) + 1;\n    }\n\n    currentScores = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let scores = [];\n        for (const candidate in this.elected) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.elected[candidate][0],\n            });\n        }\n        for (const candidate in this.running) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.running[candidate][0],\n            });\n        }\n        for (const candidate in this.transferring) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transferring[candidate][0],\n            });\n        }\n        for (const candidate in this.transfered) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transfered[candidate][0],\n            });\n        }\n        for (const candidate in this.inactive_candidates) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: 0,\n            });\n        }\n        return scores;\n    }\n\n    candidateTable = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let quota = 0;\n        if (this.state !== RaceState.ADDING)\n            quota = this.quota();\n\n        let candidateTable = []\n        // Candidate, Status, Position, Score\n\n        for (const candidate in this.elected) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.ELECTED,\n                position: this.elected[candidate][1],\n                score: this.elected[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.running) {\n            if (this.state === RaceState.ADDING) {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: candidateTable.length,\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            } else {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: this.running[candidate][1],\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            }\n        }\n        for (const candidate in this.transferring) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERRING,\n                position: this.transferring[candidate][1],\n                score: this.transferring[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.transfered) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERED,\n                position: this.transfered[candidate][1],\n                score: this.transfered[candidate][0],\n                quota: quota,\n            });\n        }\n\n        for (const candidate in this.excused) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.EXCUSED,\n                position: this.candidates.length,\n                score: 0,\n                quota: quota,\n            });\n        }\n        return candidateTable;\n    }\n\n    start_tabulation = () => {\n        if (this.state === RaceState.ADDING)\n            this.state = RaceState.TABULATING;\n    }\n\n    run_race_step = () => {\n        const begin_race = () => {\n            console.log(\"Beginning Race for\", this.race_name);\n            console.log(\"Total Voters is: \" + this.ballots.length + \" , for \" + this.seats + \" seats.\")\n            console.log(\"Quota is\", this.quota())\n            if (this.ballots.length === 0) {\n                this.state = RaceState.COMPLETE;\n                console.log(\"No Ballots Cast in Race\");\n            }\n            else {\n                let round = new Round(0, this.quota());\n\n                for (let i = 0; i < this.candidates.length; i++) {\n                    round.add_candidate(this.candidates[i], CandidateState.RUNNING);\n                }\n\n\n                for (let i = 0; i < this.ballots.length; i++) {\n                    this.ballots_to_apply.push([this.ballots[i], 1]);\n                }\n                this.rounds.push(round);\n            }\n        }\n\n        const add_round = () => {\n            const find_candidate_by_id = (id) => {\n                for (const candidate of this.candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                for (const candidate of this.inactive_candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                return null;\n            }\n            console.log(\"Starting Round\", this.rounds.length);\n            let round = new Round(this.rounds.length, this.quota());\n            let previousRound = this.rounds[this.rounds.length - 1];\n\n            for (const candidate in this.elected) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.ELECTED);\n            }\n            for (const candidate in this.running) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.RUNNING);\n                for (const ballot of previousRound.candidate_ballot(candidate)) {\n                    round.add_ballot(ballot[0], ballot[1]);\n                }\n            }\n            for (const candidate in this.transferring) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERRING);\n            }\n            for (const candidate in this.transfered) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERED);\n            }\n            for (const candidate in this.excused) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.EXCUSED);\n            }\n\n            for (const ballot of previousRound.candidate_ballot(null)) {\n                round.add_ballot(ballot[0], ballot[1]);\n            }\n\n            this.rounds.push(round);\n        }\n\n        const elect_candidate = (candidate, score, currentRound) => {\n            console.log(\"Electing Candidate: \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_elected_candidate(candidate);\n\n            this.elected[candidate.candidate_id] = [score, Object.keys(this.elected).length];\n            delete this.running[candidate.candidate_id];\n\n            const surplus = score - this.quota();\n\n            let transfer_value = 1;\n            if (surplus > 0) {\n                transfer_value = surplus / score;\n            }\n\n            for (const ballot of currentRound.candidate_ballot(candidate)) {\n                this.ballots_to_apply.push([ballot[0], ballot[1] * transfer_value]);\n            }\n        }\n\n        const transfer_candidate = (candidate, score, currentRound) => {\n            console.log(\"Transferring Candidate \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_eliminate_candidate(candidate);\n\n            this.transferring[candidate.candidate_id] = [score, Object.keys(this.elected).length + Object.keys(this.running).length - 1];\n            delete this.running[candidate.candidate_id];\n\n            for (const ballot of currentRound.candidate_ballot(candidate))\n                this.ballots_to_apply.push(ballot)\n        }\n\n        const complete_round = (currentRound) => {\n            console.log(\"Completed Round\", currentRound.round_number);\n            currentRound.complete();\n\n            if (currentRound.active_candidates.length === 0) {\n                console.log(\"Race Complete\");\n                for (const candidate in this.transferring) {\n                    this.transfered[candidate] = this.transferring[candidate];\n                    delete this.transferring[candidate]\n                }\n                console.log(this.rounds);\n                this.state = RaceState.COMPLETE;\n            }\n        }\n\n        if (this.state === RaceState.COMPLETE)\n            return;\n        this.state = RaceState.TABULATING;\n\n        if (this.rounds.length === 0) {\n            begin_race();\n            return;\n        }\n\n        let currentRound = this.rounds[this.rounds.length - 1];\n        if (currentRound.state === RoundState.COMPLETE) {\n            add_round();\n            return;\n        }\n\n        if (this.ballots_to_apply.length > 0) {\n            let ballot = this.ballots_to_apply.shift();\n            currentRound.add_ballot(ballot[0], ballot[1]);\n\n            if (this.rounds.length === 1) {\n                const find_next_active_candidate = (candidates) => {\n                    for (const candidate of candidates)\n                        if (this.candidates.includes(candidate))\n                            return candidate\n                    return null;\n                }\n\n                for (let i = 0; i < ballot[0].candidates.length; i++) {\n                    const candidate = ballot[0].candidates[i];\n                    if (this.candidate_ballot_rankings[candidate] === undefined)\n                        this.candidate_ballot_rankings[candidate] = [];\n                    while (this.candidate_ballot_rankings[candidate].length < i + 1)\n                        this.candidate_ballot_rankings[candidate].push(0);\n                    this.candidate_ballot_rankings[candidate][i] += 1\n                }\n\n                let first_round_score = {};\n                if (this.first_scores.length !== 0) {\n                    first_round_score = { ...this.first_scores[this.first_scores.length - 1] };\n                }\n                let candidate = find_next_active_candidate(ballot[0].candidates)\n                if (candidate !== null) {\n                    if (candidate.candidate_id in first_round_score)\n                        first_round_score[candidate.candidate_id] += 1;\n                    else\n                        first_round_score[candidate.candidate_id] = 1;\n                    this.first_scores.push(first_round_score);\n                }\n            }\n\n            let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n                if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                    return -1;\n                } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                    return 1;\n                }\n                return 0;\n            });\n\n            for (let i = 0; i < activeCandidates.length; i++) {\n                this.running[activeCandidates[i].candidate_id] = [currentRound.candidate_score(activeCandidates[i]), Object.keys(this.elected).length + i];\n            }\n\n            return;\n        }\n\n        for (const candidate in this.transferring) {\n            this.transfered[candidate] = this.transferring[candidate];\n            delete this.transferring[candidate]\n        }\n\n        let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n            if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                return -1;\n            } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let roundElected = [];\n        let maxElected = this.seats - Object.keys(this.elected).length;\n\n        if (activeCandidates.length <= maxElected) {\n            for (const candidate of activeCandidates) {\n                if (currentRound.elected_candidates) {\n                    roundElected.push(candidate);\n                }\n            }\n        } else {\n            for (const candidate of activeCandidates) {\n                if (currentRound.candidate_score(candidate) >= this.quota()) {\n                    roundElected.push(candidate);\n                }\n            }\n        }\n\n        for (const candidate of roundElected) {\n            elect_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n        }\n\n        let roundTransfer = [];\n        if (Object.keys(this.elected).length === this.seats) {\n            for (const candidate of activeCandidates.reverse()) {\n                roundTransfer.push(candidate);\n            }\n        } else if (roundElected.length === 0) {\n            roundTransfer.push(activeCandidates[activeCandidates.length - 1]);\n        }\n\n        for (const candidate of roundTransfer) {\n            if (!currentRound.elected_candidates.includes(candidate)) {\n                transfer_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n            }\n        }\n\n        complete_round(currentRound);\n    }\n};\n\nexport const RaceState = {\n    ADDING: \"ADDING\",\n    TABULATING: \"TABULATING\",\n    COMPLETE: \"COMPLETE\"\n};","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport { RaceState } from '../../Data_Models/Race';\n\nfunction ElectionSettings(props) {\n    let candidates = [...props.race.candidates, ...props.race.inactive_candidates]\n\n    let excused_boxes = candidates.map((candidate, index) => {\n        const check = props.race.candidates.includes(candidate);\n        return <Form.Check label={candidate.candidate_name} key={index} checked={check} onChange={() => (props.excused(candidate))} />\n    });\n\n    if (props.race.state === RaceState.ADDING)\n        return (\n            <div>\n                {excused_boxes}\n            </div>\n        );\n    else {\n        return (<h1> Race is Active </h1>)\n    }\n\n}\n\nexport default ElectionSettings;","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction FirstChoicePie(props) {\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const ballot of race.ballots) {\n            if (ballot.candidates[0].candidate_party.party_name === party.party_name)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default FirstChoicePie;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n    const find_candidate_by_id = (race, id) => {\n        for (const candidate of race.candidates)\n            if (candidate.candidate_id === id)\n                return candidate;\n        return null;\n    }\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const candidate in race.elected) {\n            if (find_candidate_by_id(race, candidate).candidate_party === party)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n\n    const get_ranked_choices = (race) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item]\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar'\n\nfunction CandidatesRanked(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            if (ballot.candidates[0].candidate_party.party_name !== party.party_name)\n                continue;\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = {};\n    let keys = []\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n        keys.push(party.party_name);\n    }\n\n    let data = [];\n\n    for (let i = 1; i < maxChoices + 1; i++) {\n        let data_to_add = { index: i };\n        for (const item in choices) {\n            if (i in choices[item]) {\n                data_to_add[item] = choices[item][i];\n                data_to_add[item + \"Color\"] = choices[item][i];\n            }\n        }\n        data.push(data_to_add);\n    }\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsiveBarCanvas\n                data={data}\n                keys={keys}\n                indexBy=\"index\"\n                margin={{ top: 40, right: 40, bottom: 40, left: 60 }}\n                pixelRatio={2}\n                padding={0.05}\n                innerPadding={0}\n                minValue=\"auto\"\n                maxValue=\"auto\"\n                groupMode=\"stacked\"\n                layout=\"vertical\"\n                reverse={false}\n                colors={getColor}\n                colorBy=\"id\"\n                borderWidth={0}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Candidates Ranked',\n                    legendPosition: 'middle',\n                    legendOffset: 30\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Number of Voters',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                enableGridX={false}\n                enableGridY={true}\n                enableLabel={false}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                isInteractive={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\n\n\nfunction PartyPercentage(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            for (let i = 0; i < ballot.candidates.length; i++) {\n                maxchoices = Math.max(i, maxchoices);\n                if (ballot.candidates[i].candidate_party.party_name === party.party_name)\n                    if (i in ranked_choices)\n                        ranked_choices[i] += 1;\n                    else\n                        ranked_choices[i] = 1;\n            }\n        }\n        return ranked_choices;\n    }\n    let maxchoices = 0;\n    let choices = {};\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    for (const item in choices) {\n        let datapoints = [];\n        for (let i = 1; i < maxchoices + 1; i++) {\n            if (i in choices[item])\n                datapoints.push({ x: i, y: choices[item][i - 1] })\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\n\nfunction CandidatesRanked(props) {\n    const get_ranked_choices = (race) => {\n        let ranked_choices = {};\n        for (const ballot of race.ballots) {\n            maxChoices = Math.max(ballot.candidates.length, maxChoices);\n        }\n        for (let i = 0; i < maxChoices; i++) {\n            ranked_choices[i] = 0;\n        }\n\n        for (const ballot of race.ballots) {\n            let eventualElected = false;\n            for (let i = 0; i < maxChoices; i++) {\n                if (i < ballot.candidates.length && !eventualElected) {\n                    for (const candidate in race.elected) {\n                        if (candidate === ballot.candidates[i].candidate_id)\n                            eventualElected = true;\n                    }\n                }\n\n                if (eventualElected)\n                    ranked_choices[i] += 1;\n            }\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let electeddatapoints = [];\n    for (let i = 1; i < maxChoices + 1; i++) {\n        if (i in choices)\n            electeddatapoints.push({ x: i, y: choices[i] })\n    }\n\n    let notelecteddatapoints = [];\n    for (let i = 1; i < maxChoices + 1; i++) {\n        if (i in choices)\n            notelecteddatapoints.push({ x: i, y: (props.race.ballots.length - choices[i]) })\n    }\n\n    let data =\n        [{\n            id: \"elected\",\n            color: \"red\",\n            data: electeddatapoints\n        },\n        {\n            id: \"notelected\",\n            color: \"blue\",\n            data: notelecteddatapoints,\n        }]\n\n    const getColor = bar => {\n        console.log(bar.id);\n        if (bar.id === \"elected\")\n            return \"#0d00ff\";\n        return '#ff0000';\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLineCanvas } from '@nivo/line'\n\nfunction VoteOverTime(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const find_candidate_by_id = (candidate_id) => {\n        for (let i = 0; i < props.race.candidates.length; i++)\n            if (String(props.race.candidates[i].candidate_id) === candidate_id)\n                return props.race.candidates[i];\n        return null;\n    };\n\n    let choices_over_time = {};\n    for (const party of props.parties) {\n        choices_over_time[party.party_name] = [];\n    }\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 100);\n\n    for (let i = 0; i < props.race.first_scores.length; i += 1) {\n        const score_chart = props.race.first_scores[i];\n\n        let choices = {}\n        for (const party of props.parties) {\n            choices[party.party_name] = 0;\n        }\n\n        for (const candidate_id in score_chart) {\n            const candidate = find_candidate_by_id(candidate_id);\n            choices[candidate.candidate_party.party_name] += score_chart[candidate_id];\n        }\n\n        for (const party of props.parties) {\n            choices_over_time[party.party_name] = [...choices_over_time[party.party_name], choices[party.party_name]];\n        }\n    }\n\n    let data = [];\n    for (const item in choices_over_time) {\n        let datapoints = [];\n        for (let i = 0; i < choices_over_time[item].length; i++) {\n            if (choices_over_time[item][i] !== 0) {\n                datapoints.push({ x: (i * 1), y: ((choices_over_time[item][i]) / ((i + 1) * 1) * 100) })\n            }\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLineCanvas\n                data={data}\n                margin={{ top: 50, right: 160, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear' }}\n                xFormat={',.2r'}\n                yScale={{ type: 'linear', stacked: false, min: 0, max: 100 }}\n                yFormat={',.2r'}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    tickValues: 5,\n                    legend: 'Votes',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Percentage',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                enableGridX={false}\n                colors={getColor}\n                lineWidth={1}\n                enablePoints={false}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTime;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\n\n\nfunction VoteOverTimeBump(props) {\n    const indexOfMax = (arr) => {\n        if (arr.length === 0) {\n            return -1;\n        }\n\n        var max = arr[0];\n        var maxIndex = 0;\n\n        for (var i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                maxIndex = i;\n                max = arr[i];\n            }\n        }\n\n        return maxIndex;\n    }\n\n\n    let choices_over_time = [];\n\n    if (props.race.first_scores.length <= 1)\n        return (<div></div>);\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 50);\n\n    for (let i = 0; i < props.race.first_scores.length; i += increment) {\n        const score_chart = props.race.first_scores[i]\n\n        let candidate_positions = {};\n        let candidates = []\n        let scores = []\n        for (const candidate of props.race.candidates) {\n            candidates.push(candidate);\n            if (candidate.candidate_id in score_chart)\n                scores.push(score_chart[candidate.candidate_id]);\n            else\n                scores.push(0);\n        }\n\n        let position = 1;\n        while (scores.length > 0) {\n            let i = indexOfMax(scores);\n            scores.splice(i, 1);\n            candidate_positions[candidates[i].candidate_id] = position;\n            candidates.splice(i, 1);\n            position++;\n        }\n        choices_over_time.push(candidate_positions);\n    }\n\n\n    let data = [];\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (let i = 0; i < choices_over_time.length; i++) {\n            datapoint.push({ x: (i + 1) * increment, y: choices_over_time[i][candidate.candidate_id] });\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n    console.log(data);\n\n\n    return (\n        <div style={props.style}>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={{ scheme: 'spectral' }}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 90,\n                    tickValues: 5,\n                    format: \".2s\",\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTimeBump;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\n\n\nfunction RoundCandidateBump(props) {\n\n    if (props.race.rounds.length === 0)\n        return (<div></div>);\n\n    let data = []\n\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (const round of props.race.rounds) {\n            if (round.elected_candidates.includes(candidate)) {\n                datapoint.push({ x: round.round_number + 1, y: props.race.elected[candidate.candidate_id][1] + 1 });\n            } else if (round.eliminated_candidates.includes(candidate)) {\n                if (candidate.candidate_id in props.race.transferring)\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transferring[candidate.candidate_id][1] + 1 });\n                else\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transfered[candidate.candidate_id][1] + 1 });\n            } else {\n                let active_candidates = round.active_candidates.sort((x, y) => {\n                    if (round.candidate_score(x) > round.candidate_score(y)) {\n                        return -1;\n                    } else if (round.candidate_score(y) > round.candidate_score(x)) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                datapoint.push({ x: round.round_number + 1, y: active_candidates.indexOf(candidate) + round.elected_candidates.length + 1 });\n            }\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n\n    return (\n        <div style={props.style}>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={{ scheme: 'spectral' }}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                pointColor={{ theme: 'background' }}\n                pointBorderWidth={3}\n                activePointBorderWidth={3}\n                pointBorderColor={{ from: 'serie.color' }}\n                axisTop={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: -36\n                }}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default RoundCandidateBump;\n","\nexport class Voter {\n    constructor(voter_id) {\n        this.voter_id = voter_id;\n\n        // Format\n        // {id: Ballot}\n        this.races = {};\n    }\n\n    participating_races = () => {\n        return Object.keys(this.races);\n    }\n\n    participating_in_race = (race_id) => {\n        return race_id in this.races;\n    }\n\n    get_ballot_for_race = (race_id) => {\n        if (race_id in this.races) {\n            if (this.races[race_id].length === 1)\n                return this.races[race_id][0]\n            return this.races[race_id];\n        }\n        return null;\n    }\n\n    add_ballot = (race_id, ballot) => {\n        if (ballot.candidates.length > 0) {\n            if (race_id in this.races) {\n                this.races[race_id] = [...this.races[race_id], ballot]\n            } else {\n                this.races[race_id] = [ballot];\n            }\n        }\n    }\n}","\nexport class Ballot {\n    constructor(ballot_id, candidates) {\n        this.ballot_id = ballot_id;\n        this.candidates = candidates;\n    }\n}","\nexport class Party {\n    constructor(party_name, party_color) {\n        this.party_name = party_name;\n\n        if (!this.isValidColor(party_color)) {\n            party_color = \"#\" + party_color\n            if (!this.isValidColor(party_color)) {\n                console.log(\"Error Color Isn't Valid\", party_color)\n                party_color = \"#FFFFFF\"\n            }\n        }\n        this.party_color = party_color;\n    }\n\n    isValidColor = (color) => {\n        var s = new Option().style;\n        s.color = color;\n        return s.color !== '';\n    }\n}","import React from 'react';\n\nimport { ResponsiveSankey } from '@nivo/sankey'\n\nfunction Sankey(props) {\n\n    const GenerateData = (race) => {\n        const find_candidate_by_id = (candidate_id) => {\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n            return null;\n        };\n\n        const find_next_active_candidate = (candidates, active_candidates) => {\n            for (const candidate in candidates) {\n                for (const active_candidate in active_candidates) {\n                    if (candidates[candidate].candidate_id === active_candidates[active_candidate].candidate_id) {\n                        return candidates[candidate];\n                    }\n                }\n            }\n            return \"exhausted\";\n        }\n\n        const prev_round = (round) => {\n            return race.rounds[round.round_number - 1];\n        }\n\n        let data = { nodes: [{ id: \"Total Votes\", name: \"Total Votes\", color: \"#000000\" }, { id: \"Elected\", name: \"Elected\", color: \"#01A039\" }, { id: \"Exhausted\", name: \"Exhausted\", color: \"#FF0000\" }], links: [] }\n        for (const round_number in race.rounds) {\n            const round = race.rounds[round_number];\n            for (const candidate of round.start_active_candidates) {\n                data[\"nodes\"].push({ id: candidate.candidate_name + \" \" + round_number, name: candidate.candidate_name, color: candidate.candidate_party.party_color });\n            }\n            if (round.round_number === 0) {\n                // First Round so Count Vote Totals\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: \"Total Votes\", target: candidate.candidate_name + \" \" + round.round_number, value: round.candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n            } else {\n                // First add links from prior rounds\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: candidate.candidate_name + \" \" + round.round_number, value: prev_round(round).candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    // Check if elected this round and add link if elected\n\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n\n                // Then add links from eliminated or elected candidates\n                for (const candidate_id in prev_round(round).ballotsToTransfer) {\n                    const candidate = find_candidate_by_id(candidate_id);\n\n                    // Find candidates that it will transfer to\n                    let transfer_candidates_ballot = {};\n\n                    let candidate_ballots = prev_round(round).ballotsToTransfer[candidate_id];\n                    for (const ballot in candidate_ballots) {\n                        const next_candidate = find_next_active_candidate(candidate_ballots[ballot].candidates, round.start_active_candidates);\n                        if (next_candidate !== \"exhausted\") {\n                            if (next_candidate.candidate_id in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate.candidate_id].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate.candidate_id] = [candidate_ballots[ballot]];\n                        } else {\n                            if (next_candidate in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate] = [candidate_ballots[ballot]];\n                        }\n                    }\n\n\n                    for (const transfer_candidate_id in transfer_candidates_ballot) {\n                        if (transfer_candidate_id !== \"exhausted\") {\n                            const transfer_candidate = find_candidate_by_id(transfer_candidate_id);\n\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: transfer_candidate.candidate_name + \" \" + round.round_number, value: value };\n                            data['links'].push(link);\n                        }\n                        else {\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: \"Exhausted\", value: value };\n                            data['links'].push(link);\n                        }\n                    }\n                }\n            }\n            if (round.round_number === race.rounds.length - 1) {\n                for (const candidate of round.start_active_candidates) {\n                    if (round.elected_candidates.includes(candidate)) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                    else {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Exhausted\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                }\n            }\n        }\n        return data;\n    }\n\n    if (props.race.rounds.length === 0)\n        return (<h1>Loading</h1>)\n\n\n    const data = GenerateData(props.race);\n\n    return (\n        <div style={props.style}>\n            <ResponsiveSankey\n                data={data}\n                margin={{ top: 100, right: 40, bottom: 100, left: 40 }}\n                layout=\"vertical\"\n                align=\"justify\"\n                sort=\"ascending\"\n                colors={{ scheme: 'category10' }}\n                nodeTooltip={node => <span> {node.name}: {Math.round(node.value)}</span>}\n                nodeOpacity={1}\n                nodeThickness={10}\n                nodeInnerPadding={3}\n                nodeSpacing={10}\n                nodeBorderWidth={0}\n                nodeBorderColor={{ from: 'color', modifiers: [['darker', 0.8]] }}\n                linkOpacity={0.4}\n                linkHoverOpacity={0.8}\n                linkHoverOthersOpacity={0.1}\n                enableLinkGradient={true}\n                enableLabels={true}\n                label={node => `${node.name}`}\n                labelPosition=\"outside\"\n                labelOrientation=\"vertical\"\n                labelPadding={16}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default Sankey;","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveHeatMapCanvas } from '@nivo/heatmap'\n\nfunction HeatMap(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [showPercent, setShowPercent] = useState(true);\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let heatData = { candidate: candidate.candidate_name };\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            if (!showPercent)\n                heatData[other_candidate.candidate_name] = sum;\n            else\n                heatData[other_candidate.candidate_name] = Math.round((sum / ballots.length) * 100);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(heatData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveHeatMapCanvas\n                    data={data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    tooltipFormat={\".0%\"}\n                    margin={{ top: 100, right: 60, bottom: 60, left: 60 }}\n                    forceSquare={true}\n                    axisTop={{ orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -90, legend: '', legendOffset: 36 }}\n                    axisRight={null}\n                    axisBottom={null}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    cellOpacity={1}\n                    cellBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.8]] }}\n                    defs={[\n                        {\n                            id: 'lines',\n                            type: 'patternLines',\n                            background: 'inherit',\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            rotation: -45,\n                            lineWidth: 4,\n                            spacing: 7\n                        }\n                    ]}\n                    fill={[{ id: 'lines' }]}\n                    animate={true}\n                    motionStiffness={80}\n                    motionDamping={9}\n                    hoverTarget=\"cell\"\n                    cellHoverOthersOpacity={0.25}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default HeatMap;\n","import React, { useState } from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar';\n\nimport { RaceState } from '../../../Data_Models/Race';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n\nfunction ElectionBar(props) {\n    const get_round_data = (round, active_candidates) => {\n        let round_data = {};\n        for (let i = 0; i < active_candidates.length; i++) {\n            round_data[active_candidates[i].candidate_id] = { position: i, score: round.candidate_score(active_candidates[i]) }\n        }\n        return round_data;\n    }\n\n    const get_candidate_position = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.position;\n            }\n        }\n        return 0;\n    }\n\n    const get_max_score = () => {\n        let max_score = quota;\n        for (const candidate_table of candidateTable) {\n            max_score = Math.max(candidate_table.score, max_score);\n        }\n        return max_score\n    }\n\n    const get_candidate_by_position = (position) => {\n        for (const candidate of props.race.candidates) {\n            if (get_candidate_position(candidate) === position) {\n                return candidate;\n            }\n        }\n        return 0;\n    }\n\n    const final_candidate_score = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.score;\n            }\n        }\n        return 0;\n    }\n\n    const [round, setRound] = useState(1);\n    const candidateTable = props.race.candidateTable();\n\n    if (props.race.rounds === 0 || props.race.state === RaceState.ADDING)\n        return <h1> Loading... </h1>\n\n    let quota = props.race.quota();\n\n    let data_active_candidates = [];\n    // Get Candidates to Display\n    let round_active_candidates = props.race.rounds[round - 1].active_candidates;\n    for (let i = 0; i < round; i++) {\n        data_active_candidates.push(get_round_data(props.race.rounds[i],\n            round_active_candidates));\n    }\n\n    let keys = [\"elected\", \"transferred\"]\n    let chart_data = [];\n\n    for (let i = 0; i < props.race.rounds[round - 1].candidates.length; i++) {\n        const candidate = get_candidate_by_position(i);\n        if (round_active_candidates.includes(candidate)) {\n            let data = { candidate: candidate.candidate_name };\n            for (let i = 0; i < round; i++) {\n                let score = data_active_candidates[i][candidate.candidate_id].score;\n                if (i !== 0) {\n                    score -= data_active_candidates[i - 1][candidate.candidate_id].score;\n                }\n                data[\"Round \" + (i + 1)] = score;\n                if (!keys.includes(\"Round \" + (i + 1))) {\n                    keys.push(\"Round \" + (i + 1));\n                }\n            }\n            chart_data.push(data);\n        } else if (props.race.rounds[round - 1].elected_candidates.includes(candidate)) {\n            chart_data.push({ candidate: candidate.candidate_name, elected: props.race.rounds[round - 1].candidate_real_scores[candidate.candidate_id] });\n        } else {\n            chart_data.push({ candidate: candidate.candidate_name, transferred: final_candidate_score(candidate) });\n        }\n    }\n    return (\n        <div style={{ width: '100%', height: '50vw' }}>\n            <div style={{ width: '80%' }}>\n                <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'black', textAlign: 'center', padding: '5% 0 0 0' }}>\n                    Round\n                </label>\n                <div style={{ margin: '0% 5% 0% 5%' }}>\n                    <RangeSlider\n                        min={1}\n                        max={props.race.rounds.length}\n                        step={1}\n                        value={round}\n                        variant=\"secondary\"\n                        onChange={changeEvent => setRound(changeEvent.target.value)}\n                    />\n                </div>\n            </div>\n            <div style={{ width: '100%', height: '50vw' }}>\n                <ResponsiveBarCanvas\n                    data={chart_data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    margin={{ top: 40, right: 40, bottom: 200, left: 60 }}\n                    maxValue={get_max_score()}\n                    pixelRatio={2}\n                    padding={0.05}\n                    innerPadding={0}\n                    groupMode=\"stacked\"\n                    layout=\"vertical\"\n                    reverse={false}\n                    colors={{ scheme: 'nivo' }}\n                    colorBy=\"id\"\n                    borderWidth={0}\n                    borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    axisBottom={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: -60,\n                    }}\n                    axisLeft={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Score',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    enableGridX={false}\n                    enableGridY={true}\n                    enableLabel={false}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    isInteractive={true}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ElectionBar;\n","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveChordCanvas } from '@nivo/chord'\n\nfunction Chord(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let chordData = [];\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            chordData.push(sum);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(chordData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveChordCanvas\n                    matrix={data}\n                    keys={keys}\n                    margin={{ top: 60, right: 200, bottom: 60, left: 60 }}\n                    valueFormat=\".2f\"\n                    pixelRatio={2}\n                    padAngle={0.006}\n                    innerRadiusRatio={0.86}\n                    innerRadiusOffset={0}\n                    arcOpacity={1}\n                    arcBorderWidth={1}\n                    arcBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    ribbonOpacity={0.5}\n                    ribbonBorderWidth={0}\n                    ribbonBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    enableLabel={true}\n                    label=\"id\"\n                    labelOffset={9}\n                    labelRotation={-90}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                    colors={{ scheme: 'category10' }}\n                    isInteractive={true}\n                    arcHoverOpacity={1}\n                    arcHoverOthersOpacity={0.4}\n                    ribbonHoverOpacity={0.75}\n                    ribbonHoverOthersOpacity={0.15}\n                    legends={[\n                        {\n                            anchor: 'right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 120,\n                            translateY: 0,\n                            itemWidth: 80,\n                            itemHeight: 11,\n                            itemsSpacing: 0,\n                            itemTextColor: '#999',\n                            itemDirection: 'left-to-right',\n                            symbolSize: 12,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemTextColor: '#000'\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chord;\n","import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport uuid from 'react-uuid'\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport useInterval from '../Hooks/useInterval';\nimport CandidateList from './Race/CandidateList';\n\nimport ElectionSettings from './Settings';\n\nimport FirstChoicePie from './Models/FirstChoicePie';\nimport ElectedCandidatesPie from './Models/ElectedCandidatesPie';\nimport CandidatesRankedPie from './Models/CandidatesRankedPie';\nimport CandidatesRanked from './Models/CandidatesRanked';\nimport PartyPercentage from './Models/PartyPercentage';\nimport EventualWinner from './Models/EventualWinner';\nimport VoteOverTime from './Models/VoteOverTime';\nimport VoteOverTimeBump from './Models/VoteOverTimeBump';\nimport RoundCandidateBump from './Models/RoundCandidateBump';\n\nimport { Race, RaceState } from '../../Data_Models/Race';\nimport { Voter } from '../../Data_Models/Voter';\nimport { Ballot } from '../../Data_Models/Ballot';\nimport { Party } from '../../Data_Models/Party';\nimport { Candidate } from '../../Data_Models/Candidate';\n\nimport './ElectionPage.css'\nimport { RoundState } from '../../Data_Models/Round';\nimport NivoSankey from './Models/Sankey';\nimport HeatMap from './Models/HeatMap';\nimport ElectionBar from './Models/ElectionBar';\nimport Chord from './Models/Chord';\n\nfunction ElectionPage(props) {\n\n    const shadeColor = (color, percent) => {\n\n        var R = parseInt(color.substring(1, 3), 16);\n        var G = parseInt(color.substring(3, 5), 16);\n        var B = parseInt(color.substring(5, 7), 16);\n\n        R = parseInt(R * (100 + percent) / 100);\n        G = parseInt(G * (100 + percent) / 100);\n        B = parseInt(B * (100 + percent) / 100);\n\n        R = (R < 255) ? R : 255;\n        G = (G < 255) ? G : 255;\n        B = (B < 255) ? B : 255;\n\n        var RR = ((R.toString(16).length === 1) ? \"0\" + R.toString(16) : R.toString(16));\n        var GG = ((G.toString(16).length === 1) ? \"0\" + G.toString(16) : G.toString(16));\n        var BB = ((B.toString(16).length === 1) ? \"0\" + B.toString(16) : B.toString(16));\n\n        return \"#\" + RR + GG + BB;\n    }\n\n    // Helper Functions\n    const find_race_by_id = (id) => {\n        for (let i = 0; i < races.length; i++) {\n            if (String(races[i].race_id) === id)\n                return races[i];\n        }\n        return null;\n    };\n\n    const find_race_by_name = (name) => {\n        for (let i = 0; i < races.length; i++) {\n            if (races[i].race_name === name)\n                return races[i];\n        }\n        return null;\n    };\n\n    const find_candidate_by_id = (race_id, candidate_id) => {\n        let race = find_race_by_id(race_id);\n        if (race !== null)\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n        return null;\n    };\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < parties.length; i++)\n            if (parties[i].party_name === name)\n                return parties[i];\n        return null\n    };\n\n    const loadParties = (party_data) => {\n        let partiesToAdd = []\n        for (const party of party_data.parties) {\n            for (let i = 0; i < partiesToAdd.length; i++)\n                if (partiesToAdd.party_name === party.party_name)\n                    continue;\n            partiesToAdd.push(new Party(party.party_name, party.party_color));\n        }\n        return partiesToAdd;\n    }\n\n    const loadRaces = (election_configuration) => {\n        let racesToAdd = []\n        for (const race of election_configuration.races) {\n            for (let i = 0; i < racesToAdd.length; i++)\n                if (racesToAdd.race_id === race.race_id)\n                    continue;\n\n            racesToAdd.push(new Race(race.race_id, race.race_position, race.race_max_winners));\n        }\n        return racesToAdd;\n    }\n\n    const loadCandidates = (candidate_data) => {\n        for (let key in candidate_data) {\n            const race = find_race_by_name(key);\n            let candidate_colors = {};\n            if (race === null)\n                continue;\n            for (const candidate of candidate_data[key]) {\n                let party = find_party_by_name(candidate.party);\n                if (party === null) {\n                    party = new Party(candidate.party, \"FFFFFF\");\n                    console.log(\"Adding Party: \", party.party_name);\n                    setParties([...parties, party]);\n                }\n                let color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n\n                if (party.party_name in candidate_colors) {\n                    while (candidate_colors[party.party_name].includes(color))\n                        color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n                    candidate_colors[party.party_name].push(color);\n                }\n                else\n                    candidate_colors[party.party_name] = [color]\n                race.add_candidate(new Candidate(candidate.number, candidate.name, party, color));\n            }\n        }\n        setCandidatesLoaded(true);\n\n        return;\n    }\n\n    const loadVoters = (ballot_data) => {\n        let voters = []\n        for (const item of ballot_data.ballots) {\n            let voter = new Voter(uuid())\n            for (let key in item) {\n                let candidateOrder = []\n                for (let candidate_id of item[key]) {\n                    let candidate = find_candidate_by_id(key, candidate_id);\n                    candidateOrder.push(candidate);\n                };\n\n                const ballot = new Ballot(uuid(), candidateOrder);\n                const race = find_race_by_id(key);\n                if (race !== null) {\n                    race.add_ballot(ballot);\n                }\n                voter.add_ballot(key, ballot);\n            }\n            voters.push(voter);\n        }\n        return voters;\n    }\n\n    const excused_changed = (candidate) => {\n        if (candidates_dropped.includes(candidate)) {\n            setCandidatesDropped(candidates_dropped.filter((value) => {\n                return value !== candidate\n            }));\n        } else {\n            setCandidatesDropped([candidate, ...candidates_dropped])\n        }\n    }\n\n    const [election_configuration, setElectionConfiguration] = useState([]);\n    const [candidate_data, setCandidateData] = useState([]);\n    const [party_data, setPartyData] = useState([]);\n    const [ballot_data, setBallotData] = useState([]);\n\n    const [candidates_dropped, setCandidatesDropped] = useState([]);\n\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [partiesLoaded, setPartiesLoaded] = useState(false);\n    const [racesLoaded, setRacesLoaded] = useState(false);\n    const [candidatesLoaded, setCandidatesLoaded] = useState(false);\n    const [votersLoaded, setVotersLoaded] = useState(false);\n\n    const [parties, setParties] = useState([]);\n    const [races, setRaces] = useState([]);\n    const [voters, setVoters] = useState([]);\n\n    const [activeRace, setActiveRace] = useState(null);\n    const [speed, setSpeed] = useState(1000);\n    const [refresh, setRefresh] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [page, setPage] = useState(0);\n\n    const [model, setModel] = useState(0);\n\n    useEffect(() => {\n        if (!isLoading)\n            setPartiesLoaded(true);\n    }, [parties]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (activeRace === null)\n                setActiveRace(races[0]);\n            setRacesLoaded(true);\n        }\n    }, [races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading)\n            setVotersLoaded(true);\n    }, [voters]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        for (const race of races) {\n            if (race.state !== RaceState.ADDING)\n                continue;\n            for (const candidate of race.inactive_candidates) {\n                race.unexcuse_candidate(candidate);\n            }\n            for (const candidate of candidates_dropped) {\n                if (find_candidate_by_id(race.race_id, candidate.candidate_id) !== null)\n                    race.excuse_candidate(candidate);\n            }\n        }\n        setRefresh(!refresh)\n    }, [candidates_dropped, races]);\n\n    useEffect(() => {\n        const loadData = async () => {\n            if (props.data !== undefined && props.data !== null) {\n                setElectionConfiguration(props.data.election_configuration);\n                setCandidateData(props.data.candidate_data);\n                setPartyData(props.data.parties_data);\n                setBallotData(props.data.ballot_data);\n                setIsLoading(false);\n                return;\n            }\n            let electionId = props.match.params.electionId;\n\n            if (typeof (electionId) === \"undefined\") {\n                electionId = \"uc_berkeley\";\n            }\n\n            let yearId = props.match.params.yearId;\n            if (typeof (yearId) === \"undefined\") {\n                yearId = \"2015\";\n            }\n\n            let databaseString = 'elections/' + electionId + \"/\" + yearId;\n\n            console.log(\"Loading Data From DataBase\");\n            await firebase.database().ref(databaseString).once('value', snapshot => {\n                if (!snapshot.exists()) {\n                    console.log(\"Path Doesn't Exist, Loading Default Reference\");\n                    databaseString = 'elections/uc_berkeley/2015';\n                }\n            });\n\n            firebase.database().ref(databaseString).once('value', snapshot => {\n                setElectionConfiguration(snapshot.child('election_configuration').val());\n                setCandidateData(snapshot.child('candidate_data').val());\n                setPartyData(snapshot.child('parties_data').val());\n                setBallotData(snapshot.child('ballot_data').val());\n                setIsLoading(false);\n            });\n        }\n\n        if (isLoading) {\n            loadData();\n            return;\n        }\n        if (!partiesLoaded) {\n            console.log(\"Loading Parties\")\n            let parties = loadParties(party_data);\n            setParties(parties);\n        }\n\n        if (partiesLoaded && !racesLoaded) {\n            console.log(\"Loading Races\");\n            setRaces(loadRaces(election_configuration));\n            return;\n        }\n\n        if (racesLoaded && !candidatesLoaded) {\n            console.log(\"Loading Candidates\");\n            loadCandidates(candidate_data);\n            return;\n        }\n\n        if (candidatesLoaded && !votersLoaded) {\n            console.log(\"Loading Voters\");\n            setVoters(loadVoters(ballot_data));\n        }\n        if (votersLoaded) {\n            console.log(\"Finished Loading\");\n        }\n\n    }, [isLoading, partiesLoaded, racesLoaded, candidatesLoaded, votersLoaded]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useInterval(() => {\n        if (activeRace.state !== RoundState.COMPLETE && isRunning) {\n            for (let i = 0; i < Math.floor(speed / 10); i++) {\n                activeRace.run_race_step();\n            }\n            setRefresh(!refresh);\n        } else {\n            setIsRunning(false)\n        }\n    }, isRunning ? 100 : null)\n\n    const switchActiveRace = (race) => {\n        setIsRunning(false);\n        setActiveRace(race);\n    }\n\n    const finishRaces = () => {\n        for (const race of races) {\n            while (race.state !== RoundState.COMPLETE) {\n                race.run_race_step();\n            }\n        }\n        setRefresh(!refresh);\n    }\n\n\n    // Render Everything\n    if (isLoading || activeRace == null)\n        return <h1> Loading... </h1>\n\n    const pageButtonStyle = { borderRadius: 0, height: \"100%\", width: '50%' };\n    let pageButtons = (\n        <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n            <Button onClick={() => setPage(0)} disabled={page === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Election'}\n            </Button>\n            <Button onClick={() => setPage(1)} disabled={page === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Charts'}\n            </Button>\n            <Button onClick={() => setPage(2)} disabled={page === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Models'}\n            </Button>\n            <Button onClick={() => setPage(3)} disabled={page === 3} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Settings'}\n            </Button>\n        </ButtonGroup>\n    );\n\n    let raceTitle = (\n        <div className=\"title-text\" style={{ width: '100%', backgroundColor: 'grey', margin: '1% 2.5% 1% 2.5%', borderRadius: '5px' }}>\n            <h1 style={{ font: '3.5rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '1%' }}> {activeRace.race_name} </h1>\n        </div>\n    );\n\n    if (page === 0) {\n\n        let dropdownItems = races.map((item, index) => (\n            <Dropdown.Item key={index} as=\"button\" onClick={() => switchActiveRace(item)} > {item.race_name}</Dropdown.Item >\n        ));\n\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap' }}>\n                {pageButtons}\n                {raceTitle}\n                <div className=\"election-table\" style={{ width: '100%' }}>\n                    <CandidateList candidates={activeRace.candidateTable} seats={activeRace.seats} refresh={refresh} />\n                </div>\n                <ButtonGroup size=\"lg\" style={{ borderRadius: '5px', width: '100%', margin: '0% 2.5% 0% 2.5%' }}>\n                    <DropdownButton id=\"dropdown-item-button\" as={ButtonGroup} title=\"Change Race\" variant=\"primary\" size=\"lg\" style={{ boxShadow: '0 0 0 1px black', borderRadius: '5px 0px 0px 5px' }}>\n                        {dropdownItems}\n                    </DropdownButton>\n                    <Button onClick={() => setIsRunning(true)} disabled={isRunning} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Run Election'}\n                    </Button>\n                    <Button onClick={finishRaces} disabled={false} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Finish Races'}\n                    </Button>\n                    <div style={{ boxShadow: '0 0 0 1px black', backgroundColor: '#007bff', width: '30%', borderRadius: '0px 5px 5px 0px' }}>\n                        <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '5% 0 0 0' }}>\n                            Speed\n                        </label>\n                        <div style={{ margin: '0% 5% 0% 5%' }}>\n                            <RangeSlider\n                                min={0}\n                                max={10000}\n                                step={10}\n                                value={speed}\n                                variant=\"secondary\"\n                                onChange={changeEvent => setSpeed(changeEvent.target.value)}\n                            />\n                        </div>\n                    </div>\n                </ButtonGroup>\n            </div >\n        );\n    } else if (page === 1) {\n        let chartStyle = {\n            alignSelf: 'center', width: '50%', height: '30vw',\n        }\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap', width: '100%' }}>\n                {pageButtons}\n                {raceTitle}\n                <FirstChoicePie race={activeRace} parties={parties} style={chartStyle} />\n                <ElectedCandidatesPie race={activeRace} parties={parties} style={chartStyle} />\n                <CandidatesRanked race={activeRace} parties={parties} style={chartStyle} />\n                <CandidatesRankedPie race={activeRace} style={chartStyle} />\n                <PartyPercentage race={activeRace} parties={parties} style={chartStyle} />\n                <VoteOverTime race={activeRace} parties={parties} style={chartStyle} />\n                <VoteOverTimeBump race={activeRace} style={chartStyle} />\n                <EventualWinner race={activeRace} style={chartStyle} />\n                <RoundCandidateBump race={activeRace} style={chartStyle} />\n            </div >\n        );\n    } else if (page === 2) {\n        let modelButtons = (\n            <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n                <Button onClick={() => setModel(0)} disabled={model === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Bar'}\n                </Button>\n                <Button onClick={() => setModel(1)} disabled={model === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Heat Map'}\n                </Button>\n                <Button onClick={() => setModel(2)} disabled={model === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Sankey'}\n                </Button>\n            </ButtonGroup>\n        );\n        if (model === 0) {\n            return (\n                <div className=\"text-center\" style={{\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <div style={{ display: \"flex\", flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center', width: '100%' }}>\n                        <ElectionBar race={activeRace} style={{ alignSelf: 'center', width: '40vw' }} />\n                    </div>\n                </div>\n            );\n        }\n        else if (model === 1) {\n            return (\n                <div className=\"text-center\" style={{\n                    height: '100%',\n                    minHeight: '100%',\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <HeatMap race={activeRace} />\n                    <Chord race={activeRace} />\n                </div >\n            );\n        }\n        else {\n            return (\n                <div className=\"text-center\" style={{\n                    height: '100%',\n                    minHeight: '100%',\n                    display: \"flex\",\n                    justifyContent: 'center',\n                    flexWrap: 'wrap'\n                }}>\n                    {pageButtons}\n                    {modelButtons}\n                    {raceTitle}\n                    <NivoSankey race={activeRace} style={{\n                        width: '90%',\n                        height: '60vw'\n                    }}\n                    />\n                </div >\n            );\n        }\n    } else {\n        return (\n            <div className=\"text-center\" style={{\n                height: '100%',\n                minHeight: '100%',\n                display: \"flex\",\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                { pageButtons}\n                { raceTitle}\n                <ElectionSettings race={activeRace} excused={excused_changed} refresh={refresh} />\n            </div>\n        );\n    }\n    // <SankeyGraph race={activeRace} width={\"1000\"} height={activeRace.candidates.length * 100} />\n}\n\nexport default ElectionPage;","import React, { Component } from 'react';\n\n\nexport class FourZeroFour extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>404: Oops! Page not found!</h1>\n            </div>)\n    }\n}\nexport default FourZeroFour;\n","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport Button from 'react-bootstrap/Button'\n\nimport { Form } from 'react-bootstrap';\n\nfunction AddToDatabase() {\n    const AddToDB = (event) => {\n        const checkStrings = (str) => {\n            return str === null || str.match(/^ *$/) !== null;\n        }\n        event.preventDefault();\n        let data = ({ election_configuration: election_configuration, candidate_data: candidate_data, ballot_data: ballot_data, parties_data: party_data });\n        if (!checkStrings(electionName) && !checkStrings(year)) {\n            firebase.database().ref(\"elections/\" + electionName + \"/\" + year).set(data);\n            alert(\"Added To Database: elections/\" + electionName + \"/\" + year);\n        }\n        else {\n            alert('Invalid Name');\n        }\n    }\n\n    const onChange = async (event, callback) => {\n        event.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (event) => {\n            callback(JSON.parse(event.target.result));\n        };\n        if (event.target.files[0] !== null)\n            reader.readAsText(event.target.files[0]);\n    }\n\n    const [electionName, setElectionName] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [election_configuration, setElectionConfiguration] = useState(null);\n    const [party_data, setPartyData] = useState(null);\n    const [candidate_data, setCandidateData] = useState(null);\n    const [ballot_data, setBallotData] = useState(null);\n\n    return (\n        <div className=\"text-center\">\n            <h1> Add to Database </h1>\n            <Form onSubmit={AddToDB}>\n                <Form.Group>\n                    <Form.Control type=\"text\" value={electionName} onChange={(event) => setElectionName(event.target.value)} placeholder=\"Election Name\" />\n                    <Form.Control type=\"text\" value={year} onChange={(event) => setYear(event.target.value)} placeholder=\"Year\" />\n                </Form.Group>\n                <Form.Group style={{ display: 'grid', justifyItems: 'center' }}>\n                    <Form.File onChange={(event) => onChange(event, setElectionConfiguration)} accept='.json' label=\"Election Configuration\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setPartyData)} label=\"Party Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setCandidateData)} label=\"Candidate Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setBallotData)} label=\"Ballot Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                </Form.Group>\n                <Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Group>\n            </Form>\n        </div >\n    );\n}\n\nexport default AddToDatabase;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Redirect, withRouter } from \"react-router\";\nimport './firebase';\nimport './App.css'\n\nimport NavBar from './Components/NavBar/NavBar';\nimport Home from './Components/Home';\nimport ElectionPage from './Components/ElectionPage/ElectionPage';\nimport FourZeroFour from './Components/FourZeroFour';\nimport AddToDatabase from './Components/AddToDatabase';\n\nimport election_configuration from './Data/Configuration.json';\nimport candidate_data from './Data/Candidates.json';\nimport parties_data from './Data/Parties.json';\nimport ballot_data from './Data/Ballots.json';\n\nconst NavBarWithRouter = withRouter(NavBar);\n\nfunction App() {\n    return (\n        <BrowserRouter basename='/stvote' style={{ width: '100%', height: '100%' }}>\n            <Fragment >\n                <NavBarWithRouter style={{ width: '100%', height: '100%' }} />\n                <main style={{ width: '100%', height: '100%' }}>\n                    <Switch>\n                        <Route exact path='/'> <Redirect to=\"/home\" /> </Route>\n                        <Route path='/home' component={Home} />\n                        <Route exact path='/election' render={() => (<ElectionPage data={{ election_configuration: election_configuration, candidate_data: candidate_data, parties_data: parties_data, ballot_data: ballot_data }} />)} />\n                        <Route exact path='/election/:electionId' component={ElectionPage} />\n                        <Route path='/election/:electionId/:yearId' component={ElectionPage} />\n                        <Route path='/add' component={AddToDatabase} />\n                        <Route component={FourZeroFour} />\n                    </Switch>\n                </main>\n            </Fragment>\n        </BrowserRouter>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{ width: '100%', height: '100%' }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}