{"version":3,"sources":["firebase.js","Components/NavBar/NavBar.js","Components/Home.js","Components/Hooks/useInterval.js","Data_Models/Candidate.js","Components/ElectionPage/Race/ProgressBar.js","Components/ElectionPage/Race/CandidatePosition.js","Components/ElectionPage/Race/CandidateList.js","Data_Models/Util.js","Components/ElectionPage/Settings/EditCandidate.js","Components/ElectionPage/Settings/EditParty.js","Components/ElectionPage/Settings/Settings.js","Components/Hooks/useWindowSize.js","Components/ElectionPage/CustomFirstPie.js","Components/ElectionPage/Charts/ChartComponents/FirstChoicePie.js","Data_Models/Round.js","Data_Models/Race.js","Components/ElectionPage/Charts/ChartComponents/ElectedCandidatesPie.js","Components/ElectionPage/Charts/ChartComponents/CandidatesRankedPie.js","Components/ElectionPage/Charts/ChartComponents/CandidatesRanked.js","Components/ElectionPage/Charts/ChartComponents/PartyPercentage.js","Components/ElectionPage/Charts/ChartComponents/EventualWinner.js","Components/ElectionPage/Charts/ChartComponents/VoteOverTime.js","Components/ElectionPage/Charts/ChartComponents/VoteOverTimeBump.js","Components/ElectionPage/Charts/ChartComponents/RoundCandidateBump.js","Components/ElectionPage/Charts/ChartPage.js","Data_Models/Voter.js","Data_Models/Ballot.js","Data_Models/Party.js","Components/ElectionPage/Models/ModelComponents/Sankey.js","Components/ElectionPage/Models/ModelComponents/HeatMap.js","Components/ElectionPage/Models/ModelComponents/ElectionBar.js","Components/ElectionPage/Models/ModelComponents/Chord.js","Components/ElectionPage/Models/ModelPage.js","Components/ElectionPage/ElectionPage.js","Components/FourZeroFour.js","Components/AddToDatabase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NavBar","props","useState","activeKey","setActiveKey","handleSelect","eventKey","Number","isInteger","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","onClick","Toggle","aria-controls","Collapse","id","Nav","className","onSelect","Link","Home","CreateSelectButton","election_title","filename","years","yearButtons","map","item","index","Button","key","year","console","log","OnClick","ButtonGroup","vertical","size","style","padding","disabled","asuc","asucsb","asucd","asucsc","asucla","display","alignItems","justifyContent","flexWrap","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Candidate","candidate_id","candidate_name","candidate_party","candidate_color","this","CandidateState","ProgressBar","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","color","fontWeight","Math","floor","CandidatePosition","get_status_color","status","position","isNaN","seats","candidate","party_color","party_name","score","margin","quota","min","CandidateList","candidate_list","candidates","sort","x","y","scope","find_race_by_name","races","name","i","length","race_name","find_race_by_id","race_id","String","find_candidate_by_id","find_party_by_name","parties","party","shadeColor","percent","R","parseInt","substring","G","B","toString","EditCandidate","candidateName","setCandidateName","undefined","setParty","setColor","active","setActive","displayColorPicker","setDisplayColorPicker","handleClose","setShow","saveChanges","saveCandidateChanges","show","party_options","value","Modal","aria-labelledby","centered","onHide","Header","closeButton","Title","Form","onKeyPress","e","which","preventDefault","Row","Col","Label","Control","type","onChange","event","target","as","background","boxShadow","cursor","zIndex","top","right","bottom","left","onChangeComplete","hex","Footer","EditParty","partyName","setPartyName","savePartyChanges","party_id","ElectionSettings","showCandidate","setShowCandidate","showParty","setShowParty","setCandidate","candidateBoxes","race","inactive_candidates","paddingLeft","paddingRight","showForCandidate","partyBoxes","showForParty","Group","flexDirection","running","reset_race","useWindowSize","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","GroupSettings","groupNumber","number","title","random","CustomGraph","totalAmount","data","innerRadius","padAngle","cornerRadius","colors","bar","groups","group","borderColor","from","modifiers","enableRadialLabels","sliceLabel","round","slicesLabelsSkipAngle","slicesLabelsTextColor","legends","text","fontSize","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemTextColor","itemDirection","itemOpacity","symbolSize","symbolShape","CustomFirstPie","setTitle","selectedCandidates","setSelectedCandidates","editTitle","setEditTitle","imageRef","React","createRef","setGroups","activeGroupNumber","setActiveGroupNumber","push","group_buttons","indexOf","candidate_options","scores","first_scores","groupScore","md","concat","ref","exportComponentAsPNG","Body","Array","selectedOptions","option","multiple","copy","splice","FirstChoicePie","get_ranked_choices","ranked_choices","ballots","choices","pixelRatio","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","animate","motionStiffness","motionDamping","Round","round_number","add_ballot","ballot","state","RoundState","COMPLETE","Error","ballot_id","find_next_active_candidate","candidate_ballots","candidate_scores","active_candidates","includes","add_candidate","elected_candidates","start_inactive_candidates","start_active_candidates","eliminated_candidates","set_elected_candidate","filter","ballotsToTransfer","set_eliminate_candidate","candidate_ballot","candidate_score","complete","isCandidateElected","candidate_real_scores","RUNNING","exhausted","rankings","Race","dropped_candidates","dropped","RaceState","ADDING","current_candidate","excused","inactive_ballots","rounds","transfer_voters","ballots_to_apply","candidate_ballot_rankings","planned_inactive_candidates","planned_active_candidates","elected","transferring","transfered","excuse_candidate","unexcuse_candidate","num_candidates","currentScores","candidateTable","start_tabulation","TABULATING","run_race_step","elect_candidate","currentRound","Object","keys","surplus","transfer_value","transfer_candidate","shift","first_round_score","activeCandidates","roundElected","maxElected","roundTransfer","reverse","complete_round","previousRound","add_round","begin_race","PartyPercentage","entries","constructor","maxChoices","num_ranked","max","scheme","CandidatesRanked","data_to_add","indexBy","innerPadding","minValue","maxValue","groupMode","layout","colorBy","borderWidth","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","isInteractive","maxchoices","datapoints","xScale","yScale","stacked","orient","enablePoints","enableArea","areaOpacity","useMesh","get_first_elected","VoteOverTime","choices_over_time","score_chart","xFormat","yFormat","tickValues","lineWidth","VoteOverTimeBump","indexOfMax","arr","maxIndex","increment","candidate_positions","datapoint","getCandidateByName","activeLineWidth","inactiveLineWidth","inactiveOpacity","pointSize","activePointSize","inactivePointSize","format","RoundCandidateBump","pointColor","theme","pointBorderWidth","activePointBorderWidth","pointBorderColor","ChartPage","chartStyle","alignSelf","ElectedCandidatesPie","CandidatesRankedPie","EventualWinner","Voter","voter_id","participating_races","participating_in_race","get_ballot_for_race","Ballot","Party","isValidColor","s","Option","Sankey","active_candidate","prev_round","nodes","links","link","source","transfer_candidates_ballot","next_candidate","transfer_candidate_id","GenerateData","align","nodeTooltip","node","nodeOpacity","nodeThickness","nodeInnerPadding","nodeSpacing","nodeBorderWidth","nodeBorderColor","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","enableLinkGradient","enableLabels","label","labelPosition","labelOrientation","labelPadding","HeatMap","get_ballots_for_candidate_at_position","showPercent","xChoice","setXChoice","yChoice","setYChoice","heatData","other_candidate","sum","xButtons","Dropdown","Item","yButtons","DropdownButton","tooltipFormat","forceSquare","cellOpacity","cellBorderColor","defs","rotation","spacing","fill","hoverTarget","cellHoverOthersOpacity","ElectionBar","get_round_data","round_data","get_candidate_position","candidate_table","get_candidate_by_position","final_candidate_score","setRound","data_active_candidates","round_active_candidates","chart_data","transferred","font","step","changeEvent","max_score","get_max_score","Chord","chordData","matrix","valueFormat","innerRadiusRatio","innerRadiusOffset","arcOpacity","arcBorderWidth","arcBorderColor","ribbonOpacity","ribbonBorderWidth","ribbonBorderColor","labelOffset","labelRotation","arcHoverOpacity","arcHoverOthersOpacity","ribbonHoverOpacity","ribbonHoverOthersOpacity","effects","on","ModelPage","model","minHeight","ElectionPage","election_configuration","setElectionConfiguration","candidate_data","setCandidateData","party_data","setPartyData","ballot_data","setBallotData","candidates_dropped","setCandidatesDropped","isLoading","setIsLoading","partiesLoaded","setPartiesLoaded","racesLoaded","setRacesLoaded","candidatesLoaded","setCandidatesLoaded","votersLoaded","setVotersLoaded","setParties","setRaces","voters","setVoters","activeRace","setActiveRace","speed","setSpeed","refresh","setRefresh","isRunning","setIsRunning","page","setPage","setModel","a","parties_data","electionId","match","params","yearId","databaseString","database","once","snapshot","exists","child","val","loadData","partiesToAdd","uuid","loadParties","racesToAdd","race_position","race_max_winners","loadRaces","newParties","candidate_colors","loadCandidates","voter","candidateOrder","loadVoters","pageButtonStyle","pageButtons","raceTitle","dropdownItems","modelButtons","find_party_by_id","new_races","candidate_races","find_races_by_candidate_id","race_to_change","FourZeroFour","Component","AddToDatabase","reader","FileReader","onload","JSON","parse","result","files","readAsText","electionName","setElectionName","setYear","onSubmit","checkStrings","str","alert","set","placeholder","justifyItems","File","accept","NavBarWithRouter","withRouter","App","basename","exact","path","to","component","render","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36b3f810.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyCFNJfMcHbdoAKVVF88d-9POsUgk-C7NKk\",\n    authDomain: \"stvote-b967b.firebaseapp.com\",\n    databaseURL: \"https://stvote-b967b.firebaseio.com\",\n    projectId: \"stvote-b967b\",\n    storageBucket: \"stvote-b967b.appspot.com\",\n    messagingSenderId: \"487837721842\",\n    appId: \"1:487837721842:web:95c0dc83a5eeb46b995c6b\"\n}\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { useState } from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction NavBar(props) {\n\n    const [activeKey, setActiveKey] = useState(1);\n\n    const handleSelect = (eventKey) => {\n        if (Number.isInteger(eventKey))\n            setActiveKey(eventKey);\n        else\n            setActiveKey(0);\n    };\n\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/stvote/home\" onClick={handleSelect}>STVote</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav activeKey={activeKey} className=\"mr-auto\" onSelect={handleSelect}>\n                    <Nav.Link eventKey={1} href=\"/stvote/home\">Home</Nav.Link>\n                    <Nav.Link eventKey={1} href=\"/stvote/election\">Election</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\n\nfunction Home(props) {\n    const OnClick = (election_title, year) => {\n\n        console.log(\"Clicked\", election_title, year);\n    }\n    const CreateSelectButton = (election_title, filename, years) => {\n        let yearButtons = years.map((item, index) => (\n            <Button key={index} href={\"/stvote/election/\" + filename + \"/\" + item} onClick={() => OnClick(election_title, item)}>{item}</Button>\n        ));\n\n        return (\n            <ButtonGroup vertical size=\"lg\" style={{ padding: '2%' }}>\n                <Button variant=\"dark\" disabled={true}>{election_title}</Button>\n                {yearButtons}\n            </ButtonGroup>\n        );\n    }\n\n    let asuc = CreateSelectButton('ASUC Berkeley', \"uc_berkeley\", [2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsb = CreateSelectButton('ASUC Santa Barbara', \"uc_santa_barbara\", [2016, 2017, 2018, 2019, 2020]);\n    let asucd = CreateSelectButton('AS UC Davis', \"uc_davis\", [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]);\n    let asucsc = CreateSelectButton('AS UC Santa Cruz', \"uc_berkeley\", [2018, 2019, 2020]);\n    let asucla = CreateSelectButton('AS UC Los Angeles', \"uc_berkeley\", [2018, 2019, 2020]);\n\n    return (\n        <div className=\"text-center\">\n            <h1> STVote Elections </h1>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-evenly', flexWrap: 'wrap' }}>\n                {asuc}\n                {asucsb}\n                {asucd}\n                {asucsc}\n                {asucla}\n            </div>\n        </div >\n    );\n}\n\nexport default Home;\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","\nexport class Candidate {\n    constructor(candidate_id, candidate_name, candidate_party, candidate_color = \"#FFFFFF\") {\n        this.candidate_id = candidate_id;\n        this.candidate_name = candidate_name;\n        this.candidate_party = candidate_party;\n        this.candidate_color = candidate_color;\n    }\n\n\n}\n\nexport const CandidateState = {\n    ELECTED: \"ELECTED\",\n    RUNNING: \"RUNNING\",\n    TRANSFERRING: \"TRANSFERRING\",\n    TRANSFERED: \"TRANSFERED\",\n    EXCUSED: \"EXCUSED\",\n};","import React from 'react';\n\nconst ProgressBar = (props) => {\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        height: '48px',\n        width: '100%',\n        backgroundColor: \"#fffbf5\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: bgcolor,\n        borderRadius: 'inherit',\n        textAlign: 'right'\n    }\n\n    const labelStyles = {\n        padding: 5,\n        color: 'black',\n        fontWeight: 'bold'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span style={labelStyles}>{`${Math.floor(completed)}%`}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;","import React from 'react';\nimport { CandidateState } from '../../../Data_Models/Candidate';\nimport ProgressBar from './ProgressBar';\nimport '../ElectionPage.css'\n\nfunction CandidatePosition(props) {\n    const get_status_color = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"#01A039\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"#0095E0\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"#E07A00\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"#FF0000\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"#D5D5D5\";\n        return \"#FFFFFF\"\n    }\n\n    const get_status_text = () => {\n        if (props.status === CandidateState.ELECTED)\n            return \"ELECTED\";\n        else if (props.status === CandidateState.RUNNING)\n            return \"RUNNING\";\n        else if (props.status === CandidateState.TRANSFERRING)\n            return \"TRANSFERRING\";\n        else if (props.status === CandidateState.TRANSFERED)\n            return \"TRANSFERED\";\n        else if (props.status === CandidateState.EXCUSED)\n            return \"EXCUSED\";\n        return \"\"\n    }\n\n    const get_position = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position))\n            return props.position + 1;\n        return 0;\n    }\n\n    const get_position_color = () => {\n        if (Number.isInteger(props.position) && !Number.isNaN(props.position)) {\n            if (props.position < props.seats) {\n                if (props.status === CandidateState.ELECTED)\n                    return \"#01A039\";\n                return \"#C5FFC5\"\n            } else if (props.status === CandidateState.RUNNING)\n                return \"#FAB8B8\";\n            else if (props.status === CandidateState.EXCUSED)\n                return \"#D5D5D5\";\n            else\n                return \"#FF0000\";\n        }\n        return \"#FFFFFF\";\n    }\n\n    const get_percentage = () => {\n        if (props.quota === 0)\n            return 0;\n        return Math.min(100, (props.score / props.quota) * 100);\n    }\n\n    return (\n        <tr>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: get_position_color() }}> {get_position()} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: \"#FFFFFF\" }}> {props.candidate.candidate_name} </td>\n            <td className=\"basic-row\" width=\"1\" style={{ backgroundColor: props.candidate.candidate_party.party_color }}> {props.candidate.candidate_party.party_name} </td >\n            <td className=\"basic-row\" width=\"150\" style={{ backgroundColor: get_status_color() }}> {get_status_text()} </td >\n            <td className=\"basic-row\" width=\"100\" style={{ backgroundColor: get_status_color() }}> {Math.floor(props.score)} </td >\n            <td style={{ padding: \"0 0 0 0\", margin: \"0 0 0 0\" }}>\n                <div style={{ display: 'inline-block', width: '100%', height: '100%' }}>\n                    <ProgressBar bgcolor={get_status_color()} completed={get_percentage()} />\n                </div>\n            </td >\n        </tr >\n    );\n}\n\nexport default CandidatePosition;\n","import React from 'react';\nimport CandidatePosition from './CandidatePosition';\nimport '../ElectionPage.css'\n\nfunction CandidateList(props) {\n\n    let sortedCandidates = props.candidates().sort((x, y) => {\n        if (x.position > y.position) {\n            return 1;\n        } else if (y.position > x.position) {\n            return -1;\n        }\n        return 0;\n    });\n\n    let candidate_list = sortedCandidates.map((item, index) => (\n        <CandidatePosition key={index} candidate={item.candidate} status={item.status}\n            score={item.score} position={item.position} quota={item.quota} seats={props.seats} />\n    ));\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-bordered\" >\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >#</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Name</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" >Party</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\">Status</th>\n                        <th className=\"title-row\" scope=\"col\" width=\"1\" > Score</th >\n                        <th className=\"title-row\" scope=\"col\">Quota Percentage</th>\n                    </tr >\n                </thead >\n                <tbody>\n                    {candidate_list}\n                </tbody>\n            </table >\n        </div >\n    );\n}\n\nexport default CandidateList;\n","/*\n    Input: List of Races, A Race Name to find\n    Output: A Race, based upon the Race Name (first occurance)\n*/\nexport const find_race_by_name = (races, name) => {\n    for (let i = 0; i < races.length; i++) {\n        if (races[i].race_name === name)\n            return races[i];\n    }\n    return null;\n};\n\n/*\n    Input: List of Races, A Race ID to find\n    Output: A Race, based upon the Race Id (first occurance)\n*/\nexport const find_race_by_id = (races, race_id) => {\n    for (let i = 0; i < races.length; i++) {\n        if (String(races[i].race_id) === race_id)\n            return races[i];\n    }\n    return null;\n};\n\n/*\n    Input: List of Candidates, A candidate ID to find\n    Output: A Candidate, based upon the candidate_id (first occurance)\n*/\nexport const find_candidate_by_id = (candidates, candidate_id) => {\n    for (const candidate of candidates)\n        if (String(candidate.candidate_id) === candidate_id)\n            return candidate;\n    return null;\n};\n\n/*\n    Input: List of Candidates, A candidate Name to find\n    Output: A Candidate, based upon the candidate name (first occurance)\n*/\nexport const find_candidate_by_name = (candidates, candidate_name) => {\n    for (let i = 0; i < candidates.length; i++)\n        if (String(candidates[i].candidate_name) === candidate_name)\n            return candidates[i];\n    return null;\n};\n\n/*\n    Input: List of Parties, A party name to find\n    Output: A party, based upon the party name (first occurance)\n*/\nexport const find_party_by_name = (parties, party_name) => {\n    for (const party of parties)\n        if (String(party.party_name) === party_name)\n            return party;\n    return null\n};\n\n/*\n    Input: List of Parties, A party name to find\n    Output: A party, based upon the party name (first occurance)\n*/\nexport const find_party_by_id = (parties, party_id) => {\n    for (const party of parties)\n        if (String(party.party_id) === party_id)\n            return party;\n    return null\n};\n\n/*\n    Input: List of Races, Find Races that include candidate name\n    Output: List of Races that include the candidate name\n*/\nexport const find_races_by_candidate_name = (races, candidate_name) => {\n    let candidate_races = []\n    for (const race of races) {\n        let candidate = find_candidate_by_name(race.candidates, candidate_name)\n        if (candidate != null) {\n            candidate_races.push(race);\n        }\n    }\n    return candidate_races;\n};\n\n/*\n    Input: List of Races, Find Races that include candidate name\n    Output: List of Races that include the candidate name\n*/\nexport const find_races_by_candidate_id = (races, candidate_id) => {\n    let candidate_races = []\n    for (const race of races) {\n        let candidate = find_candidate_by_id(race.candidates, candidate_id)\n        if (candidate != null) {\n            candidate_races.push(race);\n        }\n    }\n    return candidate_races;\n};\n\n/*\n    Input: Color, Percent of that Color\n    Output: Returns a color shade\n*/\nexport const shadeColor = (color, percent) => {\n\n    var R = parseInt(color.substring(1, 3), 16);\n    var G = parseInt(color.substring(3, 5), 16);\n    var B = parseInt(color.substring(5, 7), 16);\n\n    R = parseInt(R * (100 + percent) / 100);\n    G = parseInt(G * (100 + percent) / 100);\n    B = parseInt(B * (100 + percent) / 100);\n\n    R = (R < 255) ? R : 255;\n    G = (G < 255) ? G : 255;\n    B = (B < 255) ? B : 255;\n\n    var RR = ((R.toString(16).length === 1) ? \"0\" + R.toString(16) : R.toString(16));\n    var GG = ((G.toString(16).length === 1) ? \"0\" + G.toString(16) : G.toString(16));\n    var BB = ((B.toString(16).length === 1) ? \"0\" + B.toString(16) : B.toString(16));\n\n    return \"#\" + RR + GG + BB;\n}","import React, { useEffect, useState } from 'react';\n\nimport { SketchPicker } from 'react-color';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\n\nimport { find_party_by_name } from '../../../Data_Models/Util'\n\nfunction EditCandidate(props) {\n    const [candidateName, setCandidateName] = useState(\"Name\");\n    const [party, setParty] = useState(undefined);\n    const [color, setColor] = useState(\"#fff\");\n    const [active, setActive] = useState(true);\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    useEffect(() => {\n        if (props.candidate !== undefined) {\n            setParty(props.candidate.candidate_party)\n            setCandidateName(props.candidate.candidate_name)\n            setColor(props.candidate.candidate_color)\n        }\n    }, [props.candidate]);\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleEditChange = (event) => {\n        setCandidateName(event.target.value)\n    }\n\n    const changeParty = (event) => {\n        setParty(find_party_by_name(props.parties, event.target.value))\n    }\n\n    const changeActive = (event) => (setActive(event.target.value))\n\n    const handleClose = () => props.setShow(false);\n\n    const saveChanges = () => {\n        props.saveCandidateChanges(props.candidate.candidate_id, candidateName, party, color, active)\n        handleClose()\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault()\n            saveChanges()\n        }\n    }\n\n    if (props.show === false || props.candidate === undefined || party === undefined)\n        return <div />\n\n    let party_options = props.parties.map((item, index) => {\n        return <option key={index} value={item.party_name}>{item.party_name}</option>\n    });\n\n    return (\n        <Modal size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{\"Editing: \" + candidateName}</Modal.Title>\n            </Modal.Header>\n            <Form onKeyPress={onKeyPress}>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Name</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control style={{\n                            width: '32vw'\n                        }}\n                            type=\"text\"\n                            value={candidateName}\n                            onChange={handleEditChange} />\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Party</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control as=\"select\" value={party.party_name}\n                            onChange={changeParty}>\n                            {party_options}\n                        </Form.Control>\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Color</Form.Label>\n                    </Col>\n                    <Col>\n                        <div style={{\n                            padding: '1vw',\n                            background: '#fff',\n                            borderRadius: '5px',\n                            boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                            display: 'inline-block',\n                            cursor: 'pointer',\n                        }}\n                            onClick={handleColorPickerClicked}>\n                            <div style={{\n                                width: '30vw',\n                                height: '2vw',\n                                borderRadius: '2px',\n                                backgroundColor: color,\n                            }} />\n                        </div>\n\n                        {displayColorPicker ? <div style={{\n                            position: 'absolute',\n                            zIndex: '2',\n                        }}>\n                            <div style={{\n                                position: 'fixed',\n                                top: '0px',\n                                right: '0px',\n                                bottom: '0px',\n                                left: '0px',\n                            }} onClick={handleColorPickerClosed} />\n\n                            <SketchPicker color={color} onChangeComplete={changeColor} />\n                        </div> : null}\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Active</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control as=\"select\" value={active} onChange={changeActive}>\n                            <option value={true}>Yes</option>\n                            <option value={false}>No</option>\n                        </Form.Control>\n                    </Col>\n                </Row>\n            </Form>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={saveChanges}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditCandidate;","import React, { useEffect, useState } from 'react';\n\nimport { SketchPicker } from 'react-color';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\n\n\nfunction EditParty(props) {\n    const [partyName, setPartyName] = useState(\"Name\");\n    const [color, setColor] = useState(\"#fff\");\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    useEffect(() => {\n        if (props.party !== undefined) {\n            setPartyName(props.party.party_name)\n            setColor(props.party.party_color)\n        }\n    }, [props.party]);\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleEditChange = (event) => {\n        setPartyName(event.target.value)\n    }\n\n\n    const handleClose = () => props.setShow(false);\n\n    const saveChanges = () => {\n        props.savePartyChanges(props.party.party_id, partyName, color)\n        handleClose()\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault()\n            saveChanges()\n        }\n    }\n\n    if (props.show === false || props.party === undefined)\n        return <div />\n\n    return (\n        <Modal size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{\"Editing: \" + partyName}</Modal.Title>\n            </Modal.Header>\n            <Form onKeyPress={onKeyPress}>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Name</Form.Label>\n                    </Col>\n                    <Col>\n                        <Form.Control style={{\n                            width: '32vw'\n                        }}\n                            type=\"text\"\n                            value={partyName}\n                            onChange={handleEditChange} />\n                    </Col>\n                </Row>\n                <Row style={{ margin: '5%' }}>\n                    <Col>\n                        <Form.Label>Color</Form.Label>\n                    </Col>\n                    <Col>\n                        <div style={{\n                            padding: '1vw',\n                            background: '#fff',\n                            borderRadius: '5px',\n                            boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                            display: 'inline-block',\n                            cursor: 'pointer',\n                        }}\n                            onClick={handleColorPickerClicked}>\n                            <div style={{\n                                width: '30vw',\n                                height: '2vw',\n                                borderRadius: '2px',\n                                backgroundColor: color,\n                            }} />\n                        </div>\n\n                        {displayColorPicker ? <div style={{\n                            position: 'absolute',\n                            zIndex: '2',\n                        }}>\n                            <div style={{\n                                position: 'fixed',\n                                top: '0px',\n                                right: '0px',\n                                bottom: '0px',\n                                left: '0px',\n                            }} onClick={handleColorPickerClosed} />\n\n                            <SketchPicker color={color} onChangeComplete={changeColor} />\n                        </div> : null}\n                    </Col>\n                </Row>\n            </Form>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={saveChanges}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditParty;","import React, { useState } from 'react';\n\nimport { Button, Form, Col, Row, ButtonGroup } from 'react-bootstrap';\nimport EditCandidate from './EditCandidate';\nimport EditParty from './EditParty';\n\nfunction ElectionSettings(props) {\n    const resetRace = () => {\n        props.running()\n        props.race.reset_race()\n    }\n\n    const [showCandidate, setShowCandidate] = useState(false);\n    const [showParty, setShowParty] = useState(false);\n    const [party, setParty] = useState(undefined);\n    const [candidate, setCandidate] = useState(undefined);\n\n    let candidates = [...props.race.candidates, ...props.race.inactive_candidates]\n\n    let showForCandidate = (candidate) => {\n        setCandidate(candidate)\n        setShowCandidate(true);\n    }\n\n    let showForParty = (party) => {\n        setParty(party)\n        setShowParty(true);\n    }\n\n    let candidateBoxes = candidates.map((candidate, index) => {\n        return (\n            <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n                <Button disabled>{candidate.candidate_name}</Button>\n                <Button onClick={() => (showForCandidate(candidate))}> Edit </Button>\n            </ButtonGroup>\n        )\n    })\n\n    let partyBoxes = props.parties.map((party, index) => {\n        return (\n            <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n                <Button disabled>{party.party_name}</Button>\n                <Button onClick={() => (showForParty(party))}> Edit </Button>\n            </ButtonGroup>\n        )\n    })\n\n    return (\n        <div>\n            <Form>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Label>Parties</Form.Label>\n                        </Col>\n                        <Col style={{\n                            display: 'flex',\n                            flexDirection: \"row\",\n                            flexWrap: 'wrap',\n                            justifyContent: \"flex-start\",\n                            alignItems: \"flex-start\"\n                        }}>\n                            {partyBoxes}\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Label>Candidates</Form.Label>\n                        </Col>\n                        <Col style={{\n                            display: 'flex',\n                            flexDirection: \"row\",\n                            flexWrap: 'wrap',\n                            justifyContent: \"flex-start\",\n                            alignItems: \"flex-start\"\n                        }}>\n                            {candidateBoxes}\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Button variant=\"primary\" style={{ margin: \"5%\" }}>\n                                Reset to Default\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Button onClick={resetRace} variant=\"primary\" style={{ margin: \"5%\" }}>\n                                {'Reset Race'}\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Button variant=\"primary\" style={{ margin: \"5%\" }}>\n                                Save Changes\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form.Group>\n            </Form>\n\n            <EditParty party={party} show={showParty} savePartyChanges={props.savePartyChanges} setShow={setShowParty} />\n\n            <EditCandidate candidate={candidate} saveCandidateChanges={props.saveCandidateChanges} parties={props.parties} show={showCandidate} setShow={setShowCandidate} />\n        </div>\n    )\n}\n\nexport default ElectionSettings;","import { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}\n\nexport default useWindowSize;","import React, { useEffect, useState } from 'react';\n\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { SketchPicker } from 'react-color';\nimport { exportComponentAsPNG } from 'react-component-export-image';\n\nimport { Form, Row, Col, ButtonGroup, Button, Modal } from 'react-bootstrap';\nimport { find_candidate_by_id } from '../../Data_Models/Util';\nimport useWindowSize from '../Hooks/useWindowSize';\n\nclass GroupSettings {\n    constructor(groupNumber) {\n        this.number = groupNumber\n        this.title = \"Group \" + groupNumber\n        this.candidates = []\n        this.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    }\n}\n\nfunction CustomGraph(props) {\n    const getPercentage = bar => {\n        return Math.round((bar.value / props.totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = (bar) => {\n        for (const group of props.groups) {\n            if (group.title === bar.id) {\n                return group.color\n            }\n        }\n        return \"#fff\"\n    }\n\n    if (props.totalAmount === 0)\n        return <div />\n\n    return (\n        <ResponsivePieCanvas\n            data={props.data}\n            margin={{ top: 40, right: 100, bottom: 40, left: 80 }}\n            innerRadius={0}\n            padAngle={0.7}\n            cornerRadius={3}\n            colors={getColor}\n            borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n            enableRadialLabels={false}\n            sliceLabel={getPercentage}\n            slicesLabelsSkipAngle={20}\n            slicesLabelsTextColor=\"#000000\"\n            legends={[\n                {\n                    text: {\n                        fontSize: 20,\n                        fontWeight: 900,\n                        color: \"#000000\"\n                    },\n                    anchor: 'top-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 0,\n                    translateY: 0,\n                    itemsSpacing: 10,\n                    itemWidth: 60,\n                    itemHeight: 14,\n                    itemTextColor: '#999',\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 1,\n                    symbolSize: 20,\n                    symbolShape: 'square'\n                }\n            ]}\n        />\n    );\n}\n\nfunction CustomFirstPie(props) {\n    const size = useWindowSize();\n    const [color, setColor] = useState(\"#fff\");\n    const [title, setTitle] = useState(\"Title\")\n    const [selectedCandidates, setSelectedCandidates] = useState([])\n    const [editTitle, setEditTitle] = useState(\"Title\")\n    const [show, setShow] = useState(false);\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    const imageRef = React.createRef();\n    const [groups, setGroups] = useState([]);\n    const [activeGroupNumber, setActiveGroupNumber] = useState(-1)\n\n    useEffect(() => {\n        if (groups.length === 0 || activeGroupNumber === -1)\n            return\n        setTitle(groups[activeGroupNumber].title)\n        setEditTitle(groups[activeGroupNumber].title)\n        setColor(groups[activeGroupNumber].color)\n        let candidates = []\n        for (const candidate of groups[activeGroupNumber].candidates) {\n            candidates.push(candidate.candidate_id)\n        }\n        setSelectedCandidates(candidates)\n    }, [activeGroupNumber, groups])\n\n    const changeColor = (color) => {\n        setColor(color.hex)\n    }\n\n    const handleClose = (saveChanges) => {\n        setShow(false);\n        if (saveChanges) {\n            if (groups.length === 0)\n                return\n            groups[activeGroupNumber].title = editTitle;\n            groups[activeGroupNumber].color = color;\n            let candidates = []\n            for (const candidate of selectedCandidates) {\n                candidates.push(find_candidate_by_id(props.race.candidates, candidate))\n            }\n            groups[activeGroupNumber].candidates = candidates\n        }\n    }\n\n    const handleShow = (groupNumber) => {\n        setActiveGroupNumber(groupNumber)\n        setShow(true);\n    }\n\n    const handleEditChange = (event) => {\n        setEditTitle(event.target.value)\n    }\n\n    const handleDelete = () => {\n        const index = groups.indexOf(groups[activeGroupNumber])\n        if (index > -1) {\n            let copy = [].concat(groups);\n            copy.splice(index, 1)\n            setGroups(copy)\n        }\n        setShow(false)\n        setActiveGroupNumber(-1)\n    }\n\n    const handleSelectedChange = (event) => {\n        setSelectedCandidates(Array.from(event.target.selectedOptions, option => option.value))\n    }\n\n    const handleColorPickerClicked = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    }\n\n    const handleColorPickerClosed = () => setDisplayColorPicker(false);\n\n    const handleExportClicked = () => {\n        if (totalAmount > 0)\n            exportComponentAsPNG(imageRef)\n    }\n\n    const candidates = props.race.candidates\n\n    const addGroup = () => {\n        setGroups(groups.concat(new GroupSettings(groups.length)))\n    }\n\n    const onKeyPress = (e) => {\n        if (e.which === 13) {\n            e.preventDefault();\n            handleClose(true)\n        }\n    }\n\n    let group_buttons = groups.map((item, index) => (\n        <ButtonGroup key={index} style={{ paddingLeft: \"1%\", paddingRight: \"1%\" }} className=\"mb-2\">\n            <Button disabled>{item.title}</Button>\n            <Button onClick={() => (handleShow(groups.indexOf(item)))}> Edit </Button>\n        </ButtonGroup>\n    ));\n\n    let candidate_options = candidates.map((item, index) => {\n        if (groups.length === 0 || activeGroupNumber === -1)\n            return <div key={index} />\n        return <option key={index} value={item.candidate_id}>{item.candidate_name} </option>\n    });\n\n    let data = []\n\n    let totalAmount = 0;\n    const scores = props.race.first_scores[props.race.first_scores.length - 1]\n\n    for (const group of groups) {\n        let groupScore = 0;\n        for (const candidate of group.candidates) {\n            if (scores !== undefined)\n                groupScore += scores[candidate.candidate_id]\n        }\n        if (groupScore > 0) {\n            data.push({\n                \"id\": group.title,\n                \"label\": group.title,\n                \"value\": groupScore,\n                \"color\": group.color,\n            });\n\n            totalAmount += groupScore;\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <Row>\n                <Col md=\"3\">\n                    <Button style={{}} onClick={addGroup}>Add Group</Button>\n                </Col>\n                <Col style={{ flexDirection: \"row\" }}>\n                    {group_buttons}\n                </Col>\n            </Row>\n            <Row style={{ width: size.width, height: \"50vw\" }}>\n                <div style={{ width: size.width, height: \"50vw\" }} ref={imageRef}>\n                    <CustomGraph style={{ margin: '5%' }} totalAmount={totalAmount} data={data} groups={groups} />\n                </div>\n            </Row>\n            <Row style={{ display: \"flex\", justifyContent: \"flex-end\", alignItems: \"flex-end\" }}>\n                <Button style={{ margin: \"1%\" }} onClick={handleExportClicked}>\n                    Export As PNG\n                </Button>\n            </Row>\n\n            <Modal size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Editing {title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onKeyPress={onKeyPress}>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Group Name</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control style={{\n                                    width: '32vw'\n                                }}\n                                    type=\"text\"\n                                    value={editTitle}\n                                    onChange={handleEditChange} />\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Candidates</Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control as=\"select\" value={selectedCandidates}\n                                    onChange={handleSelectedChange} style={{\n                                        width: '32vw'\n                                    }} multiple>\n                                    {candidate_options}\n                                </Form.Control>\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: '5%' }}>\n                            <Col>\n                                <Form.Label>Group Color</Form.Label>\n                            </Col>\n                            <Col>\n                                <div style={{\n                                    padding: '1vw',\n                                    background: '#fff',\n                                    borderRadius: '5px',\n                                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                                    display: 'inline-block',\n                                    cursor: 'pointer',\n                                }}\n                                    onClick={handleColorPickerClicked}>\n                                    <div style={{\n                                        width: '30vw',\n                                        height: '2vw',\n                                        borderRadius: '2px',\n                                        backgroundColor: color,\n                                    }} />\n                                </div>\n                                {displayColorPicker ? <div style={{\n                                    position: 'absolute',\n                                    zIndex: '2',\n                                }}>\n                                    <div style={{\n                                        position: 'fixed',\n                                        top: '0px',\n                                        right: '0px',\n                                        bottom: '0px',\n                                        left: '0px',\n                                    }} onClick={handleColorPickerClosed} />\n                                    <SketchPicker color={color} onChangeComplete={changeColor} />\n                                </div> : null}\n                            </Col>\n                        </Row>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" style={{}} onClick={handleDelete}>\n                        Delete\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => handleClose(false)}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => handleClose(true)}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div >\n    );\n}\n\nexport default CustomFirstPie;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nimport { find_party_by_name } from '../../../../Data_Models/Util';\n\nfunction FirstChoicePie(props) {\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const ballot of race.ballots) {\n            if (ballot.candidates[0].candidate_party.party_name === party.party_name)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(props.parties, item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(props.parties, bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <h1> First Vote Pie by Party </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default FirstChoicePie;\n","import { CandidateState } from \"./Candidate\";\n\nexport class Round {\n    constructor(round_number, quota) {\n        this.round_number = round_number;\n        this.quota = quota;\n        this.state = RoundState.RUNNING;\n\n        this.candidates = []\n\n        this.elected_candidates = []\n        this.active_candidates = []\n        this.start_inactive_candidates = []\n        this.start_active_candidates = []\n        this.eliminated_candidates = []\n\n        this.ballots = { exhausted: 0 }\n        this.ballotsToTransfer = {}\n        this.candidate_ballots = { exhausted: [] }\n        this.candidate_real_scores = {}\n        this.candidate_scores = { exhausted: 0 }\n        this.rankings = {};\n    }\n\n    add_ballot = (ballot, value) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        if (this.ballots[ballot.ballot_id] !== undefined)\n            throw new Error(\"Already added Ballot\");\n\n        let candidate = this.find_next_active_candidate(ballot.candidates);\n        if (candidate !== \"exhausted\") {\n            this.candidate_ballots[candidate.candidate_id].push(ballot);\n            this.candidate_scores[candidate.candidate_id] += value;\n        } else {\n            this.candidate_ballots[candidate].push(ballot);\n            this.candidate_scores[candidate] += value;\n        }\n        this.ballots[ballot.ballot_id] = value;\n    }\n\n    find_next_active_candidate = (candidates) => {\n        for (const candidate of candidates)\n            if (this.active_candidates.includes(candidate))\n                return candidate\n        return \"exhausted\";\n    }\n\n    add_candidate = (candidate, state) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Can't Add Ballot to Complete Round\");\n\n        this.candidates.push(candidate);\n        if (state === CandidateState.ELECTED) {\n            this.elected_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        } else if (state === CandidateState.RUNNING) {\n            this.active_candidates.push(candidate);\n            this.start_active_candidates.push(candidate);\n        } else {\n            this.eliminated_candidates.push(candidate);\n            this.start_inactive_candidates.push(candidate);\n        }\n\n        this.candidate_ballots[candidate.candidate_id] = [];\n        this.candidate_scores[candidate.candidate_id] = 0;\n    }\n\n    set_elected_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.elected_candidates.push(candidate);\n    }\n\n    set_eliminate_candidate = (candidate) => {\n        if (this.state === RoundState.COMPLETE)\n            throw new Error(\"Round Complete\");\n\n        this.active_candidates = this.active_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.ballotsToTransfer[candidate.candidate_id] = { ...this.candidate_ballots[candidate.candidate_id] }\n        this.eliminated_candidates.push(candidate);\n    }\n\n    candidate_ballot = (candidate) => {\n        if (candidate === null)\n            candidate = \"exhausted\";\n        else if (candidate.candidate_id !== undefined)\n            candidate = candidate.candidate_id;\n\n        let ballots = [];\n        for (const ballot of this.candidate_ballots[candidate]) {\n            ballots.push([ballot, this.ballots[ballot.ballot_id]]);\n        }\n        return ballots;\n    }\n\n    candidate_score = (candidate) => {\n        if (candidate.candidate_id !== undefined)\n            return this.candidate_scores[candidate.candidate_id];\n        return this.candidate_scores[candidate];\n    }\n\n    complete = () => {\n        const isCandidateElected = (candidate_id) => {\n            for (const candidate in this.elected_candidates) {\n                if (candidate_id === this.elected_candidates[candidate].candidate_id) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this.candidate_real_scores = { ...this.candidate_scores }\n        for (const candidate_id in this.candidate_real_scores) {\n            if (this.candidate_real_scores[candidate_id] === 0 && isCandidateElected(candidate_id)) {\n                this.candidate_real_scores[candidate_id] = this.quota;\n            }\n        }\n\n        this.state = RoundState.COMPLETE;\n    }\n}\n\nexport const RoundState = {\n    RUNNING: \"RUNNING\",\n    COMPLETE: \"COMPLETE\"\n};","\nimport { Round, RoundState } from './Round';\nimport { CandidateState } from './Candidate';\n\nexport class Race {\n\n    constructor(race_id, race_name, seats, dropped_candidates = []) {\n        this.race_id = race_id\n        this.race_name = race_name\n        this.seats = Number(seats)\n\n        this.rounds = [];\n\n        this.state = RaceState.ADDING;\n\n        // Candidates\n        this.candidates = []\n        this.inactive_candidates = dropped_candidates;\n\n        this.ballots = []\n        this.inactive_ballots = []\n\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        this.first_scores = []\n\n        // Planning Candidates\n        this.planned_inactive_candidates = []\n        this.planned_active_candidates = []\n\n        // Set Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n    }\n\n    add_candidate = (candidate, dropped = false) => {\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Candidates While Running\");\n\n        for (const current_candidate of this.inactive_candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n\n\n        if (dropped) {\n            this.inactive_candidates.push(candidate)\n            this.excused[candidate.candidate_id] = [0]\n            return\n        }\n\n        for (const current_candidate of this.candidates)\n            if (current_candidate.candidate_id === candidate.candidate_id)\n                return;\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n    }\n\n    add_ballot = (ballot) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state !== RaceState.ADDING)\n            throw new Error(\"Can't Add Ballots While Running\");\n\n        if (find_next_active_candidate(ballot.candidates) === null) {\n            this.inactive_ballots.push(ballot)\n            return;\n        }\n        for (let i = 0; i < this.ballots.length; i++)\n            if (this.ballots[i].ballot_id === ballot.ballot_id)\n                return;\n        this.ballots.push(ballot);\n    }\n\n    reset_race = () => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n        if (this.state === RaceState.ADDING)\n            return;\n\n        this.state = RaceState.ADDING;\n        this.rounds = []\n        this.transfer_voters = []\n        this.ballots_to_apply = []\n        this.candidate_ballot_rankings = {}\n\n        // Set Candidates Correctely\n        for (const candidate of this.planned_inactive_candidates) {\n            this.inactive_candidates.push(candidate)\n            this.candidates = this.candidates.filter((value) => {\n                return value !== candidate\n            });\n        }\n\n        for (const candidate of this.planned_active_candidates) {\n            this.candidates.push(candidate)\n            this.inactive_candidates = this.inactive_candidates.filter((value) => {\n                return value !== candidate\n            });\n        }\n\n        // Reset Candidate States\n        this.elected = {}\n        this.running = {}\n        this.transferring = {}\n        this.transfered = {}\n        this.excused = {}\n        this.first_scores = []\n\n        // Set Candidate States according to candidates\n        for (const candidate of this.candidates) {\n            this.running[candidate.candidate_id] = [0, this.running.length];\n        }\n\n        for (const candidate of this.inactive_candidates) {\n            this.excused[candidate.candidate_id] = [0]\n        }\n\n        // Lastly, Reset the Ballots\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n\n        for (const ballot of this.inactive_ballots) {\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n        console.log(\"Race Reset: \", this.race_name)\n\n    }\n\n    excuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n\n        // Check if Excused Already Excused\n        for (const current_candidate of this.inactive_candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        if (this.state !== RaceState.ADDING) {\n            this.planned_inactive_candidates.push(candidate)\n            return;\n        }\n\n        delete this.elected[candidate.candidate_id];\n        delete this.running[candidate.candidate_id];\n        delete this.transferring[candidate.candidate_id];\n        delete this.transfered[candidate.candidate_id];\n\n        this.candidates = this.candidates.filter((value) => {\n            return value !== candidate\n        });\n\n\n        this.inactive_candidates.push(candidate)\n        this.excused[candidate.candidate_id] = [0]\n\n        for (const ballot of this.ballots) {\n            if (find_next_active_candidate(ballot.candidates) === null) {\n                this.inactive_ballots.push(ballot);\n                this.ballots = this.ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n        }\n    }\n\n    unexcuse_candidate = (candidate) => {\n        const find_next_active_candidate = (candidates) => {\n            for (const candidate of candidates)\n                if (this.candidates.includes(candidate))\n                    return candidate\n            return null;\n        }\n\n        // Check if Already Not Excused\n        for (const current_candidate of this.candidates) {\n            if (current_candidate.candidate_id === candidate.candidate_id) {\n                return;\n            }\n        }\n\n        if (this.state !== RaceState.ADDING) {\n\n            // Check if excused in planned inactive\n            for (const current_candidate of this.planned_inactive_candidates) {\n                if (current_candidate.candidate_id === candidate.candidate_id) {\n                    this.inactive_candidates = this.inactive_candidates.filter((value) => {\n                        return value !== candidate\n                    });\n                    return;\n                }\n            }\n\n            this.planned_active_candidates.push(candidate)\n            return;\n        }\n\n        delete this.excused[candidate.candidate_id];\n        this.inactive_candidates = this.inactive_candidates.filter((value) => {\n            return value !== candidate\n        });\n\n        this.running[candidate.candidate_id] = [0, this.running.length];\n        this.candidates.push(candidate);\n\n        for (const ballot of this.inactive_ballots)\n            if (find_next_active_candidate(ballot.candidates) !== null) {\n                this.add_ballot(ballot)\n                this.inactive_ballots = this.inactive_ballots.filter((value) => {\n                    return value !== ballot\n                });\n            }\n    }\n\n    num_candidates = () => {\n        return this.candidates.length;\n    }\n\n    quota = () => {\n        if (this.state === RaceState.ADDING)\n            throw new Error(\"Can't Get Quota While Adding Ballots\");\n        return Math.floor(this.ballots.length / (this.seats + 1)) + 1;\n    }\n\n    currentScores = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let scores = [];\n        for (const candidate in this.elected) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.elected[candidate][0],\n            });\n        }\n        for (const candidate in this.running) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.running[candidate][0],\n            });\n        }\n        for (const candidate in this.transferring) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transferring[candidate][0],\n            });\n        }\n        for (const candidate in this.transfered) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: this.transfered[candidate][0],\n            });\n        }\n        for (const candidate in this.inactive_candidates) {\n            scores.push({\n                candidate: find_candidate_by_id(candidate),\n                score: 0,\n            });\n        }\n        return scores;\n    }\n\n    candidateTable = () => {\n        const find_candidate_by_id = (id) => {\n            for (const candidate of this.candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            for (const candidate of this.inactive_candidates)\n                if (candidate.candidate_id === id)\n                    return candidate;\n            return null;\n        }\n        let quota = 0;\n        if (this.state !== RaceState.ADDING)\n            quota = this.quota();\n\n        let candidateTable = []\n        // Candidate, Status, Position, Score\n\n        for (const candidate in this.elected) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.ELECTED,\n                position: this.elected[candidate][1],\n                score: this.elected[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.running) {\n            if (this.state === RaceState.ADDING) {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: candidateTable.length,\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            } else {\n                candidateTable.push({\n                    candidate: find_candidate_by_id(candidate),\n                    status: CandidateState.RUNNING,\n                    position: this.running[candidate][1],\n                    score: this.running[candidate][0],\n                    quota: quota,\n                });\n            }\n        }\n        for (const candidate in this.transferring) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERRING,\n                position: this.transferring[candidate][1],\n                score: this.transferring[candidate][0],\n                quota: quota,\n            });\n        }\n        for (const candidate in this.transfered) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.TRANSFERED,\n                position: this.transfered[candidate][1],\n                score: this.transfered[candidate][0],\n                quota: quota,\n            });\n        }\n\n        for (const candidate in this.excused) {\n            candidateTable.push({\n                candidate: find_candidate_by_id(candidate),\n                status: CandidateState.EXCUSED,\n                position: this.candidates.length,\n                score: 0,\n                quota: quota,\n            });\n        }\n        return candidateTable;\n    }\n\n    start_tabulation = () => {\n        if (this.state === RaceState.ADDING)\n            this.state = RaceState.TABULATING;\n    }\n\n    run_race_step = () => {\n        const begin_race = () => {\n            console.log(\"Beginning Race for\", this.race_name);\n            console.log(\"Total Voters is: \" + this.ballots.length + \" , for \" + this.seats + \" seats.\")\n            console.log(\"Quota is\", this.quota())\n            if (this.ballots.length === 0) {\n                this.state = RaceState.COMPLETE;\n                console.log(\"No Ballots Cast in Race\");\n            }\n            else {\n                let round = new Round(0, this.quota());\n\n                for (let i = 0; i < this.candidates.length; i++) {\n                    round.add_candidate(this.candidates[i], CandidateState.RUNNING);\n                }\n\n\n                for (let i = 0; i < this.ballots.length; i++) {\n                    this.ballots_to_apply.push([this.ballots[i], 1]);\n                }\n                this.rounds.push(round);\n            }\n        }\n\n        const add_round = () => {\n            const find_candidate_by_id = (id) => {\n                for (const candidate of this.candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                for (const candidate of this.inactive_candidates)\n                    if (candidate.candidate_id === id)\n                        return candidate;\n                return null;\n            }\n            console.log(\"Starting Round\", this.rounds.length);\n            let round = new Round(this.rounds.length, this.quota());\n            let previousRound = this.rounds[this.rounds.length - 1];\n\n            for (const candidate in this.elected) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.ELECTED);\n            }\n            for (const candidate in this.running) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.RUNNING);\n                for (const ballot of previousRound.candidate_ballot(candidate)) {\n                    round.add_ballot(ballot[0], ballot[1]);\n                }\n            }\n            for (const candidate in this.transferring) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERRING);\n            }\n            for (const candidate in this.transfered) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.TRANSFERED);\n            }\n            for (const candidate in this.excused) {\n                round.add_candidate(find_candidate_by_id(candidate), CandidateState.EXCUSED);\n            }\n\n            for (const ballot of previousRound.candidate_ballot(null)) {\n                round.add_ballot(ballot[0], ballot[1]);\n            }\n\n            this.rounds.push(round);\n        }\n\n        const elect_candidate = (candidate, score, currentRound) => {\n            console.log(\"Electing Candidate: \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_elected_candidate(candidate);\n\n            this.elected[candidate.candidate_id] = [score, Object.keys(this.elected).length];\n            delete this.running[candidate.candidate_id];\n\n            const surplus = score - this.quota();\n\n            let transfer_value = 1;\n            if (surplus > 0) {\n                transfer_value = surplus / score;\n            }\n\n            for (const ballot of currentRound.candidate_ballot(candidate)) {\n                this.ballots_to_apply.push([ballot[0], ballot[1] * transfer_value]);\n            }\n        }\n\n        const transfer_candidate = (candidate, score, currentRound) => {\n            console.log(\"Transferring Candidate \", candidate.candidate_name, \" (\", score, \")\");\n            currentRound.set_eliminate_candidate(candidate);\n\n            this.transferring[candidate.candidate_id] = [score, Object.keys(this.elected).length + Object.keys(this.running).length - 1];\n            delete this.running[candidate.candidate_id];\n\n            for (const ballot of currentRound.candidate_ballot(candidate))\n                this.ballots_to_apply.push(ballot)\n        }\n\n        const complete_round = (currentRound) => {\n            console.log(\"Completed Round\", currentRound.round_number);\n            currentRound.complete();\n\n            if (currentRound.active_candidates.length === 0) {\n                console.log(\"Race Complete\");\n                for (const candidate in this.transferring) {\n                    this.transfered[candidate] = this.transferring[candidate];\n                    delete this.transferring[candidate]\n                }\n                console.log(this.rounds);\n                this.state = RaceState.COMPLETE;\n            }\n        }\n\n        if (this.state === RaceState.COMPLETE)\n            return;\n        this.state = RaceState.TABULATING;\n\n        if (this.rounds.length === 0) {\n            begin_race();\n            return;\n        }\n\n        let currentRound = this.rounds[this.rounds.length - 1];\n        if (currentRound.state === RoundState.COMPLETE) {\n            add_round();\n            return;\n        }\n\n        if (this.ballots_to_apply.length > 0) {\n            let ballot = this.ballots_to_apply.shift();\n            currentRound.add_ballot(ballot[0], ballot[1]);\n\n            if (this.rounds.length === 1) {\n                const find_next_active_candidate = (candidates) => {\n                    for (const candidate of candidates)\n                        if (this.candidates.includes(candidate))\n                            return candidate\n                    return null;\n                }\n\n                for (let i = 0; i < ballot[0].candidates.length; i++) {\n                    const candidate = ballot[0].candidates[i];\n                    if (this.candidate_ballot_rankings[candidate] === undefined)\n                        this.candidate_ballot_rankings[candidate] = [];\n                    while (this.candidate_ballot_rankings[candidate].length < i + 1)\n                        this.candidate_ballot_rankings[candidate].push(0);\n                    this.candidate_ballot_rankings[candidate][i] += 1\n                }\n\n                let first_round_score = {};\n                if (this.first_scores.length !== 0) {\n                    first_round_score = { ...this.first_scores[this.first_scores.length - 1] };\n                }\n                let candidate = find_next_active_candidate(ballot[0].candidates)\n                if (candidate !== null) {\n                    if (candidate.candidate_id in first_round_score)\n                        first_round_score[candidate.candidate_id] += 1;\n                    else\n                        first_round_score[candidate.candidate_id] = 1;\n                    this.first_scores.push(first_round_score);\n                }\n            }\n\n            let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n                if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                    return -1;\n                } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                    return 1;\n                }\n                return 0;\n            });\n\n            for (let i = 0; i < activeCandidates.length; i++) {\n                this.running[activeCandidates[i].candidate_id] = [currentRound.candidate_score(activeCandidates[i]), Object.keys(this.elected).length + i];\n            }\n\n            return;\n        }\n\n        for (const candidate in this.transferring) {\n            this.transfered[candidate] = this.transferring[candidate];\n            delete this.transferring[candidate]\n        }\n\n        let activeCandidates = currentRound.active_candidates.sort((x, y) => {\n            if (currentRound.candidate_score(x) > currentRound.candidate_score(y)) {\n                return -1;\n            } else if (currentRound.candidate_score(y) > currentRound.candidate_score(x)) {\n                return 1;\n            }\n            return 0;\n        });\n\n        let roundElected = [];\n        let maxElected = this.seats - Object.keys(this.elected).length;\n\n        if (activeCandidates.length <= maxElected) {\n            for (const candidate of activeCandidates) {\n                if (currentRound.elected_candidates) {\n                    roundElected.push(candidate);\n                }\n            }\n        } else {\n            for (const candidate of activeCandidates) {\n                if (currentRound.candidate_score(candidate) >= this.quota()) {\n                    roundElected.push(candidate);\n                }\n            }\n        }\n\n        for (const candidate of roundElected) {\n            elect_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n        }\n\n        let roundTransfer = [];\n        if (Object.keys(this.elected).length === this.seats) {\n            for (const candidate of activeCandidates.reverse()) {\n                roundTransfer.push(candidate);\n            }\n        } else if (roundElected.length === 0) {\n            roundTransfer.push(activeCandidates[activeCandidates.length - 1]);\n        }\n\n        for (const candidate of roundTransfer) {\n            if (!currentRound.elected_candidates.includes(candidate)) {\n                transfer_candidate(candidate, currentRound.candidate_score(candidate), currentRound);\n            }\n        }\n\n        complete_round(currentRound);\n    }\n};\n\nexport const RaceState = {\n    ADDING: \"ADDING\",\n    TABULATING: \"TABULATING\",\n    COMPLETE: \"COMPLETE\"\n};","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { RaceState } from '../../../../Data_Models/Race';\n\nfunction PartyPercentage(props) {\n    const find_candidate_by_id = (race, id) => {\n        for (const candidate of race.candidates)\n            if (candidate.candidate_id === id)\n                return candidate;\n        return null;\n    }\n\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ranked_choices = 0;\n        for (const candidate in race.elected) {\n            if (find_candidate_by_id(race, candidate).candidate_party === party)\n                ranked_choices += 1;\n        }\n        return ranked_choices;\n    }\n\n    let choices = {};\n    for (const party of props.parties) {\n        let ranked_choices = get_ranked_choices(props.race, party);\n        if (ranked_choices > 0)\n            choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item],\n            \"color\": find_party_by_name(item).party_color,\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    // Wait until a candidate is actually elected to display\n    if (Object.entries(props.race.elected).length === 0 && props.race.elected.constructor === Object)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidates Elected By Party </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.7}\n                cornerRadius={1}\n                colors={getColor}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\n\nfunction PartyPercentage(props) {\n\n    const get_ranked_choices = (race) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        data.push({\n            \"id\": item,\n            \"label\": item,\n            \"value\": choices[item]\n        });\n        totalAmount += choices[item];\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n\n\n    return (\n        <div style={props.style}>\n            <h1> Number of Candidates Ranked </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar'\n\nfunction CandidatesRanked(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            if (ballot.candidates[0].candidate_party.party_name !== party.party_name)\n                continue;\n            const num_ranked = ballot.candidates.length;\n            maxChoices = Math.max(num_ranked, maxChoices);\n            if (num_ranked in ranked_choices)\n                ranked_choices[num_ranked] += 1;\n            else\n                ranked_choices[num_ranked] = 1;\n        }\n        return ranked_choices;\n    }\n\n    let maxChoices = 0;\n    let choices = {};\n    let keys = []\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n        keys.push(party.party_name);\n    }\n\n    let data = [];\n\n    for (let i = 1; i < maxChoices + 1; i++) {\n        let data_to_add = { index: i };\n        for (const item in choices) {\n            if (i in choices[item]) {\n                data_to_add[item] = choices[item][i];\n                data_to_add[item + \"Color\"] = choices[item][i];\n            }\n        }\n        data.push(data_to_add);\n    }\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    return (\n        <div style={props.style}>\n            <h1> Number of Candidates Ranked </h1>\n            <ResponsiveBarCanvas\n                data={data}\n                keys={keys}\n                indexBy=\"index\"\n                margin={{ top: 40, right: 40, bottom: 40, left: 60 }}\n                pixelRatio={2}\n                padding={0.05}\n                innerPadding={0}\n                minValue=\"auto\"\n                maxValue=\"auto\"\n                groupMode=\"stacked\"\n                layout=\"vertical\"\n                reverse={false}\n                colors={getColor}\n                colorBy=\"id\"\n                borderWidth={0}\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '# of Candidates Ranked',\n                    legendPosition: 'middle',\n                    legendOffset: 30\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '# of Voters',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                enableGridX={false}\n                enableGridY={true}\n                enableLabel={false}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                isInteractive={true}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLine } from '@nivo/line'\nimport { RaceState } from '../../../../Data_Models/Race';\n\n\nfunction PartyPercentage(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const get_ranked_choices = (race, party) => {\n        let ballots = race.ballots;\n        let ranked_choices = {};\n        for (const ballot of ballots) {\n            for (let i = 0; i < ballot.candidates.length; i++) {\n                maxchoices = Math.max(i, maxchoices);\n                if (ballot.candidates[i].candidate_party.party_name === party.party_name)\n                    if (i in ranked_choices)\n                        ranked_choices[i] += 1;\n                    else\n                        ranked_choices[i] = 1;\n            }\n        }\n        return ranked_choices;\n    }\n    let maxchoices = 0;\n    let choices = {};\n    for (const party of props.parties) {\n        choices[party.party_name] = get_ranked_choices(props.race, party);\n    }\n\n    let data = [];\n    for (const item in choices) {\n        let datapoints = [];\n        for (let i = 1; i < maxchoices + 1; i++) {\n            if (i in choices[item])\n                datapoints.push({ x: i, y: choices[item][i - 1] })\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear', min: 1 }}\n                yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Round',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Votes',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                colors={getColor}\n                enablePoints={false}\n                enableArea={true}\n                areaOpacity={1}\n                useMesh={true}\n            />\n        </div>\n    );\n}\n\nexport default PartyPercentage;\n","import React from 'react';\n\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { RaceState } from '../../../../Data_Models/Race';\n\nfunction CandidatesRanked(props) {\n\n    const get_first_elected = (ballot, elected) => {\n        for (let i = 0; i < ballot.candidates.length; i++) {\n            for (const candidate in elected) {\n                if (candidate === ballot.candidates[i].candidate_id) {\n                    return i + 1\n                }\n            }\n        }\n        return \"Exhausted\"\n    }\n\n    const get_ranked_choices = (race) => {\n        let ranked_choices = {};\n        for (const ballot of race.ballots) {\n            maxChoices = Math.max(ballot.candidates.length, maxChoices);\n        }\n\n        for (let i = 1; i < maxChoices + 1; i++) {\n            ranked_choices[i] = 0\n        }\n        ranked_choices[\"Exhausted\"] = 0\n\n        for (const ballot of race.ballots) {\n            ranked_choices[get_first_elected(ballot, race.elected)] += 1;\n        }\n\n        return ranked_choices\n    }\n\n    let maxChoices = 0;\n    let choices = get_ranked_choices(props.race);\n\n    let data = [];\n    let totalAmount = 0;\n\n    for (const item in choices) {\n        if (choices[item] > 0) {\n            data.push({\n                \"id\": item,\n                \"label\": item,\n                \"value\": choices[item]\n            });\n            totalAmount += choices[item];\n        }\n    }\n\n    const getPercentage = bar => {\n        return Math.round((bar.value / totalAmount) * 100) + \"%\";\n    }\n\n    if (Object.entries(props.race.elected).length === 0 && props.race.elected.constructor === Object)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Voter Satisfaction </h1>\n            <ResponsivePieCanvas\n                data={data}\n                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                pixelRatio={2}\n                padAngle={0.3}\n                cornerRadius={1}\n                colors={{ scheme: 'nivo' }}\n                borderColor={{ from: 'color', modifiers: [['darker', 0.6]] }}\n                radialLabelsSkipAngle={10}\n                radialLabelsTextXOffset={6}\n                radialLabelsTextColor={{ from: 'color', modifiers: [] }}\n                radialLabelsLinkOffset={0}\n                radialLabelsLinkDiagonalLength={16}\n                radialLabelsLinkHorizontalLength={24}\n                radialLabelsLinkStrokeWidth={1}\n                radialLabelsLinkColor={{ from: 'color' }}\n                sliceLabel={getPercentage}\n                slicesLabelsSkipAngle={20}\n                slicesLabelsTextColor=\"#333333\"\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default CandidatesRanked;\n","import React from 'react';\n\nimport { ResponsiveLineCanvas } from '@nivo/line'\nimport { RaceState } from '../../../../Data_Models/Race';\n\nfunction VoteOverTime(props) {\n    const find_party_by_name = (name) => {\n        for (let i = 0; i < props.parties.length; i++)\n            if (props.parties[i].party_name === name)\n                return props.parties[i];\n        return null\n    };\n\n    const find_candidate_by_id = (candidate_id) => {\n        for (let i = 0; i < props.race.candidates.length; i++)\n            if (String(props.race.candidates[i].candidate_id) === candidate_id)\n                return props.race.candidates[i];\n        return null;\n    };\n\n    let choices_over_time = {};\n    for (const party of props.parties) {\n        choices_over_time[party.party_name] = [];\n    }\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 100);\n\n    for (let i = 0; i < props.race.first_scores.length; i += 1) {\n        const score_chart = props.race.first_scores[i];\n\n        let choices = {}\n        for (const party of props.parties) {\n            choices[party.party_name] = 0;\n        }\n\n        for (const candidate_id in score_chart) {\n            const candidate = find_candidate_by_id(candidate_id);\n            choices[candidate.candidate_party.party_name] += score_chart[candidate_id];\n        }\n\n        for (const party of props.parties) {\n            choices_over_time[party.party_name] = [...choices_over_time[party.party_name], choices[party.party_name]];\n        }\n    }\n\n    let data = [];\n    for (const item in choices_over_time) {\n        let datapoints = [];\n        for (let i = 0; i < choices_over_time[item].length; i++) {\n            if (choices_over_time[item][i] !== 0) {\n                datapoints.push({ x: (i * 1), y: ((choices_over_time[item][i]) / ((i + 1) * 1) * 100) })\n            }\n        }\n        data.push({\n            id: item,\n            color: find_party_by_name(item).party_color,\n            data: datapoints,\n        });\n    }\n\n    const getColor = bar => find_party_by_name(bar.id).party_color;\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Party Vote Over Time </h1>\n            <ResponsiveLineCanvas\n                data={data}\n                margin={{ top: 50, right: 160, bottom: 50, left: 60 }}\n                xScale={{ type: 'linear' }}\n                xFormat={',.2r'}\n                yScale={{ type: 'linear', stacked: false, min: 0, max: 100 }}\n                yFormat={',.2r'}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    tickValues: 5,\n                    legend: 'Votes',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Percentage',\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                enableGridX={false}\n                colors={getColor}\n                lineWidth={1}\n                enablePoints={false}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTime;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\nimport { RaceState } from '../../../../Data_Models/Race';\n\n\nfunction VoteOverTimeBump(props) {\n    const indexOfMax = (arr) => {\n        if (arr.length === 0) {\n            return -1;\n        }\n        var max = arr[0];\n        var maxIndex = 0;\n        for (var i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                maxIndex = i;\n                max = arr[i];\n            }\n        }\n\n        return maxIndex;\n    }\n\n\n    let choices_over_time = [];\n\n    if (props.race.first_scores.length <= 1)\n        return (<div></div>);\n\n    let increment = 1;\n    if (props.race.first_scores.length > 50)\n        increment = Math.floor(props.race.first_scores.length / 50);\n\n    for (let i = 0; i < props.race.first_scores.length; i += increment) {\n        const score_chart = props.race.first_scores[i]\n\n        let candidate_positions = {};\n        let candidates = []\n        let scores = []\n        for (const candidate of props.race.candidates) {\n            candidates.push(candidate);\n            if (candidate.candidate_id in score_chart)\n                scores.push(score_chart[candidate.candidate_id]);\n            else\n                scores.push(0);\n        }\n\n        let position = 1;\n        while (scores.length > 0) {\n            let i = indexOfMax(scores);\n            scores.splice(i, 1);\n            candidate_positions[candidates[i].candidate_id] = position;\n            candidates.splice(i, 1);\n            position++;\n        }\n        choices_over_time.push(candidate_positions);\n    }\n\n\n    let data = [];\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (let i = 0; i < choices_over_time.length; i++) {\n            datapoint.push({ x: (i + 1) * increment, y: choices_over_time[i][candidate.candidate_id] });\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n    const getCandidateByName = (name) => {\n        for (const candidate of props.race.candidates) {\n            if (candidate.candidate_name === name)\n                return candidate;\n        }\n        return null;\n    }\n\n    const getColor = (bar) => {\n        return getCandidateByName(bar.id).candidate_color\n    }\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidate Rank Over Time </h1>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={getColor}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 90,\n                    tickValues: 5,\n                    format: \".2s\",\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default VoteOverTimeBump;\n","import React from 'react';\n\nimport { ResponsiveBump } from '@nivo/bump'\nimport { RaceState } from '../../../../Data_Models/Race';\n\n\nfunction RoundCandidateBump(props) {\n\n    if (props.race.rounds.length <= 1)\n        return (<div></div>);\n\n    let data = []\n\n    for (const candidate of props.race.candidates) {\n        let datapoint = []\n        for (const round of props.race.rounds) {\n            if (round.elected_candidates.includes(candidate)) {\n                datapoint.push({ x: round.round_number + 1, y: props.race.elected[candidate.candidate_id][1] + 1 });\n            } else if (round.eliminated_candidates.includes(candidate)) {\n                if (candidate.candidate_id in props.race.transferring)\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transferring[candidate.candidate_id][1] + 1 });\n                else\n                    datapoint.push({ x: round.round_number + 1, y: props.race.transfered[candidate.candidate_id][1] + 1 });\n            } else {\n                let active_candidates = round.active_candidates.sort((x, y) => {\n                    if (round.candidate_score(x) > round.candidate_score(y)) {\n                        return -1;\n                    } else if (round.candidate_score(y) > round.candidate_score(x)) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                datapoint.push({ x: round.round_number + 1, y: active_candidates.indexOf(candidate) + round.elected_candidates.length + 1 });\n            }\n        }\n        data.push({ id: candidate.candidate_name, data: datapoint });\n    }\n\n    const getCandidateByName = (name) => {\n        for (const candidate of props.race.candidates) {\n            if (candidate.candidate_name === name)\n                return candidate;\n        }\n        return null;\n    }\n\n    const getColor = (bar) => {\n        return getCandidateByName(bar.id).candidate_color\n    }\n\n    if (props.race.state === RaceState.ADDING)\n        return (<div></div>)\n\n    return (\n        <div style={props.style}>\n            <h1> Candidate Rank By Round </h1>\n            <ResponsiveBump\n                data={data}\n                margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\n                colors={getColor}\n                lineWidth={3}\n                activeLineWidth={6}\n                inactiveLineWidth={3}\n                inactiveOpacity={0.15}\n                pointSize={0}\n                activePointSize={0}\n                inactivePointSize={0}\n                pointColor={{ theme: 'background' }}\n                pointBorderWidth={3}\n                activePointBorderWidth={3}\n                pointBorderColor={{ from: 'serie.color' }}\n                axisTop={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: -36\n                }}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: '',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'ranking',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n            />\n        </div>\n    );\n}\n\nexport default RoundCandidateBump;\n","import React from 'react';\n\nimport FirstChoicePie from './ChartComponents/FirstChoicePie';\nimport ElectedCandidatesPie from './ChartComponents/ElectedCandidatesPie';\nimport CandidatesRankedPie from './ChartComponents/CandidatesRankedPie';\nimport CandidatesRanked from './ChartComponents/CandidatesRanked';\nimport PartyPercentage from './ChartComponents/PartyPercentage';\nimport EventualWinner from './ChartComponents/EventualWinner';\nimport VoteOverTime from './ChartComponents/VoteOverTime';\nimport VoteOverTimeBump from './ChartComponents/VoteOverTimeBump';\nimport RoundCandidateBump from './ChartComponents/RoundCandidateBump';\n\n\nfunction ChartPage(props) {\n    let chartStyle = {\n        alignSelf: 'center', width: '50%', height: '30vw', margin: '0 0% 5% 0'\n    }\n\n    return (\n        <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap', width: '100%' }}>\n            <FirstChoicePie race={props.race} parties={props.parties} style={chartStyle} />\n            <ElectedCandidatesPie race={props.race} parties={props.parties} style={chartStyle} />\n            <CandidatesRanked race={props.race} parties={props.parties} style={chartStyle} />\n            <CandidatesRankedPie race={props.race} parties={props.parties} style={chartStyle} />\n            <PartyPercentage race={props.race} parties={props.parties} style={chartStyle} />\n            <VoteOverTime race={props.race} parties={props.parties} style={chartStyle} />\n            <VoteOverTimeBump race={props.race} parties={props.parties} style={chartStyle} />\n            <EventualWinner race={props.race} parties={props.parties} style={chartStyle} />\n            <RoundCandidateBump race={props.race} parties={props.parties} style={chartStyle} />\n        </div >\n    );\n}\n\nexport default ChartPage","\nexport class Voter {\n    constructor(voter_id) {\n        this.voter_id = voter_id;\n\n        // Format\n        // {id: Ballot}\n        this.races = {};\n    }\n\n    participating_races = () => {\n        return Object.keys(this.races);\n    }\n\n    participating_in_race = (race_id) => {\n        return race_id in this.races;\n    }\n\n    get_ballot_for_race = (race_id) => {\n        if (race_id in this.races) {\n            if (this.races[race_id].length === 1)\n                return this.races[race_id][0]\n            return this.races[race_id];\n        }\n        return null;\n    }\n\n    add_ballot = (race_id, ballot) => {\n        if (ballot.candidates.length > 0) {\n            if (race_id in this.races) {\n                this.races[race_id] = [...this.races[race_id], ballot]\n            } else {\n                this.races[race_id] = [ballot];\n            }\n        }\n    }\n}","\nexport class Ballot {\n    constructor(ballot_id, candidates) {\n        this.ballot_id = ballot_id;\n        this.candidates = candidates;\n    }\n}","\nexport class Party {\n    constructor(party_id, party_name, party_color) {\n        this.party_id = party_id;\n        this.party_name = party_name;\n\n        if (!this.isValidColor(party_color)) {\n            party_color = \"#\" + party_color\n            if (!this.isValidColor(party_color)) {\n                console.log(\"Error Color Isn't Valid\", party_color)\n                party_color = \"#FFFFFF\"\n            }\n        }\n        this.party_color = party_color;\n    }\n\n    isValidColor = (color) => {\n        var s = new Option().style;\n        s.color = color;\n        return s.color !== '';\n    }\n}","import React from 'react';\n\nimport { ResponsiveSankey } from '@nivo/sankey'\n\nfunction Sankey(props) {\n\n    const GenerateData = (race) => {\n        const find_candidate_by_id = (candidate_id) => {\n            for (let i = 0; i < race.candidates.length; i++)\n                if (String(race.candidates[i].candidate_id) === candidate_id)\n                    return race.candidates[i];\n            return null;\n        };\n\n        const find_next_active_candidate = (candidates, active_candidates) => {\n            for (const candidate in candidates) {\n                for (const active_candidate in active_candidates) {\n                    if (candidates[candidate].candidate_id === active_candidates[active_candidate].candidate_id) {\n                        return candidates[candidate];\n                    }\n                }\n            }\n            return \"exhausted\";\n        }\n\n        const prev_round = (round) => {\n            return race.rounds[round.round_number - 1];\n        }\n\n        let data = { nodes: [{ id: \"Total Votes\", name: \"Total Votes\", color: \"#000000\" }, { id: \"Elected\", name: \"Elected\", color: \"#01A039\" }, { id: \"Exhausted\", name: \"Exhausted\", color: \"#FF0000\" }], links: [] }\n        for (const round_number in race.rounds) {\n            const round = race.rounds[round_number];\n            for (const candidate of round.start_active_candidates) {\n                data[\"nodes\"].push({ id: candidate.candidate_name + \" \" + round_number, name: candidate.candidate_name, color: candidate.candidate_party.party_color });\n            }\n            if (round.round_number === 0) {\n                // First Round so Count Vote Totals\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: \"Total Votes\", target: candidate.candidate_name + \" \" + round.round_number, value: round.candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n            } else {\n                // First add links from prior rounds\n                for (const candidate of round.start_active_candidates) {\n                    let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: candidate.candidate_name + \" \" + round.round_number, value: prev_round(round).candidate_real_scores[candidate.candidate_id] };\n                    data['links'].push(link);\n                    // Check if elected this round and add link if elected\n\n                    if (round.elected_candidates.includes(candidate) && round.round_number !== race.rounds.length - 1) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.quota, color: \"#01A039\" };\n                        data['links'].push(link);\n                    }\n                }\n\n                // Then add links from eliminated or elected candidates\n                for (const candidate_id in prev_round(round).ballotsToTransfer) {\n                    const candidate = find_candidate_by_id(candidate_id);\n\n                    // Find candidates that it will transfer to\n                    let transfer_candidates_ballot = {};\n\n                    let candidate_ballots = prev_round(round).ballotsToTransfer[candidate_id];\n                    for (const ballot in candidate_ballots) {\n                        const next_candidate = find_next_active_candidate(candidate_ballots[ballot].candidates, round.start_active_candidates);\n                        if (next_candidate !== \"exhausted\") {\n                            if (next_candidate.candidate_id in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate.candidate_id].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate.candidate_id] = [candidate_ballots[ballot]];\n                        } else {\n                            if (next_candidate in transfer_candidates_ballot)\n                                transfer_candidates_ballot[next_candidate].push(candidate_ballots[ballot])\n                            else\n                                transfer_candidates_ballot[next_candidate] = [candidate_ballots[ballot]];\n                        }\n                    }\n\n\n                    for (const transfer_candidate_id in transfer_candidates_ballot) {\n                        if (transfer_candidate_id !== \"exhausted\") {\n                            const transfer_candidate = find_candidate_by_id(transfer_candidate_id);\n\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: transfer_candidate.candidate_name + \" \" + round.round_number, value: value };\n                            data['links'].push(link);\n                        }\n                        else {\n                            let value = 0;\n                            for (const ballot in transfer_candidates_ballot[transfer_candidate_id]) {\n                                value += round.ballots[transfer_candidates_ballot[transfer_candidate_id][ballot].ballot_id];\n                            }\n                            let link = { source: candidate.candidate_name + \" \" + (round.round_number - 1), target: \"Exhausted\", value: value };\n                            data['links'].push(link);\n                        }\n                    }\n                }\n            }\n            if (round.round_number === race.rounds.length - 1) {\n                for (const candidate of round.start_active_candidates) {\n                    if (round.elected_candidates.includes(candidate)) {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Elected\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                    else {\n                        let link = { source: candidate.candidate_name + \" \" + round.round_number, target: \"Exhausted\", value: round.candidate_real_scores[candidate.candidate_id] };\n                        data['links'].push(link);\n                    }\n                }\n            }\n        }\n        return data;\n    }\n\n    if (props.race.rounds.length === 0)\n        return (<h1>Loading</h1>)\n\n\n    const data = GenerateData(props.race);\n\n    const getColor = (bar) => {\n        return bar.color\n    }\n\n    return (\n        <div style={props.style}>\n            <ResponsiveSankey\n                data={data}\n                margin={{ top: 100, right: 40, bottom: 100, left: 40 }}\n                layout=\"vertical\"\n                align=\"justify\"\n                sort=\"ascending\"\n                colors={getColor}\n                nodeTooltip={node => <span> {node.name}: {Math.round(node.value)}</span>}\n                nodeOpacity={1}\n                nodeThickness={10}\n                nodeInnerPadding={3}\n                nodeSpacing={10}\n                nodeBorderWidth={0}\n                nodeBorderColor={{ from: 'color', modifiers: [['darker', 0.8]] }}\n                linkOpacity={0.4}\n                linkHoverOpacity={0.8}\n                linkHoverOthersOpacity={0.1}\n                enableLinkGradient={true}\n                enableLabels={true}\n                label={node => `${node.name}`}\n                labelPosition=\"outside\"\n                labelOrientation=\"vertical\"\n                labelPadding={16}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    );\n}\n\nexport default Sankey;","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveHeatMapCanvas } from '@nivo/heatmap'\n\nfunction HeatMap(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [showPercent, setShowPercent] = useState(true);\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let heatData = { candidate: candidate.candidate_name };\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            if (!showPercent)\n                heatData[other_candidate.candidate_name] = sum;\n            else\n                heatData[other_candidate.candidate_name] = Math.round((sum / ballots.length) * 100);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(heatData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                {yButtons}\n            </DropdownButton>\n            <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                {xButtons}\n            </DropdownButton>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveHeatMapCanvas\n                    data={data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    tooltipFormat={\".0%\"}\n                    margin={{ top: 100, right: 60, bottom: 60, left: 60 }}\n                    forceSquare={true}\n                    axisTop={{ orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -90, legend: '', legendOffset: 36 }}\n                    axisRight={null}\n                    axisBottom={null}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: '',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    cellOpacity={1}\n                    cellBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.8]] }}\n                    defs={[\n                        {\n                            id: 'lines',\n                            type: 'patternLines',\n                            background: 'inherit',\n                            color: 'rgba(0, 0, 0, 0.1)',\n                            rotation: -45,\n                            lineWidth: 4,\n                            spacing: 7\n                        }\n                    ]}\n                    fill={[{ id: 'lines' }]}\n                    animate={true}\n                    motionStiffness={80}\n                    motionDamping={9}\n                    hoverTarget=\"cell\"\n                    cellHoverOthersOpacity={0.25}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default HeatMap;\n","import React, { useState } from 'react';\n\nimport { ResponsiveBarCanvas } from '@nivo/bar';\n\nimport { RaceState } from '../../../../Data_Models/Race';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n\nfunction ElectionBar(props) {\n    const get_round_data = (round, active_candidates) => {\n        let round_data = {};\n        for (let i = 0; i < active_candidates.length; i++) {\n            round_data[active_candidates[i].candidate_id] = { position: i, score: round.candidate_score(active_candidates[i]) }\n        }\n        return round_data;\n    }\n\n    const get_candidate_position = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.position;\n            }\n        }\n        return 0;\n    }\n\n    const get_max_score = () => {\n        let max_score = quota;\n        for (const candidate_table of candidateTable) {\n            max_score = Math.max(candidate_table.score, max_score);\n        }\n        return max_score\n    }\n\n    const get_candidate_by_position = (position) => {\n        for (const candidate of props.race.candidates) {\n            if (get_candidate_position(candidate) === position) {\n                return candidate;\n            }\n        }\n        return 0;\n    }\n\n    const final_candidate_score = (candidate) => {\n        for (const candidate_table of candidateTable) {\n            if (candidate_table.candidate.candidate_id === candidate.candidate_id) {\n                return candidate_table.score;\n            }\n        }\n        return 0;\n    }\n\n    const [round, setRound] = useState(1);\n    const candidateTable = props.race.candidateTable();\n\n    if (props.race.rounds === 0 || props.race.state === RaceState.ADDING)\n        return <h1> Loading... </h1>\n\n    let quota = props.race.quota();\n\n    let data_active_candidates = [];\n    // Get Candidates to Display\n    let round_active_candidates = props.race.rounds[round - 1].active_candidates;\n    for (let i = 0; i < round; i++) {\n        data_active_candidates.push(get_round_data(props.race.rounds[i],\n            round_active_candidates));\n    }\n\n    let keys = [\"elected\", \"transferred\"]\n    let chart_data = [];\n\n    for (let i = 0; i < props.race.rounds[round - 1].candidates.length; i++) {\n        const candidate = get_candidate_by_position(i);\n        if (round_active_candidates.includes(candidate)) {\n            let data = { candidate: candidate.candidate_name };\n            for (let i = 0; i < round; i++) {\n                let score = data_active_candidates[i][candidate.candidate_id].score;\n                if (i !== 0) {\n                    score -= data_active_candidates[i - 1][candidate.candidate_id].score;\n                }\n                data[\"Round \" + (i + 1)] = score;\n                if (!keys.includes(\"Round \" + (i + 1))) {\n                    keys.push(\"Round \" + (i + 1));\n                }\n            }\n            chart_data.push(data);\n        } else if (props.race.rounds[round - 1].elected_candidates.includes(candidate)) {\n            chart_data.push({ candidate: candidate.candidate_name, elected: props.race.rounds[round - 1].candidate_real_scores[candidate.candidate_id] });\n        } else {\n            chart_data.push({ candidate: candidate.candidate_name, transferred: final_candidate_score(candidate) });\n        }\n    }\n    return (\n        <div style={{ width: '100%', height: '50vw' }}>\n            <div style={{ width: '80%' }}>\n                <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'black', textAlign: 'center', padding: '5% 0 0 0' }}>\n                    Round\n                </label>\n                <div style={{ margin: '0% 5% 0% 5%' }}>\n                    <RangeSlider\n                        min={1}\n                        max={props.race.rounds.length}\n                        step={1}\n                        value={round}\n                        variant=\"secondary\"\n                        onChange={changeEvent => setRound(changeEvent.target.value)}\n                    />\n                </div>\n            </div>\n            <div style={{ width: '100%', height: '50vw' }}>\n                <ResponsiveBarCanvas\n                    data={chart_data}\n                    keys={keys}\n                    indexBy=\"candidate\"\n                    margin={{ top: 40, right: 40, bottom: 200, left: 60 }}\n                    maxValue={get_max_score()}\n                    pixelRatio={2}\n                    padding={0.05}\n                    innerPadding={0}\n                    groupMode=\"stacked\"\n                    layout=\"vertical\"\n                    reverse={false}\n                    colors={{ scheme: 'nivo' }}\n                    colorBy=\"id\"\n                    borderWidth={0}\n                    borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    axisBottom={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: -60,\n                    }}\n                    axisLeft={{\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Score',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    enableGridX={false}\n                    enableGridY={true}\n                    enableLabel={false}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                    isInteractive={true}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ElectionBar;\n","import React, { useState } from 'react';\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\n\nimport { ResponsiveChordCanvas } from '@nivo/chord'\n\nfunction Chord(props) {\n    const get_ballots_for_candidate_at_position = (candidate, position) => {\n        let ballots = [];\n        for (const ballot of props.race.ballots) {\n            if (ballot.candidates.length > position) {\n                if (ballot.candidates[position].candidate_id === candidate.candidate_id) {\n                    ballots.push(ballot);\n                }\n            }\n        }\n        return ballots;\n    }\n\n    const [xChoice, setXChoice] = useState(2);\n    const [yChoice, setYChoice] = useState(1);\n\n    let data = [];\n    let keys = []\n\n    for (const candidate of props.race.candidates) {\n        let chordData = [];\n        let ballots = get_ballots_for_candidate_at_position(candidate, yChoice - 1);\n        for (const other_candidate of props.race.candidates) {\n            let sum = 0;\n            if (ballots.length > 0) {\n                for (const ballot of ballots) {\n                    if (ballot.candidates.length > xChoice - 1)\n                        if (ballot.candidates[xChoice - 1].candidate_id === other_candidate.candidate_id) {\n                            sum += 1;\n                        }\n                }\n            }\n            chordData.push(sum);\n        }\n        keys.push(candidate.candidate_name);\n        data.push(chordData);\n    }\n\n    let xButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setXChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    let yButtons = props.race.rounds.map((item, index) => {\n        if (item.round_number !== yChoice - 1 || item.round_number !== xChoice - 1)\n            return (<Dropdown.Item key={index} as=\"button\" onClick={() => setYChoice(item.round_number + 1)} > {\"Round \" + (item.round_number + 1)}</Dropdown.Item >);\n        return;\n    });\n\n    return (\n        <div style={{ width: '100%', height: \"100%\" }}>\n            <div>\n                <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + yChoice}>\n                    {yButtons}\n                </DropdownButton>\n\n                <DropdownButton id=\"dropdown-basic-button\" title={\"Round \" + xChoice}>\n                    {xButtons}\n                </DropdownButton>\n            </div>\n\n            <div style={{ width: '100%', height: '100vw' }}>\n                <ResponsiveChordCanvas\n                    matrix={data}\n                    keys={keys}\n                    margin={{ top: 60, right: 200, bottom: 60, left: 60 }}\n                    valueFormat=\".2f\"\n                    pixelRatio={2}\n                    padAngle={0.006}\n                    innerRadiusRatio={0.86}\n                    innerRadiusOffset={0}\n                    arcOpacity={1}\n                    arcBorderWidth={1}\n                    arcBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    ribbonOpacity={0.5}\n                    ribbonBorderWidth={0}\n                    ribbonBorderColor={{ from: 'color', modifiers: [['darker', 0.4]] }}\n                    enableLabel={true}\n                    label=\"id\"\n                    labelOffset={9}\n                    labelRotation={-90}\n                    labelTextColor={{ from: 'color', modifiers: [['darker', 1]] }}\n                    colors={{ scheme: 'category10' }}\n                    isInteractive={true}\n                    arcHoverOpacity={1}\n                    arcHoverOthersOpacity={0.4}\n                    ribbonHoverOpacity={0.75}\n                    ribbonHoverOthersOpacity={0.15}\n                    legends={[\n                        {\n                            anchor: 'right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 120,\n                            translateY: 0,\n                            itemWidth: 80,\n                            itemHeight: 11,\n                            itemsSpacing: 0,\n                            itemTextColor: '#999',\n                            itemDirection: 'left-to-right',\n                            symbolSize: 12,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemTextColor: '#000'\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chord;\n","import React from 'react';\n\nimport NivoSankey from './ModelComponents/Sankey';\nimport HeatMap from './ModelComponents/HeatMap';\nimport ElectionBar from './ModelComponents/ElectionBar';\nimport Chord from './ModelComponents/Chord';\n\nfunction ModelPage(props) {\n    if (props.model === 0) {\n        return (\n            <div style={{ display: \"flex\", flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center', width: '100%' }}>\n                <ElectionBar race={props.race} style={{ alignSelf: 'center', width: '40vw' }} />\n            </div>\n        );\n    } else if (props.model === 1) {\n        return (\n            <div className=\"text-center\" style={{\n                height: '100%',\n                minHeight: '100%',\n                display: \"flex\",\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                <HeatMap race={props.race} />\n                <Chord race={props.race} />\n            </div  >\n        );\n    } else if (props.model === 2) {\n        console.log(\"Sankey\");\n        return (\n            <div className=\"text-center\" style={{\n                backgroundColor: 'grey',\n                height: '60vw',\n                display: \"flex\",\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                <NivoSankey race={props.race}\n                    style={{\n                        width: '90%',\n                        height: '60vw'\n                    }}\n                />\n            </div >\n        );\n    }\n}\n\nexport default ModelPage","import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport uuid from 'react-uuid'\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport { Dropdown } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport useInterval from '../Hooks/useInterval';\nimport CandidateList from './Race/CandidateList';\n\nimport ElectionSettings from './Settings/Settings';\n\nimport CustomFirstPie from './CustomFirstPie'\n\nimport ChartPage from './Charts/ChartPage'\nimport useWindowSize from '../Hooks/useWindowSize';\n\nimport { Race, RaceState } from '../../Data_Models/Race';\nimport { Voter } from '../../Data_Models/Voter';\nimport { Ballot } from '../../Data_Models/Ballot';\nimport { Party } from '../../Data_Models/Party';\nimport { Candidate } from '../../Data_Models/Candidate';\nimport { find_race_by_name, find_race_by_id, find_party_by_name, find_candidate_by_id, find_races_by_candidate_id, find_party_by_id, shadeColor } from '../../Data_Models/Util';\n\nimport './ElectionPage.css'\nimport { RoundState } from '../../Data_Models/Round';\n\nimport ModelPage from './Models/ModelPage';\n\n\n\nfunction ElectionPage(props) {\n\n    const loadParties = (party_data) => {\n        let partiesToAdd = []\n        for (const party of party_data.parties) {\n            for (let i = 0; i < partiesToAdd.length; i++)\n                if (partiesToAdd.party_name === party.party_name)\n                    continue;\n            partiesToAdd.push(new Party(uuid(), party.party_name, party.party_color));\n        }\n        return partiesToAdd;\n    }\n\n    const loadRaces = (election_configuration) => {\n        let racesToAdd = []\n        for (const race of election_configuration.races) {\n            for (let i = 0; i < racesToAdd.length; i++)\n                if (racesToAdd.race_id === race.race_id)\n                    continue;\n\n            racesToAdd.push(new Race(race.race_id, race.race_position, race.race_max_winners));\n        }\n        return racesToAdd;\n    }\n\n    const loadCandidates = (candidate_data) => {\n        let newParties = []\n        for (let key in candidate_data) {\n            const race = find_race_by_name(races, key);\n            let candidate_colors = {};\n            if (race === null)\n                continue;\n            for (const candidate of candidate_data[key]) {\n                let party = find_party_by_name(parties, candidate.party);\n                if (party === null) {\n                    party = find_party_by_name(newParties, candidate.party)\n                }\n                if (party === null) {\n                    party = new Party(uuid(), candidate.party, \"FFFFFF\");\n                    console.log(\"Adding Party: \", party.party_name);\n                    newParties.push(party)\n                }\n                let color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n\n                if (party.party_name in candidate_colors) {\n                    while (candidate_colors[party.party_name].includes(color))\n                        color = shadeColor(party.party_color, Math.floor(Math.random() * 100) - 50);\n                    candidate_colors[party.party_name].push(color);\n                }\n                else\n                    candidate_colors[party.party_name] = [color]\n                race.add_candidate(new Candidate(candidate.number, candidate.name, party, color));\n            }\n        }\n\n        setParties([...parties, ...newParties])\n\n\n        setCandidatesLoaded(true);\n\n        return;\n    }\n\n    const loadVoters = (ballot_data) => {\n        let voters = []\n        for (const item of ballot_data.ballots) {\n            let voter = new Voter(uuid())\n            for (let key in item) {\n                let candidateOrder = []\n                for (let candidate_id of item[key]) {\n                    const race = find_race_by_id(races, key)\n                    if (race !== null) {\n                        const candidate = find_candidate_by_id(race.candidates, candidate_id);\n                        candidateOrder.push(candidate);\n                    }\n                };\n\n                const ballot = new Ballot(uuid(), candidateOrder);\n                const race = find_race_by_id(races, key);\n                if (race !== null) {\n                    race.add_ballot(ballot);\n                }\n                voter.add_ballot(key, ballot);\n            }\n            voters.push(voter);\n        }\n        return voters;\n    }\n\n    const excused_changed = (candidate) => {\n        if (candidates_dropped.includes(candidate)) {\n            setCandidatesDropped(candidates_dropped.filter((value) => {\n                return value !== candidate\n            }));\n        } else {\n            setCandidatesDropped([candidate, ...candidates_dropped])\n        }\n    }\n\n    const [election_configuration, setElectionConfiguration] = useState([]);\n    const [candidate_data, setCandidateData] = useState([]);\n    const [party_data, setPartyData] = useState([]);\n    const [ballot_data, setBallotData] = useState([]);\n\n    const [candidates_dropped, setCandidatesDropped] = useState([]);\n\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [partiesLoaded, setPartiesLoaded] = useState(false);\n    const [racesLoaded, setRacesLoaded] = useState(false);\n    const [candidatesLoaded, setCandidatesLoaded] = useState(false);\n    const [votersLoaded, setVotersLoaded] = useState(false);\n\n    const [parties, setParties] = useState([]);\n    const [races, setRaces] = useState([]);\n    const [voters, setVoters] = useState([]);\n\n    const [activeRace, setActiveRace] = useState(null);\n    const [speed, setSpeed] = useState(1000);\n    const [refresh, setRefresh] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [page, setPage] = useState(0);\n\n    const [model, setModel] = useState(0);\n\n    const size = useWindowSize();\n\n    useEffect(() => {\n        if (!isLoading)\n            setPartiesLoaded(true);\n    }, [parties]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (activeRace === null)\n                setActiveRace(races[0]);\n            setRacesLoaded(true);\n        }\n    }, [races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!isLoading)\n            setVotersLoaded(true);\n    }, [voters]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        for (const race of races) {\n            if (race.state !== RaceState.ADDING)\n                continue;\n            for (const candidate of race.inactive_candidates) {\n                race.unexcuse_candidate(candidate);\n            }\n            for (const candidate of candidates_dropped) {\n                if (find_candidate_by_id(race.candidates, candidate.candidate_id) !== null)\n                    race.excuse_candidate(candidate);\n            }\n        }\n        setRefresh(!refresh)\n    }, [candidates_dropped, races]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        const loadData = async () => {\n            if (props.data !== undefined && props.data !== null) {\n                setElectionConfiguration(props.data.election_configuration);\n                setCandidateData(props.data.candidate_data);\n                setPartyData(props.data.parties_data);\n                setBallotData(props.data.ballot_data);\n                setIsLoading(false);\n                return;\n            }\n            let electionId = props.match.params.electionId;\n\n            if (typeof (electionId) === \"undefined\") {\n                electionId = \"uc_berkeley\";\n            }\n\n            let yearId = props.match.params.yearId;\n            if (typeof (yearId) === \"undefined\") {\n                yearId = \"2015\";\n            }\n\n            let databaseString = 'elections/' + electionId + \"/\" + yearId;\n\n            console.log(\"Loading Data From DataBase\");\n            await firebase.database().ref(databaseString).once('value', snapshot => {\n                if (!snapshot.exists()) {\n                    console.log(\"Path Doesn't Exist, Loading Default Reference\");\n                    databaseString = 'elections/uc_berkeley/2015';\n                }\n            });\n\n            firebase.database().ref(databaseString).once('value', snapshot => {\n                setElectionConfiguration(snapshot.child('election_configuration').val());\n                setCandidateData(snapshot.child('candidate_data').val());\n                setPartyData(snapshot.child('parties_data').val());\n                setBallotData(snapshot.child('ballot_data').val());\n                setIsLoading(false);\n            });\n        }\n\n        if (isLoading) {\n            loadData();\n            return;\n        }\n        if (!partiesLoaded) {\n            console.log(\"Loading Parties\")\n            let parties = loadParties(party_data);\n            setParties(parties);\n        }\n\n        if (partiesLoaded && !racesLoaded) {\n            console.log(\"Loading Races\");\n            setRaces(loadRaces(election_configuration));\n            return;\n        }\n\n        if (racesLoaded && !candidatesLoaded) {\n            console.log(\"Loading Candidates\");\n            loadCandidates(candidate_data);\n            return;\n        }\n\n        if (candidatesLoaded && !votersLoaded) {\n            console.log(\"Loading Voters\");\n            setVoters(loadVoters(ballot_data));\n        }\n        if (votersLoaded) {\n            console.log(\"Finished Loading\");\n        }\n\n    }, [isLoading, partiesLoaded, racesLoaded, candidatesLoaded, votersLoaded]);  // eslint-disable-line react-hooks/exhaustive-deps\n\n    useInterval(() => {\n        if (activeRace.state !== RoundState.COMPLETE && isRunning) {\n            for (let i = 0; i < Math.floor(speed / 10); i++) {\n                activeRace.run_race_step();\n            }\n            setRefresh(!refresh);\n        } else {\n            setIsRunning(false)\n        }\n    }, isRunning ? 100 : null)\n\n    const switchActiveRace = (race) => {\n        setIsRunning(false);\n        setActiveRace(race);\n    }\n\n    const finishRaces = () => {\n        for (const race of races) {\n            while (race.state !== RoundState.COMPLETE) {\n                race.run_race_step();\n            }\n        }\n        setRefresh(!refresh);\n    }\n\n    const stopRunning = (race) => {\n        setIsRunning(false);\n    }\n\n    const saveCandidateChanges = (id, name, party, color, active) => {\n        let new_races = find_races_by_candidate_id(races, id)\n        for (const race_to_change of new_races) {\n            let candidate = find_candidate_by_id(race_to_change.candidates, id)\n            candidate.candidate_name = name\n            candidate.candidate_party = party\n            candidate.candidate_color = color\n        }\n    }\n\n    const savePartyChanges = (id, name, color) => {\n        let party = find_party_by_id(parties, id);\n        party.party_name = name\n        party.party_color = color\n    }\n\n\n    // Render Everything\n    if (isLoading || activeRace == null)\n        return <h1> Loading... </h1>\n\n    const pageButtonStyle = { borderRadius: 0, height: \"100%\", width: '50%' };\n    let pageButtons = (\n        <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n            <Button onClick={() => setPage(0)} disabled={page === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Election'}\n            </Button>\n            <Button onClick={() => setPage(1)} disabled={page === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Charts'}\n            </Button>\n            <Button onClick={() => setPage(2)} disabled={page === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Models'}\n            </Button>\n            <Button onClick={() => setPage(3)} disabled={page === 3} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Custom Graph'}\n            </Button>\n            <Button onClick={() => setPage(4)} disabled={page === 4} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                {'Settings'}\n            </Button>\n        </ButtonGroup>\n    );\n\n    let raceTitle = (\n        <div className=\"title-text\" style={{ width: '100%', backgroundColor: 'grey', margin: '1% 2.5% 1% 2.5%', borderRadius: '5px' }}>\n            <h1 style={{ font: '3.5rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '1%' }}> {activeRace.race_name} </h1>\n        </div>\n    );\n\n    if (page === 0) {\n\n        let dropdownItems = races.map((item, index) => (\n            <Dropdown.Item key={index} as=\"button\" onClick={() => switchActiveRace(item)} > {item.race_name}</Dropdown.Item >\n        ));\n\n        return (\n            <div className=\"text-center\" style={{ display: \"flex\", justifyContent: 'center', flexWrap: 'wrap' }}>\n                {pageButtons}\n                {raceTitle}\n                <div className=\"election-table\" style={{ width: '100%' }}>\n                    <CandidateList candidates={activeRace.candidateTable} seats={activeRace.seats} refresh={refresh} />\n                </div>\n                <ButtonGroup size=\"lg\" style={{ borderRadius: '5px', width: '100%', margin: '0% 2.5% 0% 2.5%' }}>\n                    <DropdownButton id=\"dropdown-item-button\" as={ButtonGroup} title=\"Change Race\" variant=\"primary\" size=\"lg\" style={{ boxShadow: '0 0 0 1px black', borderRadius: '5px 0px 0px 5px' }}>\n                        {dropdownItems}\n                    </DropdownButton>\n                    <Button onClick={() => setIsRunning(true)} disabled={isRunning} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Run Election'}\n                    </Button>\n                    <Button onClick={finishRaces} disabled={false} variant=\"primary\" style={{ boxShadow: '0 0 0 1px black', width: '5%' }}>\n                        {'Finish Races'}\n                    </Button>\n                    <div style={{ boxShadow: '0 0 0 1px black', backgroundColor: '#007bff', width: '30%', borderRadius: '0px 5px 5px 0px' }}>\n                        <label style={{ font: '1.3rem/1 arial, sans-serif', color: 'white', textAlign: 'center', padding: '5% 0 0 0' }}>\n                            Speed\n                        </label>\n                        <div style={{ margin: '0% 5% 0% 5%' }}>\n                            <RangeSlider\n                                min={0}\n                                max={10000}\n                                step={10}\n                                value={speed}\n                                variant=\"secondary\"\n                                onChange={changeEvent => setSpeed(changeEvent.target.value)}\n                            />\n                        </div>\n                    </div>\n                </ButtonGroup>\n            </div >\n        );\n    } else if (page === 1) {\n        return (\n            <div className=\"text-center\" style={{\n                display: \"flex\", justifyContent: 'center', flexWrap: 'wrap',\n                width: size.width,\n            }}>\n                {pageButtons}\n                {raceTitle}\n                <ChartPage race={activeRace} parties={parties} />\n            </div >\n        );\n    } else if (page === 2) {\n        let modelButtons = (\n            <ButtonGroup size=\"lg\" style={{ width: \"100%\", height: \"50\", padding: 0, margin: 0 }}>\n                <Button onClick={() => setModel(0)} disabled={model === 0} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Bar'}\n                </Button>\n                <Button onClick={() => setModel(1)} disabled={model === 1} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Heat Map'}\n                </Button>\n                <Button onClick={() => setModel(2)} disabled={model === 2} variant=\"secondary\" size=\"lg\" style={pageButtonStyle}>\n                    {'Sankey'}\n                </Button>\n            </ButtonGroup>\n        );\n\n        return (\n            <div className=\"text-center\" style={{\n                display: \"flex\",\n                width: size.width,\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                {pageButtons}\n                {modelButtons}\n                {raceTitle}\n                <ModelPage race={activeRace} model={model} />\n            </div>\n        );\n    } else if (page === 4) {\n        return (\n            <div className=\"text-center\" style={{\n                height: '100%',\n                width: size.width,\n                display: 'flex',\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                { pageButtons}\n                { raceTitle}\n                <ElectionSettings race={activeRace} parties={parties} savePartyChanges={savePartyChanges}\n                    saveCandidateChanges={saveCandidateChanges} excused={excused_changed} running={stopRunning} refresh={refresh} />\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"text-center\" style={{\n                height: '100%',\n                minHeight: '100%',\n                display: \"flex\",\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                { pageButtons}\n                { raceTitle}\n                <CustomFirstPie race={activeRace} />\n            </div>\n        )\n    }\n}\n\nexport default ElectionPage;","import React, { Component } from 'react';\n\n\nexport class FourZeroFour extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>404: Oops! Page not found!</h1>\n            </div>)\n    }\n}\nexport default FourZeroFour;\n","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport Button from 'react-bootstrap/Button'\n\nimport { Form } from 'react-bootstrap';\n\nfunction AddToDatabase() {\n    const AddToDB = (event) => {\n        const checkStrings = (str) => {\n            return str === null || str.match(/^ *$/) !== null;\n        }\n        event.preventDefault();\n        let data = ({ election_configuration: election_configuration, candidate_data: candidate_data, ballot_data: ballot_data, parties_data: party_data });\n        if (!checkStrings(electionName) && !checkStrings(year)) {\n            firebase.database().ref(\"elections/\" + electionName + \"/\" + year).set(data);\n            alert(\"Added To Database: elections/\" + electionName + \"/\" + year);\n        }\n        else {\n            alert('Invalid Name');\n        }\n    }\n\n    const onChange = async (event, callback) => {\n        event.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (event) => {\n            callback(JSON.parse(event.target.result));\n        };\n        if (event.target.files[0] !== null)\n            reader.readAsText(event.target.files[0]);\n    }\n\n    const [electionName, setElectionName] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [election_configuration, setElectionConfiguration] = useState(null);\n    const [party_data, setPartyData] = useState(null);\n    const [candidate_data, setCandidateData] = useState(null);\n    const [ballot_data, setBallotData] = useState(null);\n\n    return (\n        <div className=\"text-center\">\n            <h1> Add to Database </h1>\n            <Form onSubmit={AddToDB}>\n                <Form.Group>\n                    <Form.Control type=\"text\" value={electionName} onChange={(event) => setElectionName(event.target.value)} placeholder=\"Election Name\" />\n                    <Form.Control type=\"text\" value={year} onChange={(event) => setYear(event.target.value)} placeholder=\"Year\" />\n                </Form.Group>\n                <Form.Group style={{ display: 'grid', justifyItems: 'center' }}>\n                    <Form.File onChange={(event) => onChange(event, setElectionConfiguration)} accept='.json' label=\"Election Configuration\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setPartyData)} label=\"Party Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setCandidateData)} label=\"Candidate Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                    <Form.File onChange={(event) => onChange(event, setBallotData)} label=\"Ballot Data\" style={{ backgroundColor: 'grey', margin: '5px' }} />\n                </Form.Group>\n                <Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Group>\n            </Form>\n        </div >\n    );\n}\n\nexport default AddToDatabase;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Redirect, withRouter } from \"react-router\";\nimport './firebase';\nimport './App.css'\n\nimport NavBar from './Components/NavBar/NavBar';\nimport Home from './Components/Home';\nimport ElectionPage from './Components/ElectionPage/ElectionPage';\nimport FourZeroFour from './Components/FourZeroFour';\nimport AddToDatabase from './Components/AddToDatabase';\n\nimport election_configuration from './Data/Configuration.json';\nimport candidate_data from './Data/Candidates.json';\nimport parties_data from './Data/Parties.json';\nimport ballot_data from './Data/Ballots.json';\n\nconst NavBarWithRouter = withRouter(NavBar);\n\nfunction App() {\n    return (\n        <BrowserRouter basename='/stvote' style={{ width: '100%', height: '100%' }}>\n            <Fragment >\n                <NavBarWithRouter style={{ width: '100%', height: '100%' }} />\n                <main style={{ width: '100%', height: '100%' }}>\n                    <Switch>\n                        <Route exact path='/'> <Redirect to=\"/home\" /> </Route>\n                        <Route path='/home' component={Home} />\n                        <Route exact path='/election' render={() => (<ElectionPage data={{ election_configuration: election_configuration, candidate_data: candidate_data, parties_data: parties_data, ballot_data: ballot_data }} />)} />\n                        <Route exact path='/election/:electionId' component={ElectionPage} />\n                        <Route path='/election/:electionId/:yearId' component={ElectionPage} />\n                        <Route path='/add' component={AddToDatabase} />\n                        <Route component={FourZeroFour} />\n                    </Switch>\n                </main>\n            </Fragment>\n        </BrowserRouter>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{ width: '100%', height: '100%' }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}